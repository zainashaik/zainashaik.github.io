{"version":3,"sources":["../../../src/server/dev/static-paths-worker.ts"],"sourcesContent":["import type { NextConfigComplete } from '../config-shared'\n\nimport '../require-hook'\nimport '../node-environment'\n\nimport {\n  buildAppStaticPaths,\n  buildStaticPaths,\n  reduceAppConfig,\n} from '../../build/utils'\nimport { collectSegments } from '../../build/segment-config/app/app-segments'\nimport type { PartialStaticPathsResult } from '../../build/utils'\nimport { loadComponents } from '../load-components'\nimport { setHttpClientAndAgentOptions } from '../setup-http-agent-env'\nimport type { IncrementalCache } from '../lib/incremental-cache'\nimport { isAppPageRouteModule } from '../route-modules/checks'\nimport {\n  checkIsRoutePPREnabled,\n  type ExperimentalPPRConfig,\n} from '../lib/experimental/ppr'\nimport { InvariantError } from '../../shared/lib/invariant-error'\n\ntype RuntimeConfig = {\n  pprConfig: ExperimentalPPRConfig | undefined\n  configFileName: string\n  publicRuntimeConfig: { [key: string]: any }\n  serverRuntimeConfig: { [key: string]: any }\n  dynamicIO: boolean\n}\n\n// we call getStaticPaths in a separate process to ensure\n// side-effects aren't relied on in dev that will break\n// during a production build\nexport async function loadStaticPaths({\n  dir,\n  distDir,\n  pathname,\n  config,\n  httpAgentOptions,\n  locales,\n  defaultLocale,\n  isAppPath,\n  page,\n  isrFlushToDisk,\n  fetchCacheKeyPrefix,\n  maxMemoryCacheSize,\n  requestHeaders,\n  cacheHandler,\n  cacheLifeProfiles,\n  nextConfigOutput,\n  buildId,\n}: {\n  dir: string\n  distDir: string\n  pathname: string\n  config: RuntimeConfig\n  httpAgentOptions: NextConfigComplete['httpAgentOptions']\n  locales?: string[]\n  defaultLocale?: string\n  isAppPath: boolean\n  page: string\n  isrFlushToDisk?: boolean\n  fetchCacheKeyPrefix?: string\n  maxMemoryCacheSize?: number\n  requestHeaders: IncrementalCache['requestHeaders']\n  cacheHandler?: string\n  cacheLifeProfiles?: {\n    [profile: string]: import('../../server/use-cache/cache-life').CacheLife\n  }\n  nextConfigOutput: 'standalone' | 'export' | undefined\n  buildId: string\n}): Promise<PartialStaticPathsResult> {\n  // update work memory runtime-config\n  require('../../shared/lib/runtime-config.external').setConfig(config)\n  setHttpClientAndAgentOptions({\n    httpAgentOptions,\n  })\n\n  const components = await loadComponents({\n    distDir,\n    // In `pages/`, the page is the same as the pathname.\n    page: page || pathname,\n    isAppPath,\n  })\n\n  if (isAppPath) {\n    const segments = await collectSegments(components)\n\n    const isRoutePPREnabled =\n      isAppPageRouteModule(components.routeModule) &&\n      checkIsRoutePPREnabled(config.pprConfig, reduceAppConfig(segments))\n\n    return buildAppStaticPaths({\n      dir,\n      page: pathname,\n      dynamicIO: config.dynamicIO,\n      segments,\n      configFileName: config.configFileName,\n      distDir,\n      requestHeaders,\n      cacheHandler,\n      cacheLifeProfiles,\n      isrFlushToDisk,\n      fetchCacheKeyPrefix,\n      maxMemoryCacheSize,\n      ComponentMod: components.ComponentMod,\n      nextConfigOutput,\n      isRoutePPREnabled,\n      buildId,\n    })\n  } else if (!components.getStaticPaths) {\n    // We shouldn't get to this point since the worker should only be called for\n    // SSG pages with getStaticPaths.\n    throw new InvariantError(\n      `Failed to load page with getStaticPaths for ${pathname}`\n    )\n  }\n\n  return buildStaticPaths({\n    page: pathname,\n    getStaticPaths: components.getStaticPaths,\n    configFileName: config.configFileName,\n    locales,\n    defaultLocale,\n  })\n}\n"],"names":["loadStaticPaths","dir","distDir","pathname","config","httpAgentOptions","locales","defaultLocale","isAppPath","page","isrFlushToDisk","fetchCacheKeyPrefix","maxMemoryCacheSize","requestHeaders","cacheHandler","cacheLifeProfiles","nextConfigOutput","buildId","require","setConfig","setHttpClientAndAgentOptions","components","loadComponents","segments","collectSegments","isRoutePPREnabled","isAppPageRouteModule","routeModule","checkIsRoutePPREnabled","pprConfig","reduceAppConfig","buildAppStaticPaths","dynamicIO","configFileName","ComponentMod","getStaticPaths","InvariantError","buildStaticPaths"],"mappings":";;;;+BAiCsBA;;;eAAAA;;;QA/Bf;QACA;uBAMA;6BACyB;gCAED;mCACc;wBAER;qBAI9B;gCACwB;AAaxB,eAAeA,gBAAgB,EACpCC,GAAG,EACHC,OAAO,EACPC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EAChBC,OAAO,EACPC,aAAa,EACbC,SAAS,EACTC,IAAI,EACJC,cAAc,EACdC,mBAAmB,EACnBC,kBAAkB,EAClBC,cAAc,EACdC,YAAY,EACZC,iBAAiB,EACjBC,gBAAgB,EAChBC,OAAO,EAqBR;IACC,oCAAoC;IACpCC,QAAQ,4CAA4CC,SAAS,CAACf;IAC9DgB,IAAAA,+CAA4B,EAAC;QAC3Bf;IACF;IAEA,MAAMgB,aAAa,MAAMC,IAAAA,8BAAc,EAAC;QACtCpB;QACA,qDAAqD;QACrDO,MAAMA,QAAQN;QACdK;IACF;IAEA,IAAIA,WAAW;QACb,MAAMe,WAAW,MAAMC,IAAAA,4BAAe,EAACH;QAEvC,MAAMI,oBACJC,IAAAA,4BAAoB,EAACL,WAAWM,WAAW,KAC3CC,IAAAA,2BAAsB,EAACxB,OAAOyB,SAAS,EAAEC,IAAAA,sBAAe,EAACP;QAE3D,OAAOQ,IAAAA,0BAAmB,EAAC;YACzB9B;YACAQ,MAAMN;YACN6B,WAAW5B,OAAO4B,SAAS;YAC3BT;YACAU,gBAAgB7B,OAAO6B,cAAc;YACrC/B;YACAW;YACAC;YACAC;YACAL;YACAC;YACAC;YACAsB,cAAcb,WAAWa,YAAY;YACrClB;YACAS;YACAR;QACF;IACF,OAAO,IAAI,CAACI,WAAWc,cAAc,EAAE;QACrC,4EAA4E;QAC5E,iCAAiC;QACjC,MAAM,IAAIC,8BAAc,CACtB,CAAC,4CAA4C,EAAEjC,SAAS,CAAC;IAE7D;IAEA,OAAOkC,IAAAA,uBAAgB,EAAC;QACtB5B,MAAMN;QACNgC,gBAAgBd,WAAWc,cAAc;QACzCF,gBAAgB7B,OAAO6B,cAAc;QACrC3B;QACAC;IACF;AACF"}