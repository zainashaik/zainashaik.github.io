{"version":3,"sources":["../../../../src/server/web/spec-extension/revalidate.ts"],"sourcesContent":["import {\n  abortAndThrowOnSynchronousRequestDataAccess,\n  postponeWithTracking,\n} from '../../app-render/dynamic-rendering'\nimport { isDynamicRoute } from '../../../shared/lib/router/utils'\nimport {\n  NEXT_CACHE_IMPLICIT_TAG_ID,\n  NEXT_CACHE_SOFT_TAG_MAX_LENGTH,\n} from '../../../lib/constants'\nimport { workAsyncStorage } from '../../app-render/work-async-storage.external'\nimport { workUnitAsyncStorage } from '../../app-render/work-unit-async-storage.external'\nimport { DynamicServerError } from '../../../client/components/hooks-server-context'\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific cache tag.\n *\n * Read more: [Next.js Docs: `revalidateTag`](https://nextjs.org/docs/app/api-reference/functions/revalidateTag)\n */\nexport function revalidateTag(tag: string) {\n  return revalidate(tag, `revalidateTag ${tag}`)\n}\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific path.\n *\n * Read more: [Next.js Docs: `revalidatePath`](https://nextjs.org/docs/app/api-reference/functions/revalidatePath)\n */\nexport function revalidatePath(originalPath: string, type?: 'layout' | 'page') {\n  if (originalPath.length > NEXT_CACHE_SOFT_TAG_MAX_LENGTH) {\n    console.warn(\n      `Warning: revalidatePath received \"${originalPath}\" which exceeded max length of ${NEXT_CACHE_SOFT_TAG_MAX_LENGTH}. See more info here https://nextjs.org/docs/app/api-reference/functions/revalidatePath`\n    )\n    return\n  }\n\n  let normalizedPath = `${NEXT_CACHE_IMPLICIT_TAG_ID}${originalPath}`\n\n  if (type) {\n    normalizedPath += `${normalizedPath.endsWith('/') ? '' : '/'}${type}`\n  } else if (isDynamicRoute(originalPath)) {\n    console.warn(\n      `Warning: a dynamic page path \"${originalPath}\" was passed to \"revalidatePath\", but the \"type\" parameter is missing. This has no effect by default, see more info here https://nextjs.org/docs/app/api-reference/functions/revalidatePath`\n    )\n  }\n  return revalidate(normalizedPath, `revalidatePath ${originalPath}`)\n}\n\nfunction revalidate(tag: string, expression: string) {\n  const store = workAsyncStorage.getStore()\n  if (!store || !store.incrementalCache) {\n    throw new Error(\n      `Invariant: static generation store missing in ${expression}`\n    )\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (workUnitStore) {\n    if (workUnitStore.type === 'cache') {\n      throw new Error(\n        `Route ${store.route} used \"${expression}\" inside a \"use cache\" which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n      )\n    } else if (workUnitStore.type === 'unstable-cache') {\n      throw new Error(\n        `Route ${store.route} used \"${expression}\" inside a function cached with \"unstable_cache(...)\" which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n      )\n    }\n    if (workUnitStore.phase === 'render') {\n      throw new Error(\n        `Route ${store.route} used \"${expression}\" during render which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n      )\n    }\n\n    if (workUnitStore.type === 'prerender') {\n      // dynamicIO Prerender\n      const error = new Error(\n        `Route ${store.route} used ${expression} without first calling \\`await connection()\\`.`\n      )\n      abortAndThrowOnSynchronousRequestDataAccess(\n        store.route,\n        expression,\n        error,\n        workUnitStore\n      )\n    } else if (workUnitStore.type === 'prerender-ppr') {\n      // PPR Prerender\n      postponeWithTracking(\n        store.route,\n        expression,\n        workUnitStore.dynamicTracking\n      )\n    } else if (workUnitStore.type === 'prerender-legacy') {\n      // legacy Prerender\n      workUnitStore.revalidate = 0\n\n      const err = new DynamicServerError(\n        `Route ${store.route} couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n      )\n      store.dynamicUsageDescription = expression\n      store.dynamicUsageStack = err.stack\n\n      throw err\n    } else if (\n      process.env.NODE_ENV === 'development' &&\n      workUnitStore &&\n      workUnitStore.type === 'request'\n    ) {\n      workUnitStore.usedDynamic = true\n    }\n  }\n\n  if (!store.revalidatedTags) {\n    store.revalidatedTags = []\n  }\n  if (!store.revalidatedTags.includes(tag)) {\n    store.revalidatedTags.push(tag)\n  }\n\n  // TODO: only revalidate if the path matches\n  store.pathWasRevalidated = true\n}\n"],"names":["revalidatePath","revalidateTag","tag","revalidate","originalPath","type","length","NEXT_CACHE_SOFT_TAG_MAX_LENGTH","console","warn","normalizedPath","NEXT_CACHE_IMPLICIT_TAG_ID","endsWith","isDynamicRoute","expression","store","workAsyncStorage","getStore","incrementalCache","Error","workUnitStore","workUnitAsyncStorage","route","phase","error","abortAndThrowOnSynchronousRequestDataAccess","postponeWithTracking","dynamicTracking","err","DynamicServerError","dynamicUsageDescription","dynamicUsageStack","stack","process","env","NODE_ENV","usedDynamic","revalidatedTags","includes","push","pathWasRevalidated"],"mappings":"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"}