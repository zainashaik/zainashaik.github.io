{"version":3,"sources":["../../../src/server/lib/render-server.ts"],"sourcesContent":["import type { NextServer, RequestHandler } from '../next'\nimport type { DevBundlerService } from './dev-bundler-service'\nimport type { PropagateToWorkersField } from './router-utils/types'\n\nimport next from '../next'\nimport type { Span } from '../../trace'\n\nlet initializations: Record<\n  string,\n  | Promise<{\n      requestHandler: ReturnType<\n        InstanceType<typeof NextServer>['getRequestHandler']\n      >\n      upgradeHandler: ReturnType<\n        InstanceType<typeof NextServer>['getUpgradeHandler']\n      >\n      app: ReturnType<typeof next>\n    }>\n  | undefined\n> = {}\n\nlet sandboxContext: undefined | typeof import('../web/sandbox/context')\n\nif (process.env.NODE_ENV !== 'production') {\n  sandboxContext = require('../web/sandbox/context')\n}\n\nexport function clearAllModuleContexts() {\n  return sandboxContext?.clearAllModuleContexts()\n}\n\nexport function clearModuleContext(target: string) {\n  return sandboxContext?.clearModuleContext(target)\n}\n\nexport async function getServerField(\n  dir: string,\n  field: PropagateToWorkersField\n) {\n  const initialization = await initializations[dir]\n  if (!initialization) {\n    throw new Error('Invariant cant propagate server field, no app initialized')\n  }\n  const { app } = initialization\n  let appField = (app as any).server\n  return appField[field]\n}\n\nexport async function propagateServerField(\n  dir: string,\n  field: PropagateToWorkersField,\n  value: any\n) {\n  const initialization = await initializations[dir]\n  if (!initialization) {\n    throw new Error('Invariant cant propagate server field, no app initialized')\n  }\n  const { app } = initialization\n  let appField = (app as any).server\n\n  if (appField) {\n    if (typeof appField[field] === 'function') {\n      await appField[field].apply(\n        (app as any).server,\n        Array.isArray(value) ? value : []\n      )\n    } else {\n      appField[field] = value\n    }\n  }\n}\n\nasync function initializeImpl(opts: {\n  dir: string\n  port: number\n  dev: boolean\n  minimalMode?: boolean\n  hostname?: string\n  keepAliveTimeout?: number\n  serverFields?: any\n  server?: any\n  experimentalTestProxy: boolean\n  experimentalHttpsServer: boolean\n  _ipcPort?: string\n  _ipcKey?: string\n  bundlerService: DevBundlerService | undefined\n  startServerSpan: Span | undefined\n  quiet?: boolean\n}) {\n  const type = process.env.__NEXT_PRIVATE_RENDER_WORKER\n  if (type) {\n    process.title = 'next-render-worker-' + type\n  }\n\n  let requestHandler: RequestHandler\n  let upgradeHandler: any\n\n  const app = next({\n    ...opts,\n    hostname: opts.hostname || 'localhost',\n    customServer: false,\n    httpServer: opts.server,\n    port: opts.port,\n  })\n  requestHandler = app.getRequestHandler()\n  upgradeHandler = app.getUpgradeHandler()\n\n  await app.prepare(opts.serverFields)\n\n  return {\n    requestHandler,\n    upgradeHandler,\n    app,\n  }\n}\n\nexport async function initialize(\n  opts: Parameters<typeof initializeImpl>[0]\n): Promise<{\n  requestHandler: ReturnType<\n    InstanceType<typeof NextServer>['getRequestHandler']\n  >\n  upgradeHandler: ReturnType<\n    InstanceType<typeof NextServer>['getUpgradeHandler']\n  >\n  app: NextServer\n}> {\n  // if we already setup the server return as we only need to do\n  // this on first worker boot\n  if (initializations[opts.dir]) {\n    return initializations[opts.dir]!\n  }\n  return (initializations[opts.dir] = initializeImpl(opts))\n}\n"],"names":["clearAllModuleContexts","clearModuleContext","getServerField","initialize","propagateServerField","initializations","sandboxContext","process","env","NODE_ENV","require","target","dir","field","initialization","Error","app","appField","server","value","apply","Array","isArray","initializeImpl","opts","type","__NEXT_PRIVATE_RENDER_WORKER","title","requestHandler","upgradeHandler","next","hostname","customServer","httpServer","port","getRequestHandler","getUpgradeHandler","prepare","serverFields"],"mappings":";;;;;;;;;;;;;;;;;;IA2BgBA,sBAAsB;eAAtBA;;IAIAC,kBAAkB;eAAlBA;;IAIMC,cAAc;eAAdA;;IAiFAC,UAAU;eAAVA;;IApEAC,oBAAoB;eAApBA;;;6DA5CL;;;;;;AAGjB,IAAIC,kBAYA,CAAC;AAEL,IAAIC;AAEJ,IAAIC,QAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;IACzCH,iBAAiBI,QAAQ;AAC3B;AAEO,SAASV;IACd,OAAOM,kCAAAA,eAAgBN,sBAAsB;AAC/C;AAEO,SAASC,mBAAmBU,MAAc;IAC/C,OAAOL,kCAAAA,eAAgBL,kBAAkB,CAACU;AAC5C;AAEO,eAAeT,eACpBU,GAAW,EACXC,KAA8B;IAE9B,MAAMC,iBAAiB,MAAMT,eAAe,CAACO,IAAI;IACjD,IAAI,CAACE,gBAAgB;QACnB,MAAM,IAAIC,MAAM;IAClB;IACA,MAAM,EAAEC,GAAG,EAAE,GAAGF;IAChB,IAAIG,WAAW,AAACD,IAAYE,MAAM;IAClC,OAAOD,QAAQ,CAACJ,MAAM;AACxB;AAEO,eAAeT,qBACpBQ,GAAW,EACXC,KAA8B,EAC9BM,KAAU;IAEV,MAAML,iBAAiB,MAAMT,eAAe,CAACO,IAAI;IACjD,IAAI,CAACE,gBAAgB;QACnB,MAAM,IAAIC,MAAM;IAClB;IACA,MAAM,EAAEC,GAAG,EAAE,GAAGF;IAChB,IAAIG,WAAW,AAACD,IAAYE,MAAM;IAElC,IAAID,UAAU;QACZ,IAAI,OAAOA,QAAQ,CAACJ,MAAM,KAAK,YAAY;YACzC,MAAMI,QAAQ,CAACJ,MAAM,CAACO,KAAK,CACzB,AAACJ,IAAYE,MAAM,EACnBG,MAAMC,OAAO,CAACH,SAASA,QAAQ,EAAE;QAErC,OAAO;YACLF,QAAQ,CAACJ,MAAM,GAAGM;QACpB;IACF;AACF;AAEA,eAAeI,eAAeC,IAgB7B;IACC,MAAMC,OAAOlB,QAAQC,GAAG,CAACkB,4BAA4B;IACrD,IAAID,MAAM;QACRlB,QAAQoB,KAAK,GAAG,wBAAwBF;IAC1C;IAEA,IAAIG;IACJ,IAAIC;IAEJ,MAAMb,MAAMc,IAAAA,aAAI,EAAC;QACf,GAAGN,IAAI;QACPO,UAAUP,KAAKO,QAAQ,IAAI;QAC3BC,cAAc;QACdC,YAAYT,KAAKN,MAAM;QACvBgB,MAAMV,KAAKU,IAAI;IACjB;IACAN,iBAAiBZ,IAAImB,iBAAiB;IACtCN,iBAAiBb,IAAIoB,iBAAiB;IAEtC,MAAMpB,IAAIqB,OAAO,CAACb,KAAKc,YAAY;IAEnC,OAAO;QACLV;QACAC;QACAb;IACF;AACF;AAEO,eAAeb,WACpBqB,IAA0C;IAU1C,8DAA8D;IAC9D,4BAA4B;IAC5B,IAAInB,eAAe,CAACmB,KAAKZ,GAAG,CAAC,EAAE;QAC7B,OAAOP,eAAe,CAACmB,KAAKZ,GAAG,CAAC;IAClC;IACA,OAAQP,eAAe,CAACmB,KAAKZ,GAAG,CAAC,GAAGW,eAAeC;AACrD"}