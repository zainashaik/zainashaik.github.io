{"version":3,"sources":["../../../src/server/app-render/app-render.tsx"],"sourcesContent":["import type {\n  ActionResult,\n  DynamicParamTypesShort,\n  FlightRouterState,\n  FlightSegmentPath,\n  RenderOpts,\n  Segment,\n  CacheNodeSeedData,\n  PreloadCallbacks,\n  RSCPayload,\n  FlightData,\n  InitialRSCPayload,\n} from './types'\nimport {\n  workAsyncStorage,\n  type WorkStore,\n} from '../app-render/work-async-storage.external'\nimport type { RequestStore } from '../app-render/work-unit-async-storage.external'\nimport type { NextParsedUrlQuery } from '../request-meta'\nimport type { LoaderTree } from '../lib/app-dir-module'\nimport type { AppPageModule } from '../route-modules/app-page/module'\nimport type {\n  ClientReferenceManifest,\n  ManifestNode,\n} from '../../build/webpack/plugins/flight-manifest-plugin'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\nimport type { BaseNextRequest, BaseNextResponse } from '../base-http'\nimport type { IncomingHttpHeaders } from 'http'\n\nimport React, { type ErrorInfo, type JSX } from 'react'\n\nimport RenderResult, {\n  type AppPageRenderResultMetadata,\n  type RenderResultOptions,\n} from '../render-result'\nimport {\n  chainStreams,\n  renderToInitialFizzStream,\n  createDocumentClosingStream,\n  continueFizzStream,\n  continueDynamicPrerender,\n  continueStaticPrerender,\n  continueDynamicHTMLResume,\n  streamToBuffer,\n  streamToString,\n} from '../stream-utils/node-web-streams-helper'\nimport { stripInternalQueries } from '../internal-utils'\nimport {\n  NEXT_HMR_REFRESH_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_ROUTER_STALE_TIME_HEADER,\n  NEXT_URL,\n  RSC_HEADER,\n} from '../../client/components/app-router-headers'\nimport {\n  createTrackedMetadataContext,\n  createMetadataContext,\n} from '../../lib/metadata/metadata-context'\nimport { createRequestStoreForRender } from '../async-storage/request-store'\nimport { createWorkStore } from '../async-storage/work-store'\nimport { isNotFoundError } from '../../client/components/not-found'\nimport {\n  getURLFromRedirectError,\n  isRedirectError,\n  getRedirectStatusCodeFromError,\n} from '../../client/components/redirect'\nimport { getImplicitTags } from '../lib/implicit-tags'\nimport { AppRenderSpan, NextNodeServerSpan } from '../lib/trace/constants'\nimport { getTracer } from '../lib/trace/tracer'\nimport { FlightRenderResult } from './flight-render-result'\nimport {\n  createFlightReactServerErrorHandler,\n  createHTMLReactServerErrorHandler,\n  createHTMLErrorHandler,\n  type DigestedError,\n  isUserLandError,\n} from './create-error-handler'\nimport {\n  getShortDynamicParamType,\n  dynamicParamTypes,\n} from './get-short-dynamic-param-type'\nimport { getSegmentParam } from './get-segment-param'\nimport { getScriptNonceFromHeader } from './get-script-nonce-from-header'\nimport { parseAndValidateFlightRouterState } from './parse-and-validate-flight-router-state'\nimport { createFlightRouterStateFromLoaderTree } from './create-flight-router-state-from-loader-tree'\nimport { handleAction } from './action-handler'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { warn, error } from '../../build/output/log'\nimport { appendMutableCookies } from '../web/spec-extension/adapters/request-cookies'\nimport { createServerInsertedHTML } from './server-inserted-html'\nimport { getRequiredScripts } from './required-scripts'\nimport { addPathPrefix } from '../../shared/lib/router/utils/add-path-prefix'\nimport { makeGetServerInsertedHTML } from './make-get-server-inserted-html'\nimport { walkTreeWithFlightRouterState } from './walk-tree-with-flight-router-state'\nimport { createComponentTree } from './create-component-tree'\nimport { getAssetQueryString } from './get-asset-query-string'\nimport { setReferenceManifestsSingleton } from './encryption-utils'\nimport {\n  DynamicState,\n  type PostponedState,\n  parsePostponedState,\n} from './postponed-state'\nimport {\n  getDynamicDataPostponedState,\n  getDynamicHTMLPostponedState,\n  getPostponedFromState,\n} from './postponed-state'\nimport { isDynamicServerError } from '../../client/components/hooks-server-context'\nimport {\n  useFlightStream,\n  createInlinedDataReadableStream,\n} from './use-flight-response'\nimport {\n  StaticGenBailoutError,\n  isStaticGenBailoutError,\n} from '../../client/components/static-generation-bailout'\nimport { getStackWithoutErrorMessage } from '../../lib/format-server-error'\nimport {\n  accessedDynamicData,\n  createPostponedAbortSignal,\n  formatDynamicAPIAccesses,\n  isPrerenderInterruptedError,\n  createDynamicTrackingState,\n  createDynamicValidationState,\n  getFirstDynamicReason,\n  trackAllowedDynamicAccess,\n  throwIfDisallowedDynamic,\n  consumeDynamicAccess,\n  type DynamicAccess,\n} from './dynamic-rendering'\nimport {\n  getClientComponentLoaderMetrics,\n  wrapClientComponentLoader,\n} from '../client-component-renderer-logger'\nimport { createServerModuleMap } from './action-utils'\nimport { isNodeNextRequest } from '../base-http/helpers'\nimport { parseParameter } from '../../shared/lib/router/utils/route-regex'\nimport { parseRelativeUrl } from '../../shared/lib/router/utils/parse-relative-url'\nimport AppRouter from '../../client/components/app-router'\nimport type { ServerComponentsHmrCache } from '../response-cache'\nimport type { RequestErrorContext } from '../instrumentation/types'\nimport { getServerActionRequestMetadata } from '../lib/server-action-request-meta'\nimport { createInitialRouterState } from '../../client/components/router-reducer/create-initial-router-state'\nimport { createMutableActionQueue } from '../../shared/lib/router/action-queue'\nimport { getRevalidateReason } from '../instrumentation/utils'\nimport { PAGE_SEGMENT_KEY } from '../../shared/lib/segment'\nimport type { FallbackRouteParams } from '../request/fallback-params'\nimport { DynamicServerError } from '../../client/components/hooks-server-context'\nimport {\n  type ReactServerPrerenderResult,\n  ReactServerResult,\n  createReactServerPrerenderResult,\n  createReactServerPrerenderResultFromRender,\n  prerenderAndAbortInSequentialTasks,\n  prerenderServerWithPhases,\n  prerenderClientWithPhases,\n} from './app-render-prerender-utils'\nimport { printDebugThrownValueForProspectiveRender } from './prospective-render-utils'\nimport { scheduleInSequentialTasks } from './app-render-render-utils'\nimport { waitAtLeastOneReactRenderTask } from '../../lib/scheduler'\nimport {\n  workUnitAsyncStorage,\n  type PrerenderStore,\n} from './work-unit-async-storage.external'\nimport { CacheSignal } from './cache-signal'\nimport { getTracedMetadata } from '../lib/trace/utils'\nimport { InvariantError } from '../../shared/lib/invariant-error'\n\nimport './clean-async-snapshot.external'\nimport { INFINITE_CACHE } from '../../lib/constants'\nimport { createComponentStylesAndScripts } from './create-component-styles-and-scripts'\nimport { parseLoaderTree } from './parse-loader-tree'\nimport { createPrerenderResumeDataCache } from '../resume-data-cache/resume-data-cache'\n\nexport type GetDynamicParamFromSegment = (\n  // [slug] / [[slug]] / [...slug]\n  segment: string\n) => {\n  param: string\n  value: string | string[] | null\n  treeSegment: Segment\n  type: DynamicParamTypesShort\n} | null\n\nexport type GenerateFlight = typeof generateDynamicFlightRenderResult\n\nexport type AppRenderContext = {\n  workStore: WorkStore\n  url: ReturnType<typeof parseRelativeUrl>\n  componentMod: AppPageModule\n  renderOpts: RenderOpts\n  parsedRequestHeaders: ParsedRequestHeaders\n  getDynamicParamFromSegment: GetDynamicParamFromSegment\n  query: NextParsedUrlQuery\n  isPrefetch: boolean\n  isAction: boolean\n  requestTimestamp: number\n  appUsingSizeAdjustment: boolean\n  flightRouterState?: FlightRouterState\n  requestId: string\n  pagePath: string\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n  assetPrefix: string\n  isNotFoundPath: boolean\n  nonce: string | undefined\n  res: BaseNextResponse\n}\n\ninterface ParseRequestHeadersOptions {\n  readonly isDevWarmup: undefined | boolean\n  readonly isRoutePPREnabled: boolean\n}\n\nconst flightDataPathHeadKey = 'h'\n\ninterface ParsedRequestHeaders {\n  /**\n   * Router state provided from the client-side router. Used to handle rendering\n   * from the common layout down. This value will be undefined if the request is\n   * not a client-side navigation request, or if the request is a prefetch\n   * request.\n   */\n  readonly flightRouterState: FlightRouterState | undefined\n  readonly isPrefetchRequest: boolean\n  readonly isDevWarmupRequest: boolean\n  readonly isHmrRefresh: boolean\n  readonly isRSCRequest: boolean\n  readonly nonce: string | undefined\n}\n\nfunction parseRequestHeaders(\n  headers: IncomingHttpHeaders,\n  options: ParseRequestHeadersOptions\n): ParsedRequestHeaders {\n  const isDevWarmupRequest = options.isDevWarmup === true\n\n  // dev warmup requests are treated as prefetch RSC requests\n  const isPrefetchRequest =\n    isDevWarmupRequest ||\n    headers[NEXT_ROUTER_PREFETCH_HEADER.toLowerCase()] !== undefined\n\n  const isHmrRefresh =\n    headers[NEXT_HMR_REFRESH_HEADER.toLowerCase()] !== undefined\n\n  // dev warmup requests are treated as prefetch RSC requests\n  const isRSCRequest =\n    isDevWarmupRequest || headers[RSC_HEADER.toLowerCase()] !== undefined\n\n  const shouldProvideFlightRouterState =\n    isRSCRequest && (!isPrefetchRequest || !options.isRoutePPREnabled)\n\n  const flightRouterState = shouldProvideFlightRouterState\n    ? parseAndValidateFlightRouterState(\n        headers[NEXT_ROUTER_STATE_TREE_HEADER.toLowerCase()]\n      )\n    : undefined\n\n  const csp =\n    headers['content-security-policy'] ||\n    headers['content-security-policy-report-only']\n\n  const nonce =\n    typeof csp === 'string' ? getScriptNonceFromHeader(csp) : undefined\n\n  return {\n    flightRouterState,\n    isPrefetchRequest,\n    isHmrRefresh,\n    isRSCRequest,\n    isDevWarmupRequest,\n    nonce,\n  }\n}\n\nfunction createNotFoundLoaderTree(loaderTree: LoaderTree): LoaderTree {\n  // Align the segment with parallel-route-default in next-app-loader\n  const components = loaderTree[2]\n  return [\n    '',\n    {\n      children: [\n        PAGE_SEGMENT_KEY,\n        {},\n        {\n          page: components['not-found'],\n        },\n      ],\n    },\n    components,\n  ]\n}\n\nexport type CreateSegmentPath = (child: FlightSegmentPath) => FlightSegmentPath\n\n/**\n * Returns a function that parses the dynamic segment and return the associated value.\n */\nfunction makeGetDynamicParamFromSegment(\n  params: { [key: string]: any },\n  pagePath: string,\n  fallbackRouteParams: FallbackRouteParams | null\n): GetDynamicParamFromSegment {\n  return function getDynamicParamFromSegment(\n    // [slug] / [[slug]] / [...slug]\n    segment: string\n  ) {\n    const segmentParam = getSegmentParam(segment)\n    if (!segmentParam) {\n      return null\n    }\n\n    const key = segmentParam.param\n\n    let value = params[key]\n\n    if (fallbackRouteParams && fallbackRouteParams.has(segmentParam.param)) {\n      value = fallbackRouteParams.get(segmentParam.param)\n    } else if (Array.isArray(value)) {\n      value = value.map((i) => encodeURIComponent(i))\n    } else if (typeof value === 'string') {\n      value = encodeURIComponent(value)\n    }\n\n    if (!value) {\n      const isCatchall = segmentParam.type === 'catchall'\n      const isOptionalCatchall = segmentParam.type === 'optional-catchall'\n\n      if (isCatchall || isOptionalCatchall) {\n        const dynamicParamType = dynamicParamTypes[segmentParam.type]\n        // handle the case where an optional catchall does not have a value,\n        // e.g. `/dashboard/[[...slug]]` when requesting `/dashboard`\n        if (isOptionalCatchall) {\n          return {\n            param: key,\n            value: null,\n            type: dynamicParamType,\n            treeSegment: [key, '', dynamicParamType],\n          }\n        }\n\n        // handle the case where a catchall or optional catchall does not have a value,\n        // e.g. `/foo/bar/hello` and `@slot/[...catchall]` or `@slot/[[...catchall]]` is matched\n        value = pagePath\n          .split('/')\n          // remove the first empty string\n          .slice(1)\n          // replace any dynamic params with the actual values\n          .flatMap((pathSegment) => {\n            const param = parseParameter(pathSegment)\n            // if the segment matches a param, return the param value\n            // otherwise, it's a static segment, so just return that\n            return params[param.key] ?? param.key\n          })\n\n        return {\n          param: key,\n          value,\n          type: dynamicParamType,\n          // This value always has to be a string.\n          treeSegment: [key, value.join('/'), dynamicParamType],\n        }\n      }\n    }\n\n    const type = getShortDynamicParamType(segmentParam.type)\n\n    return {\n      param: key,\n      // The value that is passed to user code.\n      value: value,\n      // The value that is rendered in the router tree.\n      treeSegment: [key, Array.isArray(value) ? value.join('/') : value, type],\n      type: type,\n    }\n  }\n}\n\nfunction NonIndex({ ctx }: { ctx: AppRenderContext }) {\n  const is404Page = ctx.pagePath === '/404'\n  const isInvalidStatusCode =\n    typeof ctx.res.statusCode === 'number' && ctx.res.statusCode > 400\n\n  if (is404Page || isInvalidStatusCode) {\n    return <meta name=\"robots\" content=\"noindex\" />\n  }\n  return null\n}\n\n/**\n * This is used by server actions & client-side navigations to generate RSC data from a client-side request.\n * This function is only called on \"dynamic\" requests (ie, there wasn't already a static response).\n * It uses request headers (namely `Next-Router-State-Tree`) to determine where to start rendering.\n */\nasync function generateDynamicRSCPayload(\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n  }\n): Promise<RSCPayload> {\n  // Flight data that is going to be passed to the browser.\n  // Currently a single item array but in the future multiple patches might be combined in a single request.\n\n  // We initialize `flightData` to an empty string because the client router knows how to tolerate\n  // it (treating it as an MPA navigation). The only time this function wouldn't generate flight data\n  // is for server actions, if the server action handler instructs this function to skip it. When the server\n  // action reducer sees a falsy value, it'll simply resolve the action with no data.\n  let flightData: FlightData = ''\n\n  const {\n    componentMod: {\n      tree: loaderTree,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    query,\n    requestId,\n    flightRouterState,\n    workStore,\n    url,\n  } = ctx\n\n  if (!options?.skipFlight) {\n    const preloadCallbacks: PreloadCallbacks = []\n\n    const searchParams = createServerSearchParamsForMetadata(query, workStore)\n    const [MetadataTree, getMetadataReady] = createMetadataComponents({\n      tree: loaderTree,\n      searchParams,\n      metadataContext: createTrackedMetadataContext(\n        url.pathname,\n        ctx.renderOpts,\n        workStore\n      ),\n      getDynamicParamFromSegment,\n      appUsingSizeAdjustment,\n      createServerParamsForMetadata,\n      workStore,\n      MetadataBoundary,\n      ViewportBoundary,\n    })\n    flightData = (\n      await walkTreeWithFlightRouterState({\n        ctx,\n        createSegmentPath: (child) => child,\n        loaderTreeToFilter: loaderTree,\n        parentParams: {},\n        flightRouterState,\n        isFirst: true,\n        // For flight, render metadata inside leaf page\n        rscPayloadHead: (\n          <React.Fragment key={flightDataPathHeadKey}>\n            <NonIndex ctx={ctx} />\n            {/* Adding requestId as react key to make metadata remount for each render */}\n            <MetadataTree key={requestId} />\n          </React.Fragment>\n        ),\n        injectedCSS: new Set(),\n        injectedJS: new Set(),\n        injectedFontPreloadTags: new Set(),\n        rootLayoutIncluded: false,\n        getMetadataReady,\n        preloadCallbacks,\n      })\n    ).map((path) => path.slice(1)) // remove the '' (root) segment\n  }\n\n  // If we have an action result, then this is a server action response.\n  // We can rely on this because `ActionResult` will always be a promise, even if\n  // the result is falsey.\n  if (options?.actionResult) {\n    return {\n      a: options.actionResult,\n      f: flightData,\n      b: ctx.renderOpts.buildId,\n    }\n  }\n\n  // Otherwise, it's a regular RSC response.\n  return {\n    b: ctx.renderOpts.buildId,\n    f: flightData,\n    S: workStore.isStaticGeneration,\n  }\n}\n\nfunction createErrorContext(\n  ctx: AppRenderContext,\n  renderSource: RequestErrorContext['renderSource']\n): RequestErrorContext {\n  return {\n    routerKind: 'App Router',\n    routePath: ctx.pagePath,\n    routeType: ctx.isAction ? 'action' : 'render',\n    renderSource,\n    revalidateReason: getRevalidateReason(ctx.workStore),\n  }\n}\n/**\n * Produces a RenderResult containing the Flight data for the given request. See\n * `generateDynamicRSCPayload` for information on the contents of the render result.\n */\nasync function generateDynamicFlightRenderResult(\n  req: BaseNextRequest,\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n    componentTree?: CacheNodeSeedData\n    preloadCallbacks?: PreloadCallbacks\n    temporaryReferences?: WeakMap<any, string>\n  }\n): Promise<RenderResult> {\n  const renderOpts = ctx.renderOpts\n\n  function onFlightDataRenderError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components-payload')\n    )\n  }\n  const onError = createFlightReactServerErrorHandler(\n    !!renderOpts.dev,\n    onFlightDataRenderError\n  )\n\n  const RSCPayload: RSCPayload & {\n    /** Only available during dynamicIO development builds. Used for logging errors. */\n    _validation?: Promise<React.ReactNode>\n  } = await generateDynamicRSCPayload(ctx, options)\n\n  if (\n    // We only want this behavior when running `next dev`\n    renderOpts.dev &&\n    // We only want this behavior when we have React's dev builds available\n    process.env.NODE_ENV === 'development' &&\n    // We only have a Prerender environment for projects opted into dynamicIO\n    renderOpts.experimental.dynamicIO\n  ) {\n    const [resolveValidation, validationOutlet] = createValidationOutlet()\n    RSCPayload._validation = validationOutlet\n\n    spawnDynamicValidationInDev(\n      resolveValidation,\n      ctx.componentMod.tree,\n      ctx,\n      false,\n      ctx.clientReferenceManifest,\n      ctx.workStore.route\n    )\n  }\n\n  // For app dir, use the bundled version of Flight server renderer (renderToReadableStream)\n  // which contains the subset React.\n  const flightReadableStream = ctx.componentMod.renderToReadableStream(\n    RSCPayload,\n    ctx.clientReferenceManifest.clientModules,\n    {\n      onError,\n      temporaryReferences: options?.temporaryReferences,\n    }\n  )\n\n  return new FlightRenderResult(flightReadableStream, {\n    fetchMetrics: ctx.workStore.fetchMetrics,\n  })\n}\n\n/**\n * Performs a \"warmup\" render of the RSC payload for a given route. This function is called by the server\n * prior to an actual render request in Dev mode only. It's purpose is to fill caches so the actual render\n * can accurately log activity in the right render context (Prerender vs Render).\n *\n * At the moment this implementation is mostly a fork of generateDynamicFlightRenderResult\n */\nasync function warmupDevRender(\n  req: BaseNextRequest,\n  ctx: AppRenderContext,\n  requestStore: RequestStore,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n    componentTree?: CacheNodeSeedData\n    preloadCallbacks?: PreloadCallbacks\n  }\n): Promise<RenderResult> {\n  const renderOpts = ctx.renderOpts\n  if (!renderOpts.dev) {\n    throw new InvariantError(\n      'generateDynamicFlightRenderResult should never be called in `next start` mode.'\n    )\n  }\n\n  function onFlightDataRenderError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components-payload')\n    )\n  }\n  const onError = createFlightReactServerErrorHandler(\n    true,\n    onFlightDataRenderError\n  )\n\n  // We're doing a dev warmup, so we should create a new resume data cache so\n  // we can fill it.\n  const devWarmupPrerenderResumeDataCache = createPrerenderResumeDataCache()\n\n  // Attach this to the request store so that it can be used during the\n  // render.\n  requestStore.devWarmupPrerenderResumeDataCache =\n    devWarmupPrerenderResumeDataCache\n\n  const rscPayload = await workUnitAsyncStorage.run(\n    requestStore,\n    generateDynamicRSCPayload,\n    ctx,\n    options\n  )\n\n  // For app dir, use the bundled version of Flight server renderer (renderToReadableStream)\n  // which contains the subset React.\n  const flightReadableStream = workUnitAsyncStorage.run(\n    requestStore,\n    ctx.componentMod.renderToReadableStream,\n    rscPayload,\n    ctx.clientReferenceManifest.clientModules,\n    {\n      onError,\n    }\n  )\n\n  const reader = flightReadableStream.getReader()\n\n  // Read the entire stream.\n  while (true) {\n    if ((await reader.read()).done) {\n      break\n    }\n  }\n\n  // As we're finished rendering, remove the reference to the prerender resume\n  // data cache so it can't be written to again.\n  requestStore.devWarmupPrerenderResumeDataCache = null\n\n  // We don't really want to return a result here but the stack of functions\n  // that calls into renderToHTML... expects a result. We should refactor this to\n  // lift the warmup pathway outside of renderToHTML... but for now this suffices\n  return new FlightRenderResult('', {\n    fetchMetrics: ctx.workStore.fetchMetrics,\n    devWarmupPrerenderResumeDataCache,\n  })\n}\n\n/**\n * Crawlers will inadvertently think the canonicalUrl in the RSC payload should be crawled\n * when our intention is to just seed the router state with the current URL.\n * This function splits up the pathname so that we can later join it on\n * when we're ready to consume the path.\n */\nfunction prepareInitialCanonicalUrl(url: RequestStore['url']) {\n  return (url.pathname + url.search).split('/')\n}\n\n// This is the data necessary to render <AppRouter /> when no SSR errors are encountered\nasync function getRSCPayload(\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  is404: boolean\n): Promise<InitialRSCPayload & { P: React.ReactNode }> {\n  const injectedCSS = new Set<string>()\n  const injectedJS = new Set<string>()\n  const injectedFontPreloadTags = new Set<string>()\n  let missingSlots: Set<string> | undefined\n\n  // We only track missing parallel slots in development\n  if (process.env.NODE_ENV === 'development') {\n    missingSlots = new Set<string>()\n  }\n\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      GlobalError,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    url,\n    workStore,\n  } = ctx\n\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  const searchParams = createServerSearchParamsForMetadata(query, workStore)\n  const [MetadataTree, getMetadataReady] = createMetadataComponents({\n    tree,\n    errorType: is404 ? 'not-found' : undefined,\n    searchParams,\n    metadataContext: createTrackedMetadataContext(\n      url.pathname,\n      ctx.renderOpts,\n      workStore\n    ),\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    createServerParamsForMetadata,\n    workStore,\n    MetadataBoundary,\n    ViewportBoundary,\n  })\n\n  const preloadCallbacks: PreloadCallbacks = []\n\n  const seedData = await createComponentTree({\n    ctx,\n    createSegmentPath: (child) => child,\n    loaderTree: tree,\n    parentParams: {},\n    firstItem: true,\n    injectedCSS,\n    injectedJS,\n    injectedFontPreloadTags,\n    rootLayoutIncluded: false,\n    getMetadataReady,\n    missingSlots,\n    preloadCallbacks,\n  })\n\n  // When the `vary` response header is present with `Next-URL`, that means there's a chance\n  // it could respond differently if there's an interception route. We provide this information\n  // to `AppRouter` so that it can properly seed the prefetch cache with a prefix, if needed.\n  const varyHeader = ctx.res.getHeader('vary')\n  const couldBeIntercepted =\n    typeof varyHeader === 'string' && varyHeader.includes(NEXT_URL)\n\n  const initialHead = (\n    <React.Fragment key={flightDataPathHeadKey}>\n      <NonIndex ctx={ctx} />\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={ctx.requestId} />\n    </React.Fragment>\n  )\n\n  const globalErrorStyles = await getGlobalErrorStyles(tree, ctx)\n\n  return {\n    // See the comment above the `Preloads` component (below) for why this is part of the payload\n    P: <Preloads preloadCallbacks={preloadCallbacks} />,\n    b: ctx.renderOpts.buildId,\n    p: ctx.assetPrefix,\n    c: prepareInitialCanonicalUrl(url),\n    i: !!couldBeIntercepted,\n    f: [[initialTree, seedData, initialHead]],\n    m: missingSlots,\n    G: [GlobalError, globalErrorStyles],\n    s: typeof ctx.renderOpts.postponed === 'string',\n    S: workStore.isStaticGeneration,\n  }\n}\n\n/**\n * Preload calls (such as `ReactDOM.preloadStyle` and `ReactDOM.preloadFont`) need to be called during rendering\n * in order to create the appropriate preload tags in the DOM, otherwise they're a no-op. Since we invoke\n * renderToReadableStream with a function that returns component props rather than a component itself, we use\n * this component to \"render  \" the preload calls.\n */\nfunction Preloads({ preloadCallbacks }: { preloadCallbacks: Function[] }) {\n  preloadCallbacks.forEach((preloadFn) => preloadFn())\n  return null\n}\n\n// This is the data necessary to render <AppRouter /> when an error state is triggered\nasync function getErrorRSCPayload(\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  errorType: 'not-found' | 'redirect' | undefined\n) {\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      GlobalError,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    url,\n    requestId,\n    workStore,\n  } = ctx\n\n  const searchParams = createServerSearchParamsForMetadata(query, workStore)\n  const [MetadataTree] = createMetadataComponents({\n    tree,\n    searchParams,\n    // We create an untracked metadata context here because we can't postpone\n    // again during the error render.\n    metadataContext: createMetadataContext(url.pathname, ctx.renderOpts),\n    errorType,\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    createServerParamsForMetadata,\n    workStore,\n    MetadataBoundary,\n    ViewportBoundary,\n  })\n\n  const initialHead = (\n    <React.Fragment key={flightDataPathHeadKey}>\n      <NonIndex ctx={ctx} />\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={requestId} />\n      {process.env.NODE_ENV === 'development' && (\n        <meta name=\"next-error\" content=\"not-found\" />\n      )}\n    </React.Fragment>\n  )\n\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  // For metadata notFound error there's no global not found boundary on top\n  // so we create a not found page with AppRouter\n  const initialSeedData: CacheNodeSeedData = [\n    initialTree[0],\n    <html id=\"__next_error__\">\n      <head></head>\n      <body></body>\n    </html>,\n    {},\n    null,\n  ]\n\n  const globalErrorStyles = await getGlobalErrorStyles(tree, ctx)\n\n  return {\n    b: ctx.renderOpts.buildId,\n    p: ctx.assetPrefix,\n    c: prepareInitialCanonicalUrl(url),\n    m: undefined,\n    i: false,\n    f: [[initialTree, initialSeedData, initialHead]],\n    G: [GlobalError, globalErrorStyles],\n    s: typeof ctx.renderOpts.postponed === 'string',\n    S: workStore.isStaticGeneration,\n  } satisfies InitialRSCPayload\n}\n\n// This component must run in an SSR context. It will render the RSC root component\nfunction App<T>({\n  reactServerStream,\n  preinitScripts,\n  clientReferenceManifest,\n  nonce,\n  ServerInsertedHTMLProvider,\n}: {\n  reactServerStream: BinaryStreamOf<T>\n  preinitScripts: () => void\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>\n  ServerInsertedHTMLProvider: React.ComponentType<{ children: JSX.Element }>\n  nonce?: string\n}): JSX.Element {\n  preinitScripts()\n  const response = React.use(\n    useFlightStream<InitialRSCPayload>(\n      reactServerStream,\n      clientReferenceManifest,\n      nonce\n    )\n  )\n\n  const initialState = createInitialRouterState({\n    buildId: response.b,\n    initialFlightData: response.f,\n    initialCanonicalUrlParts: response.c,\n    // location and initialParallelRoutes are not initialized in the SSR render\n    // they are set to an empty map and window.location, respectively during hydration\n    initialParallelRoutes: null!,\n    location: null,\n    couldBeIntercepted: response.i,\n    postponed: response.s,\n    prerendered: response.S,\n  })\n\n  const actionQueue = createMutableActionQueue(initialState)\n\n  const { HeadManagerContext } =\n    require('../../shared/lib/head-manager-context.shared-runtime') as typeof import('../../shared/lib/head-manager-context.shared-runtime')\n\n  return (\n    <HeadManagerContext.Provider\n      value={{\n        appDir: true,\n        nonce,\n      }}\n    >\n      <ServerInsertedHTMLProvider>\n        <AppRouter\n          actionQueue={actionQueue}\n          globalErrorComponentAndStyles={response.G}\n          assetPrefix={response.p}\n        />\n      </ServerInsertedHTMLProvider>\n    </HeadManagerContext.Provider>\n  )\n}\n\n// @TODO our error stream should be probably just use the same root component. But it was previously\n// different I don't want to figure out if that is meaningful at this time so just keeping the behavior\n// consistent for now.\nfunction AppWithoutContext<T>({\n  reactServerStream,\n  preinitScripts,\n  clientReferenceManifest,\n  nonce,\n}: {\n  reactServerStream: BinaryStreamOf<T>\n  preinitScripts: () => void\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>\n  nonce?: string\n}): JSX.Element {\n  preinitScripts()\n  const response = React.use(\n    useFlightStream<InitialRSCPayload>(\n      reactServerStream,\n      clientReferenceManifest,\n      nonce\n    )\n  )\n\n  const initialState = createInitialRouterState({\n    buildId: response.b,\n    initialFlightData: response.f,\n    initialCanonicalUrlParts: response.c,\n    // location and initialParallelRoutes are not initialized in the SSR render\n    // they are set to an empty map and window.location, respectively during hydration\n    initialParallelRoutes: null!,\n    location: null,\n    couldBeIntercepted: response.i,\n    postponed: response.s,\n    prerendered: response.S,\n  })\n\n  const actionQueue = createMutableActionQueue(initialState)\n\n  return (\n    <AppRouter\n      actionQueue={actionQueue}\n      globalErrorComponentAndStyles={response.G}\n      assetPrefix={response.p}\n    />\n  )\n}\n\n// We use a trick with TS Generics to branch streams with a type so we can\n// consume the parsed value of a Readable Stream if it was constructed with a\n// certain object shape. The generic type is not used directly in the type so it\n// requires a disabling of the eslint rule disallowing unused vars\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type BinaryStreamOf<T> = ReadableStream<Uint8Array>\n\nasync function renderToHTMLOrFlightImpl(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  url: ReturnType<typeof parseRelativeUrl>,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  renderOpts: RenderOpts,\n  requestStore: RequestStore,\n  workStore: WorkStore,\n  parsedRequestHeaders: ParsedRequestHeaders,\n  requestEndedState: { ended?: boolean },\n  postponedState: PostponedState | null,\n  implicitTags: Array<string>\n) {\n  const isNotFoundPath = pagePath === '/404'\n  if (isNotFoundPath) {\n    res.statusCode = 404\n  }\n\n  // A unique request timestamp used by development to ensure that it's\n  // consistent and won't change during this request. This is important to\n  // avoid that resources can be deduped by React Float if the same resource is\n  // rendered or preloaded multiple times: `<link href=\"a.css?v={Date.now()}\"/>`.\n  const requestTimestamp = Date.now()\n\n  const {\n    serverActionsManifest,\n    ComponentMod,\n    nextFontManifest,\n    serverActions,\n    assetPrefix = '',\n    enableTainting,\n  } = renderOpts\n\n  // We need to expose the bundled `require` API globally for\n  // react-server-dom-webpack. This is a hack until we find a better way.\n  if (ComponentMod.__next_app__) {\n    const instrumented = wrapClientComponentLoader(ComponentMod)\n    // @ts-ignore\n    globalThis.__next_require__ = instrumented.require\n    // When we are prerendering if there is a cacheSignal for tracking\n    // cache reads we wrap the loadChunk in this tracking. This allows us\n    // to treat chunk loading with similar semantics as cache reads to avoid\n    // async loading chunks from causing a prerender to abort too early.\n    // @ts-ignore\n    globalThis.__next_chunk_load__ = (...args: Array<any>) => {\n      const loadingChunk = instrumented.loadChunk(...args)\n      trackChunkLoading(loadingChunk)\n      return loadingChunk\n    }\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    // reset isr status at start of request\n    const { pathname } = new URL(req.url || '/', 'http://n')\n    renderOpts.setAppIsrStatus?.(pathname, null)\n  }\n\n  if (\n    // The type check here ensures that `req` is correctly typed, and the\n    // environment variable check provides dead code elimination.\n    process.env.NEXT_RUNTIME !== 'edge' &&\n    isNodeNextRequest(req)\n  ) {\n    req.originalRequest.on('end', () => {\n      const prerenderStore = workUnitAsyncStorage.getStore()\n      const isPPR =\n        prerenderStore &&\n        (prerenderStore.type === 'prerender' ||\n          prerenderStore.type === 'prerender-ppr')\n          ? !!prerenderStore.dynamicTracking?.dynamicAccesses?.length\n          : false\n\n      if (\n        process.env.NODE_ENV === 'development' &&\n        renderOpts.setAppIsrStatus &&\n        !isPPR &&\n        !requestStore.usedDynamic &&\n        !workStore.forceDynamic\n      ) {\n        // only node can be ISR so we only need to update the status here\n        const { pathname } = new URL(req.url || '/', 'http://n')\n        renderOpts.setAppIsrStatus(pathname, true)\n      }\n\n      requestEndedState.ended = true\n\n      if ('performance' in globalThis) {\n        const metrics = getClientComponentLoaderMetrics({ reset: true })\n        if (metrics) {\n          getTracer()\n            .startSpan(NextNodeServerSpan.clientComponentLoading, {\n              startTime: metrics.clientComponentLoadStart,\n              attributes: {\n                'next.clientComponentLoadCount':\n                  metrics.clientComponentLoadCount,\n                'next.span_type': NextNodeServerSpan.clientComponentLoading,\n              },\n            })\n            .end(\n              metrics.clientComponentLoadStart +\n                metrics.clientComponentLoadTimes\n            )\n        }\n      }\n    })\n  }\n\n  const metadata: AppPageRenderResultMetadata = {}\n\n  const appUsingSizeAdjustment = !!nextFontManifest?.appUsingSizeAdjust\n\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n\n  const serverModuleMap = createServerModuleMap({ serverActionsManifest })\n\n  setReferenceManifestsSingleton({\n    page: workStore.page,\n    clientReferenceManifest,\n    serverActionsManifest,\n    serverModuleMap,\n  })\n\n  ComponentMod.patchFetch()\n\n  // Pull out the hooks/references from the component.\n  const { tree: loaderTree, taintObjectReference } = ComponentMod\n\n  if (enableTainting) {\n    taintObjectReference(\n      'Do not pass process.env to client components since it will leak sensitive data',\n      process.env\n    )\n  }\n\n  workStore.fetchMetrics = []\n  metadata.fetchMetrics = workStore.fetchMetrics\n\n  // don't modify original query object\n  query = { ...query }\n  stripInternalQueries(query)\n\n  const {\n    flightRouterState,\n    isPrefetchRequest,\n    isRSCRequest,\n    isDevWarmupRequest,\n    nonce,\n  } = parsedRequestHeaders\n\n  /**\n   * The metadata items array created in next-app-loader with all relevant information\n   * that we need to resolve the final metadata.\n   */\n  let requestId: string\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    requestId = crypto.randomUUID()\n  } else {\n    requestId = require('next/dist/compiled/nanoid').nanoid()\n  }\n\n  /**\n   * Dynamic parameters. E.g. when you visit `/dashboard/vercel` which is rendered by `/dashboard/[slug]` the value will be {\"slug\": \"vercel\"}.\n   */\n  const params = renderOpts.params ?? {}\n\n  const { isStaticGeneration, fallbackRouteParams } = workStore\n\n  const getDynamicParamFromSegment = makeGetDynamicParamFromSegment(\n    params,\n    pagePath,\n    fallbackRouteParams\n  )\n\n  const isActionRequest = getServerActionRequestMetadata(req).isServerAction\n\n  const ctx: AppRenderContext = {\n    componentMod: ComponentMod,\n    url,\n    renderOpts,\n    workStore,\n    parsedRequestHeaders,\n    getDynamicParamFromSegment,\n    query,\n    isPrefetch: isPrefetchRequest,\n    isAction: isActionRequest,\n    requestTimestamp,\n    appUsingSizeAdjustment,\n    flightRouterState,\n    requestId,\n    pagePath,\n    clientReferenceManifest,\n    assetPrefix,\n    isNotFoundPath,\n    nonce,\n    res,\n  }\n\n  getTracer().setRootSpanAttribute('next.route', pagePath)\n\n  if (isStaticGeneration) {\n    // We're either building or revalidating. In either case we need to\n    // prerender our page rather than render it.\n    const prerenderToStreamWithTracing = getTracer().wrap(\n      AppRenderSpan.getBodyResult,\n      {\n        spanName: `prerender route (app) ${pagePath}`,\n        attributes: {\n          'next.route': pagePath,\n        },\n      },\n      prerenderToStream\n    )\n\n    const response = await prerenderToStreamWithTracing(\n      req,\n      res,\n      ctx,\n      metadata,\n      workStore,\n      loaderTree,\n      implicitTags\n    )\n\n    // If we're debugging partial prerendering, print all the dynamic API accesses\n    // that occurred during the render.\n    // @TODO move into renderToStream function\n    if (\n      response.dynamicAccess &&\n      accessedDynamicData(response.dynamicAccess) &&\n      renderOpts.isDebugDynamicAccesses\n    ) {\n      warn('The following dynamic usage was detected:')\n      for (const access of formatDynamicAPIAccesses(response.dynamicAccess)) {\n        warn(access)\n      }\n    }\n\n    // If we encountered any unexpected errors during build we fail the\n    // prerendering phase and the build.\n    if (response.digestErrorsMap.size) {\n      const buildFailingError = response.digestErrorsMap.values().next().value\n      if (buildFailingError) throw buildFailingError\n    }\n    // Pick first userland SSR error, which is also not a RSC error.\n    if (response.ssrErrors.length) {\n      const buildFailingError = response.ssrErrors.find((err) =>\n        isUserLandError(err)\n      )\n      if (buildFailingError) throw buildFailingError\n    }\n\n    const options: RenderResultOptions = {\n      metadata,\n    }\n    // If we have pending revalidates, wait until they are all resolved.\n    if (\n      workStore.pendingRevalidates ||\n      workStore.pendingRevalidateWrites ||\n      workStore.revalidatedTags\n    ) {\n      options.waitUntil = Promise.all([\n        workStore.incrementalCache?.revalidateTag(\n          workStore.revalidatedTags || []\n        ),\n        ...Object.values(workStore.pendingRevalidates || {}),\n        ...(workStore.pendingRevalidateWrites || []),\n      ])\n    }\n\n    if (response.collectedTags) {\n      metadata.fetchTags = response.collectedTags.join(',')\n    }\n\n    // Let the client router know how long to keep the cached entry around.\n    const staleHeader = String(response.collectedStale)\n    res.setHeader(NEXT_ROUTER_STALE_TIME_HEADER, staleHeader)\n    metadata.headers ??= {}\n    metadata.headers[NEXT_ROUTER_STALE_TIME_HEADER] = staleHeader\n\n    // If force static is specifically set to false, we should not revalidate\n    // the page.\n    if (workStore.forceStatic === false || response.collectedRevalidate === 0) {\n      metadata.revalidate = 0\n    } else {\n      // Copy the revalidation value onto the render result metadata.\n      metadata.revalidate =\n        response.collectedRevalidate >= INFINITE_CACHE\n          ? false\n          : response.collectedRevalidate\n    }\n\n    // provide bailout info for debugging\n    if (metadata.revalidate === 0) {\n      metadata.staticBailoutInfo = {\n        description: workStore.dynamicUsageDescription,\n        stack: workStore.dynamicUsageStack,\n      }\n    }\n\n    return new RenderResult(await streamToString(response.stream), options)\n  } else {\n    // We're rendering dynamically\n    if (isDevWarmupRequest) {\n      return warmupDevRender(req, ctx, requestStore)\n    } else if (isRSCRequest) {\n      return generateDynamicFlightRenderResult(req, ctx)\n    }\n\n    const renderToStreamWithTracing = getTracer().wrap(\n      AppRenderSpan.getBodyResult,\n      {\n        spanName: `render route (app) ${pagePath}`,\n        attributes: {\n          'next.route': pagePath,\n        },\n      },\n      renderToStream\n    )\n\n    let formState: null | any = null\n    if (isActionRequest) {\n      // For action requests, we handle them differently with a special render result.\n      const actionRequestResult = await handleAction({\n        req,\n        res,\n        ComponentMod,\n        serverModuleMap,\n        generateFlight: generateDynamicFlightRenderResult,\n        workStore,\n        requestStore,\n        serverActions,\n        ctx,\n      })\n\n      if (actionRequestResult) {\n        if (actionRequestResult.type === 'not-found') {\n          const notFoundLoaderTree = createNotFoundLoaderTree(loaderTree)\n          res.statusCode = 404\n          const stream = await renderToStreamWithTracing(\n            requestStore,\n            req,\n            res,\n            ctx,\n            workStore,\n            notFoundLoaderTree,\n            formState,\n            postponedState\n          )\n\n          return new RenderResult(stream, { metadata })\n        } else if (actionRequestResult.type === 'done') {\n          if (actionRequestResult.result) {\n            actionRequestResult.result.assignMetadata(metadata)\n            return actionRequestResult.result\n          } else if (actionRequestResult.formState) {\n            formState = actionRequestResult.formState\n          }\n        }\n      }\n    }\n\n    const options: RenderResultOptions = {\n      metadata,\n    }\n\n    const stream = await renderToStreamWithTracing(\n      requestStore,\n      req,\n      res,\n      ctx,\n      workStore,\n      loaderTree,\n      formState,\n      postponedState\n    )\n\n    // If we have pending revalidates, wait until they are all resolved.\n    if (\n      workStore.pendingRevalidates ||\n      workStore.pendingRevalidateWrites ||\n      workStore.revalidatedTags\n    ) {\n      options.waitUntil = Promise.all([\n        workStore.incrementalCache?.revalidateTag(\n          workStore.revalidatedTags || []\n        ),\n        ...Object.values(workStore.pendingRevalidates || {}),\n        ...(workStore.pendingRevalidateWrites || []),\n      ])\n    }\n\n    // Create the new render result for the response.\n    return new RenderResult(stream, options)\n  }\n}\n\nexport type AppPageRender = (\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  fallbackRouteParams: FallbackRouteParams | null,\n  renderOpts: RenderOpts,\n  serverComponentsHmrCache: ServerComponentsHmrCache | undefined,\n  isDevWarmup: boolean\n) => Promise<RenderResult<AppPageRenderResultMetadata>>\n\nexport const renderToHTMLOrFlight: AppPageRender = (\n  req,\n  res,\n  pagePath,\n  query,\n  fallbackRouteParams,\n  renderOpts,\n  serverComponentsHmrCache,\n  isDevWarmup\n) => {\n  if (!req.url) {\n    throw new Error('Invalid URL')\n  }\n\n  const url = parseRelativeUrl(req.url, undefined, false)\n\n  // We read these values from the request object as, in certain cases,\n  // base-server will strip them to opt into different rendering behavior.\n  const parsedRequestHeaders = parseRequestHeaders(req.headers, {\n    isDevWarmup,\n    isRoutePPREnabled: renderOpts.experimental.isRoutePPREnabled === true,\n  })\n\n  const { isHmrRefresh, isPrefetchRequest } = parsedRequestHeaders\n\n  const requestEndedState = { ended: false }\n  let postponedState: PostponedState | null = null\n\n  // If provided, the postpone state should be parsed so it can be provided to\n  // React.\n  if (typeof renderOpts.postponed === 'string') {\n    if (fallbackRouteParams) {\n      throw new InvariantError(\n        'postponed state should not be provided when fallback params are provided'\n      )\n    }\n\n    postponedState = parsePostponedState(\n      renderOpts.postponed,\n      renderOpts.params\n    )\n  }\n\n  if (\n    postponedState?.renderResumeDataCache &&\n    renderOpts.devWarmupRenderResumeDataCache\n  ) {\n    throw new InvariantError(\n      'postponed state and dev warmup immutable resume data cache should not be provided together'\n    )\n  }\n\n  const renderResumeDataCache =\n    renderOpts.devWarmupRenderResumeDataCache ??\n    postponedState?.renderResumeDataCache\n\n  const implicitTags = getImplicitTags(\n    renderOpts.routeModule.definition.page,\n    url,\n    fallbackRouteParams\n  )\n\n  // TODO: We need to refactor this so that prerenders do not rely upon the\n  // existence of an outer scoped request store. Then we should move this\n  // store generation inside the appropriate scope like `renderToStream` where\n  // we know we're handling a Request and not a Prerender\n  const requestStore = createRequestStoreForRender(\n    req,\n    res,\n    url,\n    implicitTags,\n    renderOpts.onUpdateCookies,\n    renderResumeDataCache,\n    renderOpts.previewProps,\n    isHmrRefresh,\n    serverComponentsHmrCache\n  )\n\n  const workStore = createWorkStore({\n    page: renderOpts.routeModule.definition.page,\n    fallbackRouteParams,\n    renderOpts,\n    requestEndedState,\n    // @TODO move to workUnitStore of type Request\n    isPrefetchRequest,\n  })\n\n  return workAsyncStorage.run(workStore, () => {\n    return workUnitAsyncStorage.run(requestStore, () => {\n      return renderToHTMLOrFlightImpl(\n        req,\n        res,\n        url,\n        pagePath,\n        query,\n        renderOpts,\n        requestStore,\n        workStore,\n        parsedRequestHeaders,\n        requestEndedState,\n        postponedState,\n        implicitTags\n      )\n    })\n  })\n}\n\nasync function renderToStream(\n  requestStore: RequestStore,\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  ctx: AppRenderContext,\n  workStore: WorkStore,\n  tree: LoaderTree,\n  formState: any,\n  postponedState: PostponedState | null\n): Promise<ReadableStream<Uint8Array>> {\n  const renderOpts = ctx.renderOpts\n  const ComponentMod = renderOpts.ComponentMod\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n\n  const { ServerInsertedHTMLProvider, renderServerInsertedHTML } =\n    createServerInsertedHTML()\n\n  const tracingMetadata = getTracedMetadata(\n    getTracer().getTracePropagationData(),\n    renderOpts.experimental.clientTraceMetadata\n  )\n\n  const polyfills: JSX.IntrinsicElements['script'][] =\n    renderOpts.buildManifest.polyfillFiles\n      .filter(\n        (polyfill) =>\n          polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')\n      )\n      .map((polyfill) => ({\n        src: `${ctx.assetPrefix}/_next/${polyfill}${getAssetQueryString(\n          ctx,\n          false\n        )}`,\n        integrity: renderOpts.subresourceIntegrityManifest?.[polyfill],\n        crossOrigin: renderOpts.crossOrigin,\n        noModule: true,\n        nonce: ctx.nonce,\n      }))\n\n  const [preinitScripts, bootstrapScript] = getRequiredScripts(\n    renderOpts.buildManifest,\n    // Why is assetPrefix optional on renderOpts?\n    // @TODO make it default empty string on renderOpts and get rid of it from ctx\n    ctx.assetPrefix,\n    renderOpts.crossOrigin,\n    renderOpts.subresourceIntegrityManifest,\n    getAssetQueryString(ctx, true),\n    ctx.nonce,\n    renderOpts.page\n  )\n\n  const reactServerErrorsByDigest: Map<string, DigestedError> = new Map()\n  const silenceLogger = false\n  function onHTMLRenderRSCError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components')\n    )\n  }\n  const serverComponentsErrorHandler = createHTMLReactServerErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    silenceLogger,\n    onHTMLRenderRSCError\n  )\n\n  function onHTMLRenderSSRError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'server-rendering')\n    )\n  }\n\n  const allCapturedErrors: Array<unknown> = []\n  const htmlRendererErrorHandler = createHTMLErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    allCapturedErrors,\n    silenceLogger,\n    onHTMLRenderSSRError\n  )\n\n  let reactServerResult: null | ReactServerResult = null\n\n  const setHeader = res.setHeader.bind(res)\n\n  try {\n    if (\n      // We only want this behavior when running `next dev`\n      renderOpts.dev &&\n      // We only want this behavior when we have React's dev builds available\n      process.env.NODE_ENV === 'development' &&\n      // Edge routes never prerender so we don't have a Prerender environment for anything in edge runtime\n      process.env.NEXT_RUNTIME !== 'edge' &&\n      // We only have a Prerender environment for projects opted into dynamicIO\n      renderOpts.experimental.dynamicIO\n    ) {\n      // This is a dynamic render. We don't do dynamic tracking because we're not prerendering\n      const RSCPayload: InitialRSCPayload & {\n        /** Only available during dynamicIO development builds. Used for logging errors. */\n        _validation?: Promise<React.ReactNode>\n      } = await workUnitAsyncStorage.run(\n        requestStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n      const [resolveValidation, validationOutlet] = createValidationOutlet()\n      RSCPayload._validation = validationOutlet\n\n      const reactServerStream = await workUnitAsyncStorage.run(\n        requestStore,\n        scheduleInSequentialTasks,\n        () => {\n          requestStore.prerenderPhase = true\n          return ComponentMod.renderToReadableStream(\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n              environmentName: () =>\n                requestStore.prerenderPhase === true ? 'Prerender' : 'Server',\n              filterStackFrame(url: string, _functionName: string): boolean {\n                // The default implementation filters out <anonymous> stack frames\n                // but we want to retain them because current Server Components and\n                // built-in Components in parent stacks don't have source location.\n                return !url.startsWith('node:') && !url.includes('node_modules')\n              },\n            }\n          )\n        },\n        () => {\n          requestStore.prerenderPhase = false\n        }\n      )\n\n      spawnDynamicValidationInDev(\n        resolveValidation,\n        tree,\n        ctx,\n        res.statusCode === 404,\n        clientReferenceManifest,\n        workStore.route\n      )\n\n      reactServerResult = new ReactServerResult(reactServerStream)\n    } else {\n      // This is a dynamic render. We don't do dynamic tracking because we're not prerendering\n      const RSCPayload = await workUnitAsyncStorage.run(\n        requestStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n\n      reactServerResult = new ReactServerResult(\n        workUnitAsyncStorage.run(\n          requestStore,\n          ComponentMod.renderToReadableStream,\n          RSCPayload,\n          clientReferenceManifest.clientModules,\n          {\n            onError: serverComponentsErrorHandler,\n          }\n        )\n      )\n    }\n\n    // React doesn't start rendering synchronously but we want the RSC render to have a chance to start\n    // before we begin SSR rendering because we want to capture any available preload headers so we tick\n    // one task before continuing\n    await waitAtLeastOneReactRenderTask()\n\n    // If provided, the postpone state should be parsed as JSON so it can be\n    // provided to React.\n    if (typeof renderOpts.postponed === 'string') {\n      if (postponedState?.type === DynamicState.DATA) {\n        // We have a complete HTML Document in the prerender but we need to\n        // still include the new server component render because it was not included\n        // in the static prelude.\n        const inlinedReactServerDataStream = createInlinedDataReadableStream(\n          reactServerResult.tee(),\n          ctx.nonce,\n          formState\n        )\n\n        return chainStreams(\n          inlinedReactServerDataStream,\n          createDocumentClosingStream()\n        )\n      } else if (postponedState) {\n        // We assume we have dynamic HTML requiring a resume render to complete\n        const postponed = getPostponedFromState(postponedState)\n\n        const resume = require('react-dom/server.edge')\n          .resume as (typeof import('react-dom/server.edge'))['resume']\n\n        const htmlStream = await workUnitAsyncStorage.run(\n          requestStore,\n          resume,\n          <App\n            reactServerStream={reactServerResult.tee()}\n            preinitScripts={preinitScripts}\n            clientReferenceManifest={clientReferenceManifest}\n            ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n            nonce={ctx.nonce}\n          />,\n          postponed,\n          {\n            onError: htmlRendererErrorHandler,\n            nonce: ctx.nonce,\n          }\n        )\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n        return await continueDynamicHTMLResume(htmlStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            reactServerResult.consume(),\n            ctx.nonce,\n            formState\n          ),\n          getServerInsertedHTML,\n        })\n      }\n    }\n\n    // This is a regular dynamic render\n    const renderToReadableStream = require('react-dom/server.edge')\n      .renderToReadableStream as (typeof import('react-dom/server.edge'))['renderToReadableStream']\n\n    const htmlStream = await workUnitAsyncStorage.run(\n      requestStore,\n      renderToReadableStream,\n      <App\n        reactServerStream={reactServerResult.tee()}\n        preinitScripts={preinitScripts}\n        clientReferenceManifest={clientReferenceManifest}\n        ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n        nonce={ctx.nonce}\n      />,\n      {\n        onError: htmlRendererErrorHandler,\n        nonce: ctx.nonce,\n        onHeaders: (headers: Headers) => {\n          headers.forEach((value, key) => {\n            setHeader(key, value)\n          })\n        },\n        maxHeadersLength: renderOpts.reactMaxHeadersLength,\n        // When debugging the static shell, client-side rendering should be\n        // disabled to prevent blanking out the page.\n        bootstrapScripts: renderOpts.isDebugStaticShell\n          ? []\n          : [bootstrapScript],\n        formState,\n      }\n    )\n\n    const getServerInsertedHTML = makeGetServerInsertedHTML({\n      polyfills,\n      renderServerInsertedHTML,\n      serverCapturedErrors: allCapturedErrors,\n      basePath: renderOpts.basePath,\n      tracingMetadata: tracingMetadata,\n    })\n    /**\n     * Rules of Static & Dynamic HTML:\n     *\n     *    1.) We must generate static HTML unless the caller explicitly opts\n     *        in to dynamic HTML support.\n     *\n     *    2.) If dynamic HTML support is requested, we must honor that request\n     *        or throw an error. It is the sole responsibility of the caller to\n     *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n     *\n     * These rules help ensure that other existing features like request caching,\n     * coalescing, and ISR continue working as intended.\n     */\n    const generateStaticHTML = renderOpts.supportsDynamicResponse !== true\n    const validateRootLayout = renderOpts.dev\n    return await continueFizzStream(htmlStream, {\n      inlinedDataStream: createInlinedDataReadableStream(\n        reactServerResult.consume(),\n        ctx.nonce,\n        formState\n      ),\n      isStaticGeneration: generateStaticHTML,\n      getServerInsertedHTML,\n      serverInsertedHTMLToHead: true,\n      validateRootLayout,\n    })\n  } catch (err) {\n    if (\n      isStaticGenBailoutError(err) ||\n      (typeof err === 'object' &&\n        err !== null &&\n        'message' in err &&\n        typeof err.message === 'string' &&\n        err.message.includes(\n          'https://nextjs.org/docs/advanced-features/static-html-export'\n        ))\n    ) {\n      // Ensure that \"next dev\" prints the red error overlay\n      throw err\n    }\n\n    // If a bailout made it to this point, it means it wasn't wrapped inside\n    // a suspense boundary.\n    const shouldBailoutToCSR = isBailoutToCSRError(err)\n    if (shouldBailoutToCSR) {\n      const stack = getStackWithoutErrorMessage(err)\n      error(\n        `${err.reason} should be wrapped in a suspense boundary at page \"${ctx.pagePath}\". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\\n${stack}`\n      )\n\n      throw err\n    }\n\n    let errorType: 'not-found' | 'redirect' | undefined\n\n    if (isNotFoundError(err)) {\n      errorType = 'not-found'\n      res.statusCode = 404\n    } else if (isRedirectError(err)) {\n      errorType = 'redirect'\n      res.statusCode = getRedirectStatusCodeFromError(err)\n\n      const redirectUrl = addPathPrefix(\n        getURLFromRedirectError(err),\n        renderOpts.basePath\n      )\n\n      // If there were mutable cookies set, we need to set them on the\n      // response.\n      const headers = new Headers()\n      if (appendMutableCookies(headers, requestStore.mutableCookies)) {\n        setHeader('set-cookie', Array.from(headers.values()))\n      }\n\n      setHeader('location', redirectUrl)\n    } else if (!shouldBailoutToCSR) {\n      res.statusCode = 500\n    }\n\n    const [errorPreinitScripts, errorBootstrapScript] = getRequiredScripts(\n      renderOpts.buildManifest,\n      ctx.assetPrefix,\n      renderOpts.crossOrigin,\n      renderOpts.subresourceIntegrityManifest,\n      getAssetQueryString(ctx, false),\n      ctx.nonce,\n      '/_not-found/page'\n    )\n\n    const errorRSCPayload = await workUnitAsyncStorage.run(\n      requestStore,\n      getErrorRSCPayload,\n      tree,\n      ctx,\n      errorType\n    )\n\n    const errorServerStream = workUnitAsyncStorage.run(\n      requestStore,\n      ComponentMod.renderToReadableStream,\n      errorRSCPayload,\n      clientReferenceManifest.clientModules,\n      {\n        onError: serverComponentsErrorHandler,\n      }\n    )\n\n    if (reactServerResult === null) {\n      // We errored when we did not have an RSC stream to read from. This is not just a render\n      // error, we need to throw early\n      throw err\n    }\n\n    try {\n      const fizzStream = await workUnitAsyncStorage.run(\n        requestStore,\n        renderToInitialFizzStream,\n        {\n          ReactDOMServer: require('react-dom/server.edge'),\n          element: (\n            <AppWithoutContext\n              reactServerStream={errorServerStream}\n              preinitScripts={errorPreinitScripts}\n              clientReferenceManifest={clientReferenceManifest}\n              nonce={ctx.nonce}\n            />\n          ),\n          streamOptions: {\n            nonce: ctx.nonce,\n            // Include hydration scripts in the HTML\n            bootstrapScripts: [errorBootstrapScript],\n            formState,\n          },\n        }\n      )\n\n      /**\n       * Rules of Static & Dynamic HTML:\n       *\n       *    1.) We must generate static HTML unless the caller explicitly opts\n       *        in to dynamic HTML support.\n       *\n       *    2.) If dynamic HTML support is requested, we must honor that request\n       *        or throw an error. It is the sole responsibility of the caller to\n       *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n       *\n       * These rules help ensure that other existing features like request caching,\n       * coalescing, and ISR continue working as intended.\n       */\n      const generateStaticHTML = renderOpts.supportsDynamicResponse !== true\n      const validateRootLayout = renderOpts.dev\n      return await continueFizzStream(fizzStream, {\n        inlinedDataStream: createInlinedDataReadableStream(\n          // This is intentionally using the readable datastream from the\n          // main render rather than the flight data from the error page\n          // render\n          reactServerResult.consume(),\n          ctx.nonce,\n          formState\n        ),\n        isStaticGeneration: generateStaticHTML,\n        getServerInsertedHTML: makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: [],\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        }),\n        serverInsertedHTMLToHead: true,\n        validateRootLayout,\n      })\n    } catch (finalErr: any) {\n      if (process.env.NODE_ENV === 'development' && isNotFoundError(finalErr)) {\n        const bailOnNotFound: typeof import('../../client/components/dev-root-not-found-boundary').bailOnNotFound =\n          require('../../client/components/dev-root-not-found-boundary').bailOnNotFound\n        bailOnNotFound()\n      }\n      throw finalErr\n    }\n  }\n}\n\nfunction createValidationOutlet() {\n  let resolveValidation: (value: React.ReactNode) => void\n  let outlet = new Promise<React.ReactNode>((resolve) => {\n    resolveValidation = resolve\n  })\n  return [resolveValidation!, outlet] as const\n}\n\nasync function spawnDynamicValidationInDev(\n  resolveValidation: (validatingElement: React.ReactNode) => void,\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  isNotFound: boolean,\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>,\n  route: string\n): Promise<void> {\n  const { componentMod: ComponentMod } = ctx\n\n  // Prerender controller represents the lifetime of the prerender.\n  // It will be aborted when a Task is complete or a synchronously aborting\n  // API is called. Notably during cache-filling renders this does not actually\n  // terminate the render itself which will continue until all caches are filled\n  const initialServerPrerenderController = new AbortController()\n\n  // This controller represents the lifetime of the React render call. Notably\n  // during the cache-filling render it is different from the prerender controller\n  // because we don't want to end the react render until all caches are filled.\n  const initialServerRenderController = new AbortController()\n\n  const cacheSignal = new CacheSignal()\n  const prerenderResumeDataCache = createPrerenderResumeDataCache()\n  const initialServerPrerenderStore: PrerenderStore = {\n    type: 'prerender',\n    phase: 'render',\n    implicitTags: [],\n    renderSignal: initialServerRenderController.signal,\n    controller: initialServerPrerenderController,\n    cacheSignal,\n    dynamicTracking: null,\n    revalidate: INFINITE_CACHE,\n    expire: INFINITE_CACHE,\n    stale: INFINITE_CACHE,\n    tags: [],\n    prerenderResumeDataCache,\n  }\n\n  const initialClientController = new AbortController()\n  const initialClientPrerenderStore: PrerenderStore = {\n    type: 'prerender',\n    phase: 'render',\n    implicitTags: [],\n    renderSignal: initialClientController.signal,\n    controller: initialClientController,\n    cacheSignal,\n    dynamicTracking: null,\n    revalidate: INFINITE_CACHE,\n    expire: INFINITE_CACHE,\n    stale: INFINITE_CACHE,\n    tags: [],\n    prerenderResumeDataCache,\n  }\n\n  // We're not going to use the result of this render because the only time it could be used\n  // is if it completes in a microtask and that's likely very rare for any non-trivial app\n  const firstAttemptRSCPayload = await workUnitAsyncStorage.run(\n    initialServerPrerenderStore,\n    getRSCPayload,\n    tree,\n    ctx,\n    isNotFound\n  )\n\n  let initialServerStream\n  try {\n    initialServerStream = workUnitAsyncStorage.run(\n      initialServerPrerenderStore,\n      ComponentMod.renderToReadableStream,\n      firstAttemptRSCPayload,\n      clientReferenceManifest.clientModules,\n      {\n        onError: (err: unknown) => {\n          if (\n            initialServerPrerenderController.signal.aborted ||\n            initialServerRenderController.signal.aborted\n          ) {\n            // The render aborted before this error was handled which indicates\n            // the error is caused by unfinished components within the render\n            return\n          } else if (\n            process.env.NEXT_DEBUG_BUILD ||\n            process.env.__NEXT_VERBOSE_LOGGING\n          ) {\n            printDebugThrownValueForProspectiveRender(err, route)\n          }\n        },\n        signal: initialServerRenderController.signal,\n      }\n    )\n  } catch (err: unknown) {\n    if (\n      initialServerPrerenderController.signal.aborted ||\n      initialServerRenderController.signal.aborted\n    ) {\n      // These are expected errors that might error the prerender. we ignore them.\n    } else if (\n      process.env.NEXT_DEBUG_BUILD ||\n      process.env.__NEXT_VERBOSE_LOGGING\n    ) {\n      // We don't normally log these errors because we are going to retry anyway but\n      // it can be useful for debugging Next.js itself to get visibility here when needed\n      printDebugThrownValueForProspectiveRender(err, route)\n    }\n  }\n\n  const { ServerInsertedHTMLProvider } = createServerInsertedHTML()\n  const nonce = '1'\n\n  if (initialServerStream) {\n    const [warmupStream, renderStream] = initialServerStream.tee()\n    initialServerStream = null\n    // Before we attempt the SSR initial render we need to ensure all client modules\n    // are already loaded.\n    await warmFlightResponse(warmupStream, clientReferenceManifest)\n\n    const prerender = require('react-dom/static.edge')\n      .prerender as (typeof import('react-dom/static.edge'))['prerender']\n    const pendingInitialClientResult = workUnitAsyncStorage.run(\n      initialClientPrerenderStore,\n      prerender,\n      <App\n        reactServerStream={renderStream}\n        preinitScripts={() => {}}\n        clientReferenceManifest={clientReferenceManifest}\n        ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n        nonce={nonce}\n      />,\n      {\n        signal: initialClientController.signal,\n        onError: (err: unknown, _errorInfo: ErrorInfo) => {\n          if (initialClientController.signal.aborted) {\n            // These are expected errors that might error the prerender. we ignore them.\n          } else if (\n            process.env.NEXT_DEBUG_BUILD ||\n            process.env.__NEXT_VERBOSE_LOGGING\n          ) {\n            // We don't normally log these errors because we are going to retry anyway but\n            // it can be useful for debugging Next.js itself to get visibility here when needed\n            printDebugThrownValueForProspectiveRender(err, route)\n          }\n        },\n      }\n    )\n    pendingInitialClientResult.catch((err: unknown) => {\n      if (initialClientController.signal.aborted) {\n        // We aborted the render normally and can ignore this error\n      } else {\n        // We're going to retry to so we normally would suppress this error but\n        // when verbose logging is on we print it\n        if (process.env.__NEXT_VERBOSE_LOGGING) {\n          printDebugThrownValueForProspectiveRender(err, route)\n        }\n      }\n    })\n  }\n\n  await cacheSignal.cacheReady()\n  // It is important that we abort the SSR render first to avoid\n  // connection closed errors from having an incomplete RSC stream\n  initialClientController.abort()\n  initialServerRenderController.abort()\n  initialServerPrerenderController.abort()\n\n  // We've now filled caches and triggered any inadvertent sync bailouts\n  // due to lazy module initialization. We can restart our render to capture results\n\n  const finalServerController = new AbortController()\n  const serverDynamicTracking = createDynamicTrackingState(false)\n\n  const finalServerPrerenderStore: PrerenderStore = {\n    type: 'prerender',\n    phase: 'render',\n    implicitTags: [],\n    renderSignal: finalServerController.signal,\n    controller: finalServerController,\n    // During the final prerender we don't need to track cache access so we omit the signal\n    cacheSignal: null,\n    dynamicTracking: serverDynamicTracking,\n    revalidate: INFINITE_CACHE,\n    expire: INFINITE_CACHE,\n    stale: INFINITE_CACHE,\n    tags: [],\n    prerenderResumeDataCache,\n  }\n\n  const finalClientController = new AbortController()\n  const clientDynamicTracking = createDynamicTrackingState(false)\n  const dynamicValidation = createDynamicValidationState()\n\n  const finalClientPrerenderStore: PrerenderStore = {\n    type: 'prerender',\n    phase: 'render',\n    implicitTags: [],\n    renderSignal: finalClientController.signal,\n    controller: finalClientController,\n    // During the final prerender we don't need to track cache access so we omit the signal\n    cacheSignal: null,\n    dynamicTracking: clientDynamicTracking,\n    revalidate: INFINITE_CACHE,\n    expire: INFINITE_CACHE,\n    stale: INFINITE_CACHE,\n    tags: [],\n    prerenderResumeDataCache,\n  }\n\n  const finalServerPayload = await workUnitAsyncStorage.run(\n    finalServerPrerenderStore,\n    getRSCPayload,\n    tree,\n    ctx,\n    isNotFound\n  )\n\n  const serverPrerenderStreamResult = await prerenderServerWithPhases(\n    finalServerController.signal,\n    () =>\n      workUnitAsyncStorage.run(\n        finalServerPrerenderStore,\n        ComponentMod.renderToReadableStream,\n        finalServerPayload,\n        clientReferenceManifest.clientModules,\n        {\n          onError: (err: unknown) => {\n            if (finalServerController.signal.aborted) {\n              if (isPrerenderInterruptedError(err)) {\n                return err.digest\n              }\n            }\n          },\n          signal: finalServerController.signal,\n        }\n      ),\n    () => {\n      finalServerController.abort()\n    }\n  )\n\n  const serverPhasedStream = serverPrerenderStreamResult.asPhasedStream()\n  try {\n    const prerender = require('react-dom/static.edge')\n      .prerender as (typeof import('react-dom/static.edge'))['prerender']\n    await prerenderClientWithPhases(\n      () =>\n        workUnitAsyncStorage.run(\n          finalClientPrerenderStore,\n          prerender,\n          <App\n            reactServerStream={serverPhasedStream}\n            preinitScripts={() => {}}\n            clientReferenceManifest={clientReferenceManifest}\n            ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n            nonce={ctx.nonce}\n          />,\n          {\n            signal: finalClientController.signal,\n            onError: (err: unknown, errorInfo: ErrorInfo) => {\n              if (\n                isPrerenderInterruptedError(err) ||\n                finalClientController.signal.aborted\n              ) {\n                const componentStack: string | undefined = (errorInfo as any)\n                  .componentStack\n                if (typeof componentStack === 'string') {\n                  trackAllowedDynamicAccess(\n                    route,\n                    componentStack,\n                    dynamicValidation,\n                    serverDynamicTracking,\n                    clientDynamicTracking\n                  )\n                }\n                return\n              }\n            },\n          }\n        ),\n      () => {\n        finalClientController.abort()\n        serverPhasedStream.assertExhausted()\n      }\n    )\n  } catch (err) {\n    if (\n      isPrerenderInterruptedError(err) ||\n      finalClientController.signal.aborted\n    ) {\n      // we don't have a root because the abort errored in the root. We can just ignore this error\n    } else {\n      // This error is something else and should bubble up\n      throw err\n    }\n  }\n\n  function LogDynamicValidation() {\n    try {\n      throwIfDisallowedDynamic(\n        route,\n        dynamicValidation,\n        serverDynamicTracking,\n        clientDynamicTracking\n      )\n    } catch {}\n    return null\n  }\n\n  resolveValidation(<LogDynamicValidation />)\n}\n\ntype PrerenderToStreamResult = {\n  stream: ReadableStream<Uint8Array>\n  digestErrorsMap: Map<string, DigestedError>\n  ssrErrors: Array<unknown>\n  dynamicAccess?: null | Array<DynamicAccess>\n  collectedRevalidate: number\n  collectedExpire: number\n  collectedStale: number\n  collectedTags: null | string[]\n}\n\n/**\n * Determines whether we should generate static flight data.\n */\nfunction shouldGenerateStaticFlightData(workStore: WorkStore): boolean {\n  const { fallbackRouteParams, isStaticGeneration } = workStore\n  if (!isStaticGeneration) return false\n\n  if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n    return false\n  }\n\n  return true\n}\n\nasync function prerenderToStream(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  ctx: AppRenderContext,\n  metadata: AppPageRenderResultMetadata,\n  workStore: WorkStore,\n  tree: LoaderTree,\n  implicitTags: Array<string>\n): Promise<PrerenderToStreamResult> {\n  // When prerendering formState is always null. We still include it\n  // because some shared APIs expect a formState value and this is slightly\n  // more explicit than making it an optional function argument\n  const formState = null\n\n  const renderOpts = ctx.renderOpts\n  const ComponentMod = renderOpts.ComponentMod\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n  const fallbackRouteParams = workStore.fallbackRouteParams\n\n  const { ServerInsertedHTMLProvider, renderServerInsertedHTML } =\n    createServerInsertedHTML()\n\n  const tracingMetadata = getTracedMetadata(\n    getTracer().getTracePropagationData(),\n    renderOpts.experimental.clientTraceMetadata\n  )\n\n  const polyfills: JSX.IntrinsicElements['script'][] =\n    renderOpts.buildManifest.polyfillFiles\n      .filter(\n        (polyfill) =>\n          polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')\n      )\n      .map((polyfill) => ({\n        src: `${ctx.assetPrefix}/_next/${polyfill}${getAssetQueryString(\n          ctx,\n          false\n        )}`,\n        integrity: renderOpts.subresourceIntegrityManifest?.[polyfill],\n        crossOrigin: renderOpts.crossOrigin,\n        noModule: true,\n        nonce: ctx.nonce,\n      }))\n\n  const [preinitScripts, bootstrapScript] = getRequiredScripts(\n    renderOpts.buildManifest,\n    // Why is assetPrefix optional on renderOpts?\n    // @TODO make it default empty string on renderOpts and get rid of it from ctx\n    ctx.assetPrefix,\n    renderOpts.crossOrigin,\n    renderOpts.subresourceIntegrityManifest,\n    getAssetQueryString(ctx, true),\n    ctx.nonce,\n    renderOpts.page\n  )\n\n  const reactServerErrorsByDigest: Map<string, DigestedError> = new Map()\n  // We don't report errors during prerendering through our instrumentation hooks\n  const silenceLogger = !!renderOpts.experimental.isRoutePPREnabled\n  function onHTMLRenderRSCError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components')\n    )\n  }\n  const serverComponentsErrorHandler = createHTMLReactServerErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    silenceLogger,\n    onHTMLRenderRSCError\n  )\n\n  function onHTMLRenderSSRError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'server-rendering')\n    )\n  }\n  const allCapturedErrors: Array<unknown> = []\n  const htmlRendererErrorHandler = createHTMLErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    allCapturedErrors,\n    silenceLogger,\n    onHTMLRenderSSRError\n  )\n\n  let reactServerPrerenderResult: null | ReactServerPrerenderResult = null\n  const setHeader = (name: string, value: string | string[]) => {\n    res.setHeader(name, value)\n\n    metadata.headers ??= {}\n    metadata.headers[name] = res.getHeader(name)\n\n    return res\n  }\n\n  let prerenderStore: PrerenderStore | null = null\n\n  try {\n    if (renderOpts.experimental.dynamicIO) {\n      if (renderOpts.experimental.isRoutePPREnabled) {\n        /**\n         * dynamicIO with PPR\n         *\n         * The general approach is to render the RSC stream first allowing any cache reads to resolve.\n         * Once we have settled all cache reads we restart the render and abort after a single Task.\n         *\n         * Unlike with the non PPR case we can't synchronously abort the render when a dynamic API is used\n         * during the initial render because we need to ensure all caches can be filled as part of the initial Task\n         * and a synchronous abort might prevent us from filling all caches.\n         *\n         * Once the render is complete we allow the SSR render to finish and use a combination of the postponed state\n         * and the reactServerIsDynamic value to determine how to treat the resulting render\n         */\n\n        // Prerender controller represents the lifetime of the prerender.\n        // It will be aborted when a Task is complete or a synchronously aborting\n        // API is called. Notably during cache-filling renders this does not actually\n        // terminate the render itself which will continue until all caches are filled\n        const initialServerPrerenderController = new AbortController()\n\n        // This controller represents the lifetime of the React render call. Notably\n        // during the cache-filling render it is different from the prerender controller\n        // because we don't want to end the react render until all caches are filled.\n        const initialServerRenderController = new AbortController()\n\n        // The cacheSignal helps us track whether caches are still filling or we are ready\n        // to cut the render off.\n        const cacheSignal = new CacheSignal()\n\n        // The resume data cache here should use a fresh instance as it's\n        // performing a fresh prerender. If we get to implementing the\n        // prerendering of an already prerendered page, we should use the passed\n        // resume data cache instead.\n        const prerenderResumeDataCache = createPrerenderResumeDataCache()\n\n        const initialServerPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: implicitTags,\n          renderSignal: initialServerRenderController.signal,\n          controller: initialServerPrerenderController,\n          cacheSignal,\n          dynamicTracking: null,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...implicitTags],\n          prerenderResumeDataCache,\n        })\n\n        // We're not going to use the result of this render because the only time it could be used\n        // is if it completes in a microtask and that's likely very rare for any non-trivial app\n        const initialServerPayload = await workUnitAsyncStorage.run(\n          initialServerPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        const pendingInitialServerResult = workUnitAsyncStorage.run(\n          initialServerPrerenderStore,\n          ComponentMod.prerender,\n          initialServerPayload,\n          clientReferenceManifest.clientModules,\n          {\n            onError: (err: unknown) => {\n              if (initialServerPrerenderController.signal.aborted) {\n                // The render aborted before this error was handled which indicates\n                // the error is caused by unfinished components within the render\n                return\n              } else if (\n                process.env.NEXT_DEBUG_BUILD ||\n                process.env.__NEXT_VERBOSE_LOGGING\n              ) {\n                printDebugThrownValueForProspectiveRender(err, workStore.route)\n              }\n            },\n            // we don't care to track postpones during the prospective render because we need\n            // to always do a final render anyway\n            onPostpone: undefined,\n            // We don't want to stop rendering until the cacheSignal is complete so we pass\n            // a different signal to this render call than is used by dynamic APIs to signify\n            // transitioning out of the prerender environment\n            signal: initialServerRenderController.signal,\n          }\n        )\n\n        await cacheSignal.cacheReady()\n        initialServerRenderController.abort()\n        initialServerPrerenderController.abort()\n\n        let initialServerResult\n        try {\n          initialServerResult = await createReactServerPrerenderResult(\n            pendingInitialServerResult\n          )\n        } catch (err) {\n          if (\n            initialServerRenderController.signal.aborted ||\n            initialServerPrerenderController.signal.aborted\n          ) {\n            // These are expected errors that might error the prerender. we ignore them.\n          } else if (\n            process.env.NEXT_DEBUG_BUILD ||\n            process.env.__NEXT_VERBOSE_LOGGING\n          ) {\n            // We don't normally log these errors because we are going to retry anyway but\n            // it can be useful for debugging Next.js itself to get visibility here when needed\n            printDebugThrownValueForProspectiveRender(err, workStore.route)\n          }\n        }\n\n        if (initialServerResult) {\n          // Before we attempt the SSR initial render we need to ensure all client modules\n          // are already loaded.\n          await warmFlightResponse(\n            initialServerResult.asStream(),\n            clientReferenceManifest\n          )\n\n          const initialClientController = new AbortController()\n          const initialClientPrerenderStore: PrerenderStore = {\n            type: 'prerender',\n            phase: 'render',\n            implicitTags: implicitTags,\n            renderSignal: initialClientController.signal,\n            controller: initialClientController,\n            cacheSignal: null,\n            dynamicTracking: null,\n            revalidate: INFINITE_CACHE,\n            expire: INFINITE_CACHE,\n            stale: INFINITE_CACHE,\n            tags: [...implicitTags],\n            prerenderResumeDataCache,\n          }\n\n          const prerender = require('react-dom/static.edge')\n            .prerender as (typeof import('react-dom/static.edge'))['prerender']\n          await prerenderAndAbortInSequentialTasks(\n            () =>\n              workUnitAsyncStorage.run(\n                initialClientPrerenderStore,\n                prerender,\n                <App\n                  reactServerStream={initialServerResult.asUnclosingStream()}\n                  preinitScripts={preinitScripts}\n                  clientReferenceManifest={clientReferenceManifest}\n                  ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                  nonce={ctx.nonce}\n                />,\n                {\n                  signal: initialClientController.signal,\n                  onError: (err: unknown, _errorInfo: ErrorInfo) => {\n                    if (initialClientController.signal.aborted) {\n                      // These are expected errors that might error the prerender. we ignore them.\n                    } else if (\n                      process.env.NEXT_DEBUG_BUILD ||\n                      process.env.__NEXT_VERBOSE_LOGGING\n                    ) {\n                      // We don't normally log these errors because we are going to retry anyway but\n                      // it can be useful for debugging Next.js itself to get visibility here when needed\n                      printDebugThrownValueForProspectiveRender(\n                        err,\n                        workStore.route\n                      )\n                    }\n                  },\n                  // When debugging the static shell, client-side rendering should be\n                  // disabled to prevent blanking out the page.\n                  bootstrapScripts: renderOpts.isDebugStaticShell\n                    ? []\n                    : [bootstrapScript],\n                }\n              ),\n            () => {\n              initialClientController.abort()\n            }\n          ).catch((err) => {\n            if (\n              initialServerRenderController.signal.aborted ||\n              isPrerenderInterruptedError(err)\n            ) {\n              // These are expected errors that might error the prerender. we ignore them.\n            } else if (\n              process.env.NEXT_DEBUG_BUILD ||\n              process.env.__NEXT_VERBOSE_LOGGING\n            ) {\n              // We don't normally log these errors because we are going to retry anyway but\n              // it can be useful for debugging Next.js itself to get visibility here when needed\n              printDebugThrownValueForProspectiveRender(err, workStore.route)\n            }\n          })\n        }\n\n        let serverIsDynamic = false\n        const finalServerController = new AbortController()\n        const serverDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n\n        const finalRenderPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: implicitTags,\n          renderSignal: finalServerController.signal,\n          controller: finalServerController,\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          dynamicTracking: serverDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...implicitTags],\n          prerenderResumeDataCache,\n        })\n\n        const finalAttemptRSCPayload = await workUnitAsyncStorage.run(\n          finalRenderPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n        const reactServerResult = (reactServerPrerenderResult =\n          await createReactServerPrerenderResult(\n            prerenderAndAbortInSequentialTasks(\n              () =>\n                workUnitAsyncStorage.run(\n                  // The store to scope\n                  finalRenderPrerenderStore,\n                  // The function to run\n                  ComponentMod.prerender,\n                  // ... the arguments for the function to run\n                  finalAttemptRSCPayload,\n                  clientReferenceManifest.clientModules,\n                  {\n                    onError: (err: unknown) => {\n                      if (finalServerController.signal.aborted) {\n                        serverIsDynamic = true\n                        return\n                      }\n\n                      return serverComponentsErrorHandler(err)\n                    },\n                    signal: finalServerController.signal,\n                  }\n                ),\n              () => {\n                finalServerController.abort()\n              }\n            )\n          ))\n\n        const clientDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n        const finalClientController = new AbortController()\n        const finalClientPrerenderStore: PrerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: implicitTags,\n          renderSignal: finalClientController.signal,\n          controller: finalClientController,\n          // For HTML Generation we don't need to track cache reads (RSC only)\n          cacheSignal: null,\n          dynamicTracking: clientDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...implicitTags],\n          prerenderResumeDataCache,\n        }\n\n        let clientIsDynamic = false\n        let dynamicValidation = createDynamicValidationState()\n\n        const prerender = require('react-dom/static.edge')\n          .prerender as (typeof import('react-dom/static.edge'))['prerender']\n        let { prelude, postponed } = await prerenderAndAbortInSequentialTasks(\n          () =>\n            workUnitAsyncStorage.run(\n              finalClientPrerenderStore,\n              prerender,\n              <App\n                reactServerStream={reactServerResult.asUnclosingStream()}\n                preinitScripts={preinitScripts}\n                clientReferenceManifest={clientReferenceManifest}\n                ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                nonce={ctx.nonce}\n              />,\n              {\n                signal: finalClientController.signal,\n                onError: (err: unknown, errorInfo: ErrorInfo) => {\n                  if (\n                    isPrerenderInterruptedError(err) ||\n                    finalClientController.signal.aborted\n                  ) {\n                    clientIsDynamic = true\n\n                    const componentStack: string | undefined = (\n                      errorInfo as any\n                    ).componentStack\n                    if (typeof componentStack === 'string') {\n                      trackAllowedDynamicAccess(\n                        workStore.route,\n                        componentStack,\n                        dynamicValidation,\n                        serverDynamicTracking,\n                        clientDynamicTracking\n                      )\n                    }\n                    return\n                  }\n\n                  return htmlRendererErrorHandler(err, errorInfo)\n                },\n                onHeaders: (headers: Headers) => {\n                  headers.forEach((value, key) => {\n                    setHeader(key, value)\n                  })\n                },\n                maxHeadersLength: renderOpts.reactMaxHeadersLength,\n                // When debugging the static shell, client-side rendering should be\n                // disabled to prevent blanking out the page.\n                bootstrapScripts: renderOpts.isDebugStaticShell\n                  ? []\n                  : [bootstrapScript],\n              }\n            ),\n          () => {\n            finalClientController.abort()\n          }\n        )\n\n        throwIfDisallowedDynamic(\n          workStore.route,\n          dynamicValidation,\n          serverDynamicTracking,\n          clientDynamicTracking\n        )\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n\n        const flightData = await streamToBuffer(reactServerResult.asStream())\n        metadata.flightData = flightData\n        metadata.segmentFlightData = await collectSegmentData(\n          flightData,\n          finalRenderPrerenderStore,\n          ComponentMod,\n          renderOpts\n        )\n\n        if (serverIsDynamic || clientIsDynamic) {\n          if (postponed != null) {\n            // Dynamic HTML case\n            metadata.postponed = await getDynamicHTMLPostponedState(\n              postponed,\n              fallbackRouteParams,\n              prerenderResumeDataCache\n            )\n          } else {\n            // Dynamic Data case\n            metadata.postponed = await getDynamicDataPostponedState(\n              prerenderResumeDataCache\n            )\n          }\n          reactServerResult.consume()\n          return {\n            digestErrorsMap: reactServerErrorsByDigest,\n            ssrErrors: allCapturedErrors,\n            stream: await continueDynamicPrerender(prelude, {\n              getServerInsertedHTML,\n            }),\n            dynamicAccess: consumeDynamicAccess(\n              serverDynamicTracking,\n              clientDynamicTracking\n            ),\n            // TODO: Should this include the SSR pass?\n            collectedRevalidate: finalRenderPrerenderStore.revalidate,\n            collectedExpire: finalRenderPrerenderStore.expire,\n            collectedStale: finalRenderPrerenderStore.stale,\n            collectedTags: finalRenderPrerenderStore.tags,\n          }\n        } else {\n          // Static case\n          if (workStore.forceDynamic) {\n            throw new StaticGenBailoutError(\n              'Invariant: a Page with `dynamic = \"force-dynamic\"` did not trigger the dynamic pathway. This is a bug in Next.js'\n            )\n          }\n\n          let htmlStream = prelude\n          if (postponed != null) {\n            // We postponed but nothing dynamic was used. We resume the render now and immediately abort it\n            // so we can set all the postponed boundaries to client render mode before we store the HTML response\n            const resume = require('react-dom/server.edge')\n              .resume as (typeof import('react-dom/server.edge'))['resume']\n\n            // We don't actually want to render anything so we just pass a stream\n            // that never resolves. The resume call is going to abort immediately anyway\n            const foreverStream = new ReadableStream<Uint8Array>()\n\n            const resumeStream = await resume(\n              <App\n                reactServerStream={foreverStream}\n                preinitScripts={() => {}}\n                clientReferenceManifest={clientReferenceManifest}\n                ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                nonce={ctx.nonce}\n              />,\n              JSON.parse(JSON.stringify(postponed)),\n              {\n                signal: createPostponedAbortSignal('static prerender resume'),\n                onError: htmlRendererErrorHandler,\n                nonce: ctx.nonce,\n              }\n            )\n\n            // First we write everything from the prerender, then we write everything from the aborted resume render\n            htmlStream = chainStreams(prelude, resumeStream)\n          }\n\n          return {\n            digestErrorsMap: reactServerErrorsByDigest,\n            ssrErrors: allCapturedErrors,\n            stream: await continueStaticPrerender(htmlStream, {\n              inlinedDataStream: createInlinedDataReadableStream(\n                reactServerResult.consumeAsStream(),\n                ctx.nonce,\n                formState\n              ),\n              getServerInsertedHTML,\n            }),\n            dynamicAccess: consumeDynamicAccess(\n              serverDynamicTracking,\n              clientDynamicTracking\n            ),\n            // TODO: Should this include the SSR pass?\n            collectedRevalidate: finalRenderPrerenderStore.revalidate,\n            collectedExpire: finalRenderPrerenderStore.expire,\n            collectedStale: finalRenderPrerenderStore.stale,\n            collectedTags: finalRenderPrerenderStore.tags,\n          }\n        }\n      } else {\n        /**\n         * dynamicIO without PPR\n         *\n         * The general approach is to render the RSC tree first allowing for any inflight\n         * caches to resolve. Once we have settled inflight caches we can check and see if any\n         * synchronous dynamic APIs were used. If so we don't need to bother doing anything more\n         * because the page will be dynamic on re-render anyway\n         *\n         * If no sync dynamic APIs were used we then re-render and abort after a single Task.\n         * If the render errors we know that the page has some dynamic IO. This assumes and relies\n         * upon caches reading from a in process memory cache and resolving in a microtask. While this\n         * is true from our own default cache implementation and if you don't exceed our LRU size it\n         * might not be true for custom cache implementations.\n         *\n         * Future implementations can do some different strategies during build like using IPC to\n         * synchronously fill caches during this special rendering mode. For now this heuristic should work\n         */\n\n        const cache = workStore.incrementalCache\n        if (!cache) {\n          throw new Error(\n            'Expected incremental cache to exist. This is a bug in Next.js'\n          )\n        }\n\n        // Prerender controller represents the lifetime of the prerender.\n        // It will be aborted when a Task is complete or a synchronously aborting\n        // API is called. Notably during cache-filling renders this does not actually\n        // terminate the render itself which will continue until all caches are filled\n        const initialServerPrerenderController = new AbortController()\n\n        // This controller represents the lifetime of the React render call. Notably\n        // during the cache-filling render it is different from the prerender controller\n        // because we don't want to end the react render until all caches are filled.\n        const initialServerRenderController = new AbortController()\n\n        const cacheSignal = new CacheSignal()\n        const prerenderResumeDataCache = createPrerenderResumeDataCache()\n\n        const initialServerPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: implicitTags,\n          renderSignal: initialServerRenderController.signal,\n          controller: initialServerPrerenderController,\n          cacheSignal,\n          dynamicTracking: null,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...implicitTags],\n          prerenderResumeDataCache,\n        })\n\n        const initialClientController = new AbortController()\n        const initialClientPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: implicitTags,\n          renderSignal: initialClientController.signal,\n          controller: initialClientController,\n          cacheSignal,\n          dynamicTracking: null,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...implicitTags],\n          prerenderResumeDataCache,\n        })\n\n        // We're not going to use the result of this render because the only time it could be used\n        // is if it completes in a microtask and that's likely very rare for any non-trivial app\n        const firstAttemptRSCPayload = await workUnitAsyncStorage.run(\n          initialServerPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        let initialServerStream\n        try {\n          initialServerStream = workUnitAsyncStorage.run(\n            initialServerPrerenderStore,\n            ComponentMod.renderToReadableStream,\n            firstAttemptRSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: (err: unknown) => {\n                if (\n                  initialServerPrerenderController.signal.aborted ||\n                  initialServerRenderController.signal.aborted\n                ) {\n                  // The render aborted before this error was handled which indicates\n                  // the error is caused by unfinished components within the render\n                  return\n                } else if (\n                  process.env.NEXT_DEBUG_BUILD ||\n                  process.env.__NEXT_VERBOSE_LOGGING\n                ) {\n                  printDebugThrownValueForProspectiveRender(\n                    err,\n                    workStore.route\n                  )\n                }\n              },\n              signal: initialServerRenderController.signal,\n            }\n          )\n        } catch (err: unknown) {\n          if (\n            initialServerPrerenderController.signal.aborted ||\n            initialServerRenderController.signal.aborted\n          ) {\n            // These are expected errors that might error the prerender. we ignore them.\n          } else if (\n            process.env.NEXT_DEBUG_BUILD ||\n            process.env.__NEXT_VERBOSE_LOGGING\n          ) {\n            // We don't normally log these errors because we are going to retry anyway but\n            // it can be useful for debugging Next.js itself to get visibility here when needed\n            printDebugThrownValueForProspectiveRender(err, workStore.route)\n          }\n        }\n\n        if (initialServerStream) {\n          const [warmupStream, renderStream] = initialServerStream.tee()\n          initialServerStream = null\n          // Before we attempt the SSR initial render we need to ensure all client modules\n          // are already loaded.\n          await warmFlightResponse(warmupStream, clientReferenceManifest)\n\n          const prerender = require('react-dom/static.edge')\n            .prerender as (typeof import('react-dom/static.edge'))['prerender']\n          const pendingInitialClientResult = workUnitAsyncStorage.run(\n            initialClientPrerenderStore,\n            prerender,\n            <App\n              reactServerStream={renderStream}\n              preinitScripts={preinitScripts}\n              clientReferenceManifest={clientReferenceManifest}\n              ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n              nonce={ctx.nonce}\n            />,\n            {\n              signal: initialClientController.signal,\n              onError: (err: unknown, _errorInfo: ErrorInfo) => {\n                if (initialClientController.signal.aborted) {\n                  // These are expected errors that might error the prerender. we ignore them.\n                } else if (\n                  process.env.NEXT_DEBUG_BUILD ||\n                  process.env.__NEXT_VERBOSE_LOGGING\n                ) {\n                  // We don't normally log these errors because we are going to retry anyway but\n                  // it can be useful for debugging Next.js itself to get visibility here when needed\n                  printDebugThrownValueForProspectiveRender(\n                    err,\n                    workStore.route\n                  )\n                }\n              },\n              // When debugging the static shell, client-side rendering should be\n              // disabled to prevent blanking out the page.\n              bootstrapScripts: renderOpts.isDebugStaticShell\n                ? []\n                : [bootstrapScript],\n            }\n          )\n          pendingInitialClientResult.catch((err: unknown) => {\n            if (initialClientController.signal.aborted) {\n              // We aborted the render normally and can ignore this error\n            } else {\n              // We're going to retry to so we normally would suppress this error but\n              // when verbose logging is on we print it\n              if (process.env.__NEXT_VERBOSE_LOGGING) {\n                printDebugThrownValueForProspectiveRender(err, workStore.route)\n              }\n            }\n          })\n        }\n\n        await cacheSignal.cacheReady()\n        // It is important that we abort the SSR render first to avoid\n        // connection closed errors from having an incomplete RSC stream\n        initialClientController.abort()\n        initialServerRenderController.abort()\n        initialServerPrerenderController.abort()\n\n        // We've now filled caches and triggered any inadvertant sync bailouts\n        // due to lazy module initialization. We can restart our render to capture results\n\n        let serverIsDynamic = false\n        const finalServerController = new AbortController()\n        const serverDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n\n        const finalServerPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: implicitTags,\n          renderSignal: finalServerController.signal,\n          controller: finalServerController,\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          dynamicTracking: serverDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...implicitTags],\n          prerenderResumeDataCache,\n        })\n\n        let clientIsDynamic = false\n        const finalClientController = new AbortController()\n        const clientDynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n        const dynamicValidation = createDynamicValidationState()\n\n        const finalClientPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: implicitTags,\n          renderSignal: finalClientController.signal,\n          controller: finalClientController,\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          dynamicTracking: clientDynamicTracking,\n          revalidate: INFINITE_CACHE,\n          expire: INFINITE_CACHE,\n          stale: INFINITE_CACHE,\n          tags: [...implicitTags],\n          prerenderResumeDataCache,\n        })\n\n        const finalServerPayload = await workUnitAsyncStorage.run(\n          finalServerPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        const serverPrerenderStreamResult = await prerenderServerWithPhases(\n          finalServerController.signal,\n          () =>\n            workUnitAsyncStorage.run(\n              finalServerPrerenderStore,\n              ComponentMod.renderToReadableStream,\n              finalServerPayload,\n              clientReferenceManifest.clientModules,\n              {\n                onError: (err: unknown) => {\n                  if (finalServerController.signal.aborted) {\n                    serverIsDynamic = true\n                    if (isPrerenderInterruptedError(err)) {\n                      return err.digest\n                    }\n                    return\n                  }\n\n                  return serverComponentsErrorHandler(err)\n                },\n                signal: finalServerController.signal,\n              }\n            ),\n          () => {\n            finalServerController.abort()\n          }\n        )\n\n        let htmlStream\n        const serverPhasedStream = serverPrerenderStreamResult.asPhasedStream()\n        try {\n          const prerender = require('react-dom/static.edge')\n            .prerender as (typeof import('react-dom/static.edge'))['prerender']\n          const result = await prerenderClientWithPhases(\n            () =>\n              workUnitAsyncStorage.run(\n                finalClientPrerenderStore,\n                prerender,\n                <App\n                  reactServerStream={serverPhasedStream}\n                  preinitScripts={preinitScripts}\n                  clientReferenceManifest={clientReferenceManifest}\n                  ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                  nonce={ctx.nonce}\n                />,\n                {\n                  signal: finalClientController.signal,\n                  onError: (err: unknown, errorInfo: ErrorInfo) => {\n                    if (\n                      isPrerenderInterruptedError(err) ||\n                      finalClientController.signal.aborted\n                    ) {\n                      clientIsDynamic = true\n\n                      const componentStack: string | undefined = (\n                        errorInfo as any\n                      ).componentStack\n                      if (typeof componentStack === 'string') {\n                        trackAllowedDynamicAccess(\n                          workStore.route,\n                          componentStack,\n                          dynamicValidation,\n                          serverDynamicTracking,\n                          clientDynamicTracking\n                        )\n                      }\n                      return\n                    }\n\n                    return htmlRendererErrorHandler(err, errorInfo)\n                  },\n                  // When debugging the static shell, client-side rendering should be\n                  // disabled to prevent blanking out the page.\n                  bootstrapScripts: renderOpts.isDebugStaticShell\n                    ? []\n                    : [bootstrapScript],\n                }\n              ),\n            () => {\n              finalClientController.abort()\n              serverPhasedStream.assertExhausted()\n            }\n          )\n          htmlStream = result.prelude\n        } catch (err) {\n          if (\n            isPrerenderInterruptedError(err) ||\n            finalClientController.signal.aborted\n          ) {\n            // we don't have a root because the abort errored in the root. We can just ignore this error\n          } else {\n            // This error is something else and should bubble up\n            throw err\n          }\n        }\n\n        throwIfDisallowedDynamic(\n          workStore.route,\n          dynamicValidation,\n          serverDynamicTracking,\n          clientDynamicTracking\n        )\n\n        if (serverIsDynamic || clientIsDynamic) {\n          const dynamicReason = serverIsDynamic\n            ? getFirstDynamicReason(serverDynamicTracking)\n            : getFirstDynamicReason(clientDynamicTracking)\n          if (dynamicReason) {\n            throw new DynamicServerError(\n              `Route \"${workStore.route}\" couldn't be rendered statically because it used \\`${dynamicReason}\\`. See more info here: https://nextjs.org/docs/messages/next-prerender-data`\n            )\n          } else {\n            throw new DynamicServerError(\n              `Route \"${workStore.route}\" couldn't be rendered statically it accessed data without explicitly caching it. See more info here: https://nextjs.org/docs/messages/next-prerender-data`\n            )\n          }\n        }\n\n        const flightData = await streamToBuffer(\n          serverPrerenderStreamResult.asStream()\n        )\n        metadata.flightData = flightData\n        metadata.segmentFlightData = await collectSegmentData(\n          flightData,\n          finalClientPrerenderStore,\n          ComponentMod,\n          renderOpts\n        )\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n        const validateRootLayout = renderOpts.dev\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueFizzStream(htmlStream!, {\n            inlinedDataStream: createInlinedDataReadableStream(\n              serverPrerenderStreamResult.asStream(),\n              ctx.nonce,\n              formState\n            ),\n            isStaticGeneration: true,\n            getServerInsertedHTML,\n            serverInsertedHTMLToHead: true,\n            validateRootLayout,\n          }),\n          dynamicAccess: consumeDynamicAccess(\n            serverDynamicTracking,\n            clientDynamicTracking\n          ),\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: finalServerPrerenderStore.revalidate,\n          collectedExpire: finalServerPrerenderStore.expire,\n          collectedStale: finalServerPrerenderStore.stale,\n          collectedTags: finalServerPrerenderStore.tags,\n        }\n      }\n    } else if (renderOpts.experimental.isRoutePPREnabled) {\n      // We're statically generating with PPR and need to do dynamic tracking\n      let dynamicTracking = createDynamicTrackingState(\n        renderOpts.isDebugDynamicAccesses\n      )\n\n      const prerenderResumeDataCache = createPrerenderResumeDataCache()\n      const reactServerPrerenderStore: PrerenderStore = (prerenderStore = {\n        type: 'prerender-ppr',\n        phase: 'render',\n        implicitTags: implicitTags,\n        dynamicTracking,\n        revalidate: INFINITE_CACHE,\n        expire: INFINITE_CACHE,\n        stale: INFINITE_CACHE,\n        tags: [...implicitTags],\n        prerenderResumeDataCache,\n      })\n      const RSCPayload = await workUnitAsyncStorage.run(\n        reactServerPrerenderStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n      const reactServerResult = (reactServerPrerenderResult =\n        await createReactServerPrerenderResultFromRender(\n          workUnitAsyncStorage.run(\n            reactServerPrerenderStore,\n            ComponentMod.renderToReadableStream,\n            // ... the arguments for the function to run\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n            }\n          )\n        ))\n\n      const ssrPrerenderStore: PrerenderStore = {\n        type: 'prerender-ppr',\n        phase: 'render',\n        implicitTags: implicitTags,\n        dynamicTracking,\n        revalidate: INFINITE_CACHE,\n        expire: INFINITE_CACHE,\n        stale: INFINITE_CACHE,\n        tags: [...implicitTags],\n        prerenderResumeDataCache,\n      }\n      const prerender = require('react-dom/static.edge')\n        .prerender as (typeof import('react-dom/static.edge'))['prerender']\n      const { prelude, postponed } = await workUnitAsyncStorage.run(\n        ssrPrerenderStore,\n        prerender,\n        <App\n          reactServerStream={reactServerResult.asUnclosingStream()}\n          preinitScripts={preinitScripts}\n          clientReferenceManifest={clientReferenceManifest}\n          ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n          nonce={ctx.nonce}\n        />,\n        {\n          onError: htmlRendererErrorHandler,\n          onHeaders: (headers: Headers) => {\n            headers.forEach((value, key) => {\n              setHeader(key, value)\n            })\n          },\n          maxHeadersLength: renderOpts.reactMaxHeadersLength,\n          // When debugging the static shell, client-side rendering should be\n          // disabled to prevent blanking out the page.\n          bootstrapScripts: renderOpts.isDebugStaticShell\n            ? []\n            : [bootstrapScript],\n        }\n      )\n      const getServerInsertedHTML = makeGetServerInsertedHTML({\n        polyfills,\n        renderServerInsertedHTML,\n        serverCapturedErrors: allCapturedErrors,\n        basePath: renderOpts.basePath,\n        tracingMetadata: tracingMetadata,\n      })\n\n      // After awaiting here we've waited for the entire RSC render to complete. Crucially this means\n      // that when we detect whether we've used dynamic APIs below we know we'll have picked up even\n      // parts of the React Server render that might not be used in the SSR render.\n      const flightData = await streamToBuffer(reactServerResult.asStream())\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        metadata.flightData = flightData\n        metadata.segmentFlightData = await collectSegmentData(\n          flightData,\n          ssrPrerenderStore,\n          ComponentMod,\n          renderOpts\n        )\n      }\n\n      /**\n       * When prerendering there are three outcomes to consider\n       *\n       *   Dynamic HTML:      The prerender has dynamic holes (caused by using Next.js Dynamic Rendering APIs)\n       *                      We will need to resume this result when requests are handled and we don't include\n       *                      any server inserted HTML or inlined flight data in the static HTML\n       *\n       *   Dynamic Data:      The prerender has no dynamic holes but dynamic APIs were used. We will not\n       *                      resume this render when requests are handled but we will generate new inlined\n       *                      flight data since it is dynamic and differences may end up reconciling on the client\n       *\n       *   Static:            The prerender has no dynamic holes and no dynamic APIs were used. We statically encode\n       *                      all server inserted HTML and flight data\n       */\n      // First we check if we have any dynamic holes in our HTML prerender\n      if (accessedDynamicData(dynamicTracking.dynamicAccesses)) {\n        if (postponed != null) {\n          // Dynamic HTML case.\n          metadata.postponed = await getDynamicHTMLPostponedState(\n            postponed,\n            fallbackRouteParams,\n            prerenderResumeDataCache\n          )\n        } else {\n          // Dynamic Data case.\n          metadata.postponed = await getDynamicDataPostponedState(\n            prerenderResumeDataCache\n          )\n        }\n        // Regardless of whether this is the Dynamic HTML or Dynamic Data case we need to ensure we include\n        // server inserted html in the static response because the html that is part of the prerender may depend on it\n        // It is possible in the set of stream transforms for Dynamic HTML vs Dynamic Data may differ but currently both states\n        // require the same set so we unify the code path here\n        reactServerResult.consume()\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueDynamicPrerender(prelude, {\n            getServerInsertedHTML,\n          }),\n          dynamicAccess: dynamicTracking.dynamicAccesses,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedExpire: reactServerPrerenderStore.expire,\n          collectedStale: reactServerPrerenderStore.stale,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      } else if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n        // Rendering the fallback case.\n        metadata.postponed = await getDynamicDataPostponedState(\n          prerenderResumeDataCache\n        )\n\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueDynamicPrerender(prelude, {\n            getServerInsertedHTML,\n          }),\n          dynamicAccess: dynamicTracking.dynamicAccesses,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedExpire: reactServerPrerenderStore.expire,\n          collectedStale: reactServerPrerenderStore.stale,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      } else {\n        // Static case\n        // We still have not used any dynamic APIs. At this point we can produce an entirely static prerender response\n        if (workStore.forceDynamic) {\n          throw new StaticGenBailoutError(\n            'Invariant: a Page with `dynamic = \"force-dynamic\"` did not trigger the dynamic pathway. This is a bug in Next.js'\n          )\n        }\n\n        let htmlStream = prelude\n        if (postponed != null) {\n          // We postponed but nothing dynamic was used. We resume the render now and immediately abort it\n          // so we can set all the postponed boundaries to client render mode before we store the HTML response\n          const resume = require('react-dom/server.edge')\n            .resume as (typeof import('react-dom/server.edge'))['resume']\n\n          // We don't actually want to render anything so we just pass a stream\n          // that never resolves. The resume call is going to abort immediately anyway\n          const foreverStream = new ReadableStream<Uint8Array>()\n\n          const resumeStream = await resume(\n            <App\n              reactServerStream={foreverStream}\n              preinitScripts={() => {}}\n              clientReferenceManifest={clientReferenceManifest}\n              ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n              nonce={ctx.nonce}\n            />,\n            JSON.parse(JSON.stringify(postponed)),\n            {\n              signal: createPostponedAbortSignal('static prerender resume'),\n              onError: htmlRendererErrorHandler,\n              nonce: ctx.nonce,\n            }\n          )\n\n          // First we write everything from the prerender, then we write everything from the aborted resume render\n          htmlStream = chainStreams(prelude, resumeStream)\n        }\n\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueStaticPrerender(htmlStream, {\n            inlinedDataStream: createInlinedDataReadableStream(\n              reactServerResult.consumeAsStream(),\n              ctx.nonce,\n              formState\n            ),\n            getServerInsertedHTML,\n          }),\n          dynamicAccess: dynamicTracking.dynamicAccesses,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedExpire: reactServerPrerenderStore.expire,\n          collectedStale: reactServerPrerenderStore.stale,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      }\n    } else {\n      const prerenderLegacyStore: PrerenderStore = (prerenderStore = {\n        type: 'prerender-legacy',\n        phase: 'render',\n        implicitTags: implicitTags,\n        revalidate: INFINITE_CACHE,\n        expire: INFINITE_CACHE,\n        stale: INFINITE_CACHE,\n        tags: [...implicitTags],\n      })\n      // This is a regular static generation. We don't do dynamic tracking because we rely on\n      // the old-school dynamic error handling to bail out of static generation\n      const RSCPayload = await workUnitAsyncStorage.run(\n        prerenderLegacyStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n      const reactServerResult = (reactServerPrerenderResult =\n        await createReactServerPrerenderResultFromRender(\n          workUnitAsyncStorage.run(\n            prerenderLegacyStore,\n            ComponentMod.renderToReadableStream,\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n            }\n          )\n        ))\n\n      const renderToReadableStream = require('react-dom/server.edge')\n        .renderToReadableStream as (typeof import('react-dom/server.edge'))['renderToReadableStream']\n\n      const htmlStream = await workUnitAsyncStorage.run(\n        prerenderLegacyStore,\n        renderToReadableStream,\n        <App\n          reactServerStream={reactServerResult.asUnclosingStream()}\n          preinitScripts={preinitScripts}\n          clientReferenceManifest={clientReferenceManifest}\n          ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n          nonce={ctx.nonce}\n        />,\n        {\n          onError: htmlRendererErrorHandler,\n          nonce: ctx.nonce,\n          // When debugging the static shell, client-side rendering should be\n          // disabled to prevent blanking out the page.\n          bootstrapScripts: renderOpts.isDebugStaticShell\n            ? []\n            : [bootstrapScript],\n        }\n      )\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        const flightData = await streamToBuffer(reactServerResult.asStream())\n        metadata.flightData = flightData\n        metadata.segmentFlightData = await collectSegmentData(\n          flightData,\n          prerenderLegacyStore,\n          ComponentMod,\n          renderOpts\n        )\n      }\n\n      const getServerInsertedHTML = makeGetServerInsertedHTML({\n        polyfills,\n        renderServerInsertedHTML,\n        serverCapturedErrors: allCapturedErrors,\n        basePath: renderOpts.basePath,\n        tracingMetadata: tracingMetadata,\n      })\n      return {\n        digestErrorsMap: reactServerErrorsByDigest,\n        ssrErrors: allCapturedErrors,\n        stream: await continueFizzStream(htmlStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            reactServerResult.consumeAsStream(),\n            ctx.nonce,\n            formState\n          ),\n          isStaticGeneration: true,\n          getServerInsertedHTML,\n          serverInsertedHTMLToHead: true,\n        }),\n        // TODO: Should this include the SSR pass?\n        collectedRevalidate: prerenderLegacyStore.revalidate,\n        collectedExpire: prerenderLegacyStore.expire,\n        collectedStale: prerenderLegacyStore.stale,\n        collectedTags: prerenderLegacyStore.tags,\n      }\n    }\n  } catch (err) {\n    if (\n      isStaticGenBailoutError(err) ||\n      (typeof err === 'object' &&\n        err !== null &&\n        'message' in err &&\n        typeof err.message === 'string' &&\n        err.message.includes(\n          'https://nextjs.org/docs/advanced-features/static-html-export'\n        ))\n    ) {\n      // Ensure that \"next dev\" prints the red error overlay\n      throw err\n    }\n\n    // If this is a static generation error, we need to throw it so that it\n    // can be handled by the caller if we're in static generation mode.\n    if (isDynamicServerError(err)) {\n      throw err\n    }\n\n    // If a bailout made it to this point, it means it wasn't wrapped inside\n    // a suspense boundary.\n    const shouldBailoutToCSR = isBailoutToCSRError(err)\n    if (shouldBailoutToCSR) {\n      const stack = getStackWithoutErrorMessage(err)\n      error(\n        `${err.reason} should be wrapped in a suspense boundary at page \"${ctx.pagePath}\". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\\n${stack}`\n      )\n\n      throw err\n    }\n\n    // If we errored when we did not have an RSC stream to read from. This is\n    // not just a render error, we need to throw early.\n    if (reactServerPrerenderResult === null) {\n      throw err\n    }\n\n    let errorType: 'not-found' | 'redirect' | undefined\n\n    if (isNotFoundError(err)) {\n      errorType = 'not-found'\n      res.statusCode = 404\n    } else if (isRedirectError(err)) {\n      errorType = 'redirect'\n      res.statusCode = getRedirectStatusCodeFromError(err)\n\n      const redirectUrl = addPathPrefix(\n        getURLFromRedirectError(err),\n        renderOpts.basePath\n      )\n\n      setHeader('location', redirectUrl)\n    } else if (!shouldBailoutToCSR) {\n      res.statusCode = 500\n    }\n\n    const [errorPreinitScripts, errorBootstrapScript] = getRequiredScripts(\n      renderOpts.buildManifest,\n      ctx.assetPrefix,\n      renderOpts.crossOrigin,\n      renderOpts.subresourceIntegrityManifest,\n      getAssetQueryString(ctx, false),\n      ctx.nonce,\n      '/_not-found/page'\n    )\n\n    const prerenderLegacyStore: PrerenderStore = (prerenderStore = {\n      type: 'prerender-legacy',\n      phase: 'render',\n      implicitTags: implicitTags,\n      revalidate: INFINITE_CACHE,\n      expire: INFINITE_CACHE,\n      stale: INFINITE_CACHE,\n      tags: [...implicitTags],\n    })\n    const errorRSCPayload = await workUnitAsyncStorage.run(\n      prerenderLegacyStore,\n      getErrorRSCPayload,\n      tree,\n      ctx,\n      errorType\n    )\n\n    const errorServerStream = workUnitAsyncStorage.run(\n      prerenderLegacyStore,\n      ComponentMod.renderToReadableStream,\n      errorRSCPayload,\n      clientReferenceManifest.clientModules,\n      {\n        onError: serverComponentsErrorHandler,\n      }\n    )\n\n    try {\n      const fizzStream = await renderToInitialFizzStream({\n        ReactDOMServer: require('react-dom/server.edge'),\n        element: (\n          <AppWithoutContext\n            reactServerStream={errorServerStream}\n            preinitScripts={errorPreinitScripts}\n            clientReferenceManifest={clientReferenceManifest}\n            nonce={ctx.nonce}\n          />\n        ),\n        streamOptions: {\n          nonce: ctx.nonce,\n          // Include hydration scripts in the HTML\n          bootstrapScripts: [errorBootstrapScript],\n          formState,\n        },\n      })\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        const flightData = await streamToBuffer(\n          reactServerPrerenderResult.asStream()\n        )\n        metadata.flightData = flightData\n        metadata.segmentFlightData = await collectSegmentData(\n          flightData,\n          prerenderLegacyStore,\n          ComponentMod,\n          renderOpts\n        )\n      }\n\n      const validateRootLayout = renderOpts.dev\n      return {\n        // Returning the error that was thrown so it can be used to handle\n        // the response in the caller.\n        digestErrorsMap: reactServerErrorsByDigest,\n        ssrErrors: allCapturedErrors,\n        stream: await continueFizzStream(fizzStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            // This is intentionally using the readable datastream from the\n            // main render rather than the flight data from the error page\n            // render\n            reactServerPrerenderResult.consumeAsStream(),\n            ctx.nonce,\n            formState\n          ),\n          isStaticGeneration: true,\n          getServerInsertedHTML: makeGetServerInsertedHTML({\n            polyfills,\n            renderServerInsertedHTML,\n            serverCapturedErrors: [],\n            basePath: renderOpts.basePath,\n            tracingMetadata: tracingMetadata,\n          }),\n          serverInsertedHTMLToHead: true,\n          validateRootLayout,\n        }),\n        dynamicAccess: null,\n        collectedRevalidate:\n          prerenderStore !== null ? prerenderStore.revalidate : INFINITE_CACHE,\n        collectedExpire:\n          prerenderStore !== null ? prerenderStore.expire : INFINITE_CACHE,\n        collectedStale:\n          prerenderStore !== null ? prerenderStore.stale : INFINITE_CACHE,\n        collectedTags: prerenderStore !== null ? prerenderStore.tags : null,\n      }\n    } catch (finalErr: any) {\n      if (process.env.NODE_ENV === 'development' && isNotFoundError(finalErr)) {\n        const bailOnNotFound: typeof import('../../client/components/dev-root-not-found-boundary').bailOnNotFound =\n          require('../../client/components/dev-root-not-found-boundary').bailOnNotFound\n        bailOnNotFound()\n      }\n      throw finalErr\n    }\n  }\n}\n\nconst loadingChunks: Set<Promise<unknown>> = new Set()\nconst chunkListeners: Array<(x?: unknown) => void> = []\n\nfunction trackChunkLoading(load: Promise<unknown>) {\n  loadingChunks.add(load)\n  load.finally(() => {\n    if (loadingChunks.has(load)) {\n      loadingChunks.delete(load)\n      if (loadingChunks.size === 0) {\n        // We are not currently loading any chunks. We can notify all listeners\n        for (let i = 0; i < chunkListeners.length; i++) {\n          chunkListeners[i]()\n        }\n        chunkListeners.length = 0\n      }\n    }\n  })\n}\n\nexport async function warmFlightResponse(\n  flightStream: ReadableStream<Uint8Array>,\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n) {\n  let createFromReadableStream\n  if (process.env.TURBOPACK) {\n    createFromReadableStream =\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-turbopack/client.edge').createFromReadableStream\n  } else {\n    createFromReadableStream =\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge').createFromReadableStream\n  }\n\n  try {\n    createFromReadableStream(flightStream, {\n      serverConsumerManifest: {\n        moduleLoading: clientReferenceManifest.moduleLoading,\n        moduleMap: clientReferenceManifest.ssrModuleMapping,\n        serverModuleMap: null,\n      },\n    })\n  } catch {\n    // We don't want to handle errors here but we don't want it to\n    // interrupt the outer flow. We simply ignore it here and expect\n    // it will bubble up during a render\n  }\n\n  // We'll wait at least one task and then if no chunks have started to load\n  // we'll we can infer that there are none to load from this flight response\n  trackChunkLoading(waitAtLeastOneReactRenderTask())\n  return new Promise((r) => {\n    chunkListeners.push(r)\n  })\n}\n\nconst getGlobalErrorStyles = async (\n  tree: LoaderTree,\n  ctx: AppRenderContext\n): Promise<React.ReactNode | undefined> => {\n  const {\n    modules: { 'global-error': globalErrorModule },\n  } = parseLoaderTree(tree)\n\n  let globalErrorStyles\n  if (globalErrorModule) {\n    const [, styles] = await createComponentStylesAndScripts({\n      ctx,\n      filePath: globalErrorModule[1],\n      getComponent: globalErrorModule[0],\n      injectedCSS: new Set(),\n      injectedJS: new Set(),\n    })\n    globalErrorStyles = styles\n  }\n\n  return globalErrorStyles\n}\n\nasync function collectSegmentData(\n  fullPageDataBuffer: Buffer,\n  prerenderStore: PrerenderStore,\n  ComponentMod: AppPageModule,\n  renderOpts: RenderOpts\n): Promise<Map<string, Buffer> | undefined> {\n  // Per-segment prefetch data\n  //\n  // All of the segments for a page are generated simultaneously, including\n  // during revalidations. This is to ensure consistency, because it's\n  // possible for a mismatch between a layout and page segment can cause the\n  // client to error during rendering. We want to preserve the ability of the\n  // client to recover from such a mismatch by re-requesting all the segments\n  // to get a consistent view of the page.\n  //\n  // For performance, we reuse the Flight output that was created when\n  // generating the initial page HTML. The Flight stream for the whole page is\n  // decomposed into a separate stream per segment.\n\n  const clientReferenceManifest = renderOpts.clientReferenceManifest\n  if (\n    !clientReferenceManifest ||\n    renderOpts.experimental.isRoutePPREnabled !== true\n  ) {\n    return\n  }\n\n  // Manifest passed to the Flight client for reading the full-page Flight\n  // stream. Based off similar code in use-cache-wrapper.ts.\n  const isEdgeRuntime = process.env.NEXT_RUNTIME === 'edge'\n  const serverConsumerManifest = {\n    // moduleLoading must be null because we don't want to trigger preloads of ClientReferences\n    // to be added to the consumer. Instead, we'll wait for any ClientReference to be emitted\n    // which themselves will handle the preloading.\n    moduleLoading: null,\n    moduleMap: isEdgeRuntime\n      ? clientReferenceManifest.edgeRscModuleMapping\n      : clientReferenceManifest.rscModuleMapping,\n    serverModuleMap: null,\n  }\n\n  const staleTime = prerenderStore.stale\n  return await ComponentMod.collectSegmentData(\n    fullPageDataBuffer,\n    staleTime,\n    clientReferenceManifest.clientModules as ManifestNode,\n    serverConsumerManifest\n  )\n}\n"],"names":["renderToHTMLOrFlight","warmFlightResponse","flightDataPathHeadKey","parseRequestHeaders","headers","options","isDevWarmupRequest","isDevWarmup","isPrefetchRequest","NEXT_ROUTER_PREFETCH_HEADER","toLowerCase","undefined","isHmrRefresh","NEXT_HMR_REFRESH_HEADER","isRSCRequest","RSC_HEADER","shouldProvideFlightRouterState","isRoutePPREnabled","flightRouterState","parseAndValidateFlightRouterState","NEXT_ROUTER_STATE_TREE_HEADER","csp","nonce","getScriptNonceFromHeader","createNotFoundLoaderTree","loaderTree","components","children","PAGE_SEGMENT_KEY","page","makeGetDynamicParamFromSegment","params","pagePath","fallbackRouteParams","getDynamicParamFromSegment","segment","segmentParam","getSegmentParam","key","param","value","has","get","Array","isArray","map","i","encodeURIComponent","isCatchall","type","isOptionalCatchall","dynamicParamType","dynamicParamTypes","treeSegment","split","slice","flatMap","pathSegment","parseParameter","join","getShortDynamicParamType","NonIndex","ctx","is404Page","isInvalidStatusCode","res","statusCode","meta","name","content","generateDynamicRSCPayload","flightData","componentMod","tree","createServerSearchParamsForMetadata","createServerParamsForMetadata","createMetadataComponents","MetadataBoundary","ViewportBoundary","appUsingSizeAdjustment","query","requestId","workStore","url","skipFlight","preloadCallbacks","searchParams","MetadataTree","getMetadataReady","metadataContext","createTrackedMetadataContext","pathname","renderOpts","walkTreeWithFlightRouterState","createSegmentPath","child","loaderTreeToFilter","parentParams","isFirst","rscPayloadHead","React","Fragment","injectedCSS","Set","injectedJS","injectedFontPreloadTags","rootLayoutIncluded","path","actionResult","a","f","b","buildId","S","isStaticGeneration","createErrorContext","renderSource","routerKind","routePath","routeType","isAction","revalidateReason","getRevalidateReason","generateDynamicFlightRenderResult","req","onFlightDataRenderError","err","onInstrumentationRequestError","onError","createFlightReactServerErrorHandler","dev","RSCPayload","process","env","NODE_ENV","experimental","dynamicIO","resolveValidation","validationOutlet","createValidationOutlet","_validation","spawnDynamicValidationInDev","clientReferenceManifest","route","flightReadableStream","renderToReadableStream","clientModules","temporaryReferences","FlightRenderResult","fetchMetrics","warmupDevRender","requestStore","InvariantError","devWarmupPrerenderResumeDataCache","createPrerenderResumeDataCache","rscPayload","workUnitAsyncStorage","run","reader","getReader","read","done","prepareInitialCanonicalUrl","search","getRSCPayload","is404","missingSlots","GlobalError","initialTree","createFlightRouterStateFromLoaderTree","errorType","seedData","createComponentTree","firstItem","varyHeader","getHeader","couldBeIntercepted","includes","NEXT_URL","initialHead","globalErrorStyles","getGlobalErrorStyles","P","Preloads","p","assetPrefix","c","m","G","s","postponed","forEach","preloadFn","getErrorRSCPayload","createMetadataContext","initialSeedData","html","id","head","body","App","reactServerStream","preinitScripts","ServerInsertedHTMLProvider","response","use","useFlightStream","initialState","createInitialRouterState","initialFlightData","initialCanonicalUrlParts","initialParallelRoutes","location","prerendered","actionQueue","createMutableActionQueue","HeadManagerContext","require","Provider","appDir","AppRouter","globalErrorComponentAndStyles","AppWithoutContext","renderToHTMLOrFlightImpl","parsedRequestHeaders","requestEndedState","postponedState","implicitTags","isNotFoundPath","requestTimestamp","Date","now","serverActionsManifest","ComponentMod","nextFontManifest","serverActions","enableTainting","__next_app__","instrumented","wrapClientComponentLoader","globalThis","__next_require__","__next_chunk_load__","args","loadingChunk","loadChunk","trackChunkLoading","URL","setAppIsrStatus","NEXT_RUNTIME","isNodeNextRequest","originalRequest","on","prerenderStore","getStore","isPPR","dynamicTracking","dynamicAccesses","length","usedDynamic","forceDynamic","ended","metrics","getClientComponentLoaderMetrics","reset","getTracer","startSpan","NextNodeServerSpan","clientComponentLoading","startTime","clientComponentLoadStart","attributes","clientComponentLoadCount","end","clientComponentLoadTimes","metadata","appUsingSizeAdjust","serverModuleMap","createServerModuleMap","setReferenceManifestsSingleton","patchFetch","taintObjectReference","stripInternalQueries","crypto","randomUUID","nanoid","isActionRequest","getServerActionRequestMetadata","isServerAction","isPrefetch","setRootSpanAttribute","prerenderToStreamWithTracing","wrap","AppRenderSpan","getBodyResult","spanName","prerenderToStream","dynamicAccess","accessedDynamicData","isDebugDynamicAccesses","warn","access","formatDynamicAPIAccesses","digestErrorsMap","size","buildFailingError","values","next","ssrErrors","find","isUserLandError","pendingRevalidates","pendingRevalidateWrites","revalidatedTags","waitUntil","Promise","all","incrementalCache","revalidateTag","Object","collectedTags","fetchTags","staleHeader","String","collectedStale","setHeader","NEXT_ROUTER_STALE_TIME_HEADER","forceStatic","collectedRevalidate","revalidate","INFINITE_CACHE","staticBailoutInfo","description","dynamicUsageDescription","stack","dynamicUsageStack","RenderResult","streamToString","stream","renderToStreamWithTracing","renderToStream","formState","actionRequestResult","handleAction","generateFlight","notFoundLoaderTree","result","assignMetadata","serverComponentsHmrCache","Error","parseRelativeUrl","parsePostponedState","renderResumeDataCache","devWarmupRenderResumeDataCache","getImplicitTags","routeModule","definition","createRequestStoreForRender","onUpdateCookies","previewProps","createWorkStore","workAsyncStorage","renderServerInsertedHTML","createServerInsertedHTML","tracingMetadata","getTracedMetadata","getTracePropagationData","clientTraceMetadata","polyfills","buildManifest","polyfillFiles","filter","polyfill","endsWith","src","getAssetQueryString","integrity","subresourceIntegrityManifest","crossOrigin","noModule","bootstrapScript","getRequiredScripts","reactServerErrorsByDigest","Map","silenceLogger","onHTMLRenderRSCError","serverComponentsErrorHandler","createHTMLReactServerErrorHandler","nextExport","onHTMLRenderSSRError","allCapturedErrors","htmlRendererErrorHandler","createHTMLErrorHandler","reactServerResult","bind","scheduleInSequentialTasks","prerenderPhase","environmentName","filterStackFrame","_functionName","startsWith","ReactServerResult","waitAtLeastOneReactRenderTask","DynamicState","DATA","inlinedReactServerDataStream","createInlinedDataReadableStream","tee","chainStreams","createDocumentClosingStream","getPostponedFromState","resume","htmlStream","getServerInsertedHTML","makeGetServerInsertedHTML","serverCapturedErrors","basePath","continueDynamicHTMLResume","inlinedDataStream","consume","onHeaders","maxHeadersLength","reactMaxHeadersLength","bootstrapScripts","isDebugStaticShell","generateStaticHTML","supportsDynamicResponse","validateRootLayout","continueFizzStream","serverInsertedHTMLToHead","isStaticGenBailoutError","message","shouldBailoutToCSR","isBailoutToCSRError","getStackWithoutErrorMessage","error","reason","isNotFoundError","isRedirectError","getRedirectStatusCodeFromError","redirectUrl","addPathPrefix","getURLFromRedirectError","Headers","appendMutableCookies","mutableCookies","from","errorPreinitScripts","errorBootstrapScript","errorRSCPayload","errorServerStream","fizzStream","renderToInitialFizzStream","ReactDOMServer","element","streamOptions","finalErr","bailOnNotFound","outlet","resolve","isNotFound","initialServerPrerenderController","AbortController","initialServerRenderController","cacheSignal","CacheSignal","prerenderResumeDataCache","initialServerPrerenderStore","phase","renderSignal","signal","controller","expire","stale","tags","initialClientController","initialClientPrerenderStore","firstAttemptRSCPayload","initialServerStream","aborted","NEXT_DEBUG_BUILD","__NEXT_VERBOSE_LOGGING","printDebugThrownValueForProspectiveRender","warmupStream","renderStream","prerender","pendingInitialClientResult","_errorInfo","catch","cacheReady","abort","finalServerController","serverDynamicTracking","createDynamicTrackingState","finalServerPrerenderStore","finalClientController","clientDynamicTracking","dynamicValidation","createDynamicValidationState","finalClientPrerenderStore","finalServerPayload","serverPrerenderStreamResult","prerenderServerWithPhases","isPrerenderInterruptedError","digest","serverPhasedStream","asPhasedStream","prerenderClientWithPhases","errorInfo","componentStack","trackAllowedDynamicAccess","assertExhausted","LogDynamicValidation","throwIfDisallowedDynamic","shouldGenerateStaticFlightData","reactServerPrerenderResult","initialServerPayload","pendingInitialServerResult","onPostpone","initialServerResult","createReactServerPrerenderResult","asStream","prerenderAndAbortInSequentialTasks","asUnclosingStream","serverIsDynamic","finalRenderPrerenderStore","finalAttemptRSCPayload","clientIsDynamic","prelude","streamToBuffer","segmentFlightData","collectSegmentData","getDynamicHTMLPostponedState","getDynamicDataPostponedState","continueDynamicPrerender","consumeDynamicAccess","collectedExpire","StaticGenBailoutError","foreverStream","ReadableStream","resumeStream","JSON","parse","stringify","createPostponedAbortSignal","continueStaticPrerender","consumeAsStream","cache","dynamicReason","getFirstDynamicReason","DynamicServerError","reactServerPrerenderStore","createReactServerPrerenderResultFromRender","ssrPrerenderStore","prerenderLegacyStore","isDynamicServerError","loadingChunks","chunkListeners","load","add","finally","delete","flightStream","createFromReadableStream","TURBOPACK","serverConsumerManifest","moduleLoading","moduleMap","ssrModuleMapping","r","push","modules","globalErrorModule","parseLoaderTree","styles","createComponentStylesAndScripts","filePath","getComponent","fullPageDataBuffer","isEdgeRuntime","edgeRscModuleMapping","rscModuleMapping","staleTime"],"mappings":"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"}