{"version":3,"sources":["../../../src/server/app-render/create-error-handler.tsx"],"sourcesContent":["import type { ErrorInfo } from 'react'\n\nimport stringHash from 'next/dist/compiled/string-hash'\nimport { formatServerError } from '../../lib/format-server-error'\nimport { SpanStatusCode, getTracer } from '../lib/trace/tracer'\nimport { isAbortError } from '../pipe-readable'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { isDynamicServerError } from '../../client/components/hooks-server-context'\nimport { isNextRouterError } from '../../client/components/is-next-router-error'\nimport { getProperError } from '../../lib/is-error'\n\ndeclare global {\n  var __next_log_error__: undefined | ((err: unknown) => void)\n}\n\ntype RSCErrorHandler = (err: unknown) => string | undefined\ntype SSRErrorHandler = (\n  err: unknown,\n  errorInfo?: ErrorInfo\n) => string | undefined\n\nexport type DigestedError = Error & { digest: string }\n\nexport function createFlightReactServerErrorHandler(\n  dev: boolean,\n  onReactServerRenderError: (err: DigestedError) => void\n): RSCErrorHandler {\n  return (thrownValue: unknown) => {\n    if (typeof thrownValue === 'string') {\n      // TODO-APP: look at using webcrypto instead. Requires a promise to be awaited.\n      return stringHash(thrownValue).toString()\n    }\n\n    // If the response was closed, we don't need to log the error.\n    if (isAbortError(thrownValue)) return\n\n    // If we're bailing out to CSR, we don't need to log the error.\n    if (isBailoutToCSRError(thrownValue)) return thrownValue.digest\n\n    // If this is a navigation error, we don't need to log the error.\n    if (isNextRouterError(thrownValue)) return thrownValue.digest\n\n    // If this error occurs, we know that we should be stopping the static\n    // render. This is only thrown in static generation when PPR is not enabled,\n    // which causes the whole page to be marked as dynamic. We don't need to\n    // tell the user about this error, as it's not actionable.\n    if (isDynamicServerError(thrownValue)) return thrownValue.digest\n\n    const err = getProperError(thrownValue) as DigestedError\n\n    // If the error already has a digest, respect the original digest,\n    // so it won't get re-generated into another new error.\n    if (!err.digest) {\n      // TODO-APP: look at using webcrypto instead. Requires a promise to be awaited.\n      err.digest = stringHash(err.message + err.stack || '').toString()\n    }\n\n    // Format server errors in development to add more helpful error messages\n    if (dev) {\n      formatServerError(err)\n    }\n\n    // Record exception in an active span, if available.\n    const span = getTracer().getActiveScopeSpan()\n    if (span) {\n      span.recordException(err)\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: err.message,\n      })\n    }\n\n    onReactServerRenderError(err)\n\n    return err.digest\n  }\n}\n\nexport function createHTMLReactServerErrorHandler(\n  dev: boolean,\n  isNextExport: boolean,\n  reactServerErrors: Map<string, DigestedError>,\n  silenceLogger: boolean,\n  onReactServerRenderError: undefined | ((err: DigestedError) => void)\n): RSCErrorHandler {\n  return (thrownValue: unknown) => {\n    if (typeof thrownValue === 'string') {\n      // TODO-APP: look at using webcrypto instead. Requires a promise to be awaited.\n      return stringHash(thrownValue).toString()\n    }\n\n    // If the response was closed, we don't need to log the error.\n    if (isAbortError(thrownValue)) return\n\n    // If we're bailing out to CSR, we don't need to log the error.\n    if (isBailoutToCSRError(thrownValue)) return thrownValue.digest\n\n    // If this is a navigation error, we don't need to log the error.\n    if (isNextRouterError(thrownValue)) return thrownValue.digest\n\n    // If this error occurs, we know that we should be stopping the static\n    // render. This is only thrown in static generation when PPR is not enabled,\n    // which causes the whole page to be marked as dynamic. We don't need to\n    // tell the user about this error, as it's not actionable.\n    if (isDynamicServerError(thrownValue)) return thrownValue.digest\n\n    const err = getProperError(thrownValue) as DigestedError\n\n    // If the error already has a digest, respect the original digest,\n    // so it won't get re-generated into another new error.\n    if (!err.digest) {\n      // TODO-APP: look at using webcrypto instead. Requires a promise to be awaited.\n      err.digest = stringHash(err.message + (err.stack || '')).toString()\n    }\n\n    // @TODO by putting this here and not at the top it is possible that\n    // we don't error the build in places we actually expect to\n    if (!reactServerErrors.has(err.digest)) {\n      reactServerErrors.set(err.digest, err)\n    }\n\n    // Format server errors in development to add more helpful error messages\n    if (dev) {\n      formatServerError(err)\n    }\n\n    // Don't log the suppressed error during export\n    if (\n      !(\n        isNextExport &&\n        err?.message?.includes(\n          'The specific message is omitted in production builds to avoid leaking sensitive details.'\n        )\n      )\n    ) {\n      // Record exception in an active span, if available.\n      const span = getTracer().getActiveScopeSpan()\n      if (span) {\n        span.recordException(err)\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: err.message,\n        })\n      }\n\n      if (!silenceLogger) {\n        onReactServerRenderError?.(err)\n      }\n    }\n\n    return err.digest\n  }\n}\n\nexport function createHTMLErrorHandler(\n  dev: boolean,\n  isNextExport: boolean,\n  reactServerErrors: Map<string, DigestedError>,\n  allCapturedErrors: Array<unknown>,\n  silenceLogger: boolean,\n  onHTMLRenderSSRError: (err: DigestedError, errorInfo?: ErrorInfo) => void\n): SSRErrorHandler {\n  return (thrownValue: unknown, errorInfo?: ErrorInfo) => {\n    let isSSRError = true\n\n    allCapturedErrors.push(thrownValue)\n\n    // If the response was closed, we don't need to log the error.\n    if (isAbortError(thrownValue)) return\n\n    // If we're bailing out to CSR, we don't need to log the error.\n    if (isBailoutToCSRError(thrownValue)) return thrownValue.digest\n\n    // If this is a navigation error, we don't need to log the error.\n    if (isNextRouterError(thrownValue)) return thrownValue.digest\n\n    // If this error occurs, we know that we should be stopping the static\n    // render. This is only thrown in static generation when PPR is not enabled,\n    // which causes the whole page to be marked as dynamic. We don't need to\n    // tell the user about this error, as it's not actionable.\n    if (isDynamicServerError(thrownValue)) return thrownValue.digest\n\n    const err = getProperError(thrownValue) as DigestedError\n    // If the error already has a digest, respect the original digest,\n    // so it won't get re-generated into another new error.\n    if (err.digest) {\n      if (reactServerErrors.has(err.digest)) {\n        // This error is likely an obfuscated error from react-server.\n        // We recover the original error here.\n        thrownValue = reactServerErrors.get(err.digest)\n        isSSRError = false\n      } else {\n        // The error is not from react-server but has a digest\n        // from other means so we don't need to produce a new one\n      }\n    } else {\n      err.digest = stringHash(\n        err.message + (errorInfo?.componentStack || err.stack || '')\n      ).toString()\n    }\n\n    // Format server errors in development to add more helpful error messages\n    if (dev) {\n      formatServerError(err)\n    }\n\n    // Don't log the suppressed error during export\n    if (\n      !(\n        isNextExport &&\n        err?.message?.includes(\n          'The specific message is omitted in production builds to avoid leaking sensitive details.'\n        )\n      )\n    ) {\n      // Record exception in an active span, if available.\n      const span = getTracer().getActiveScopeSpan()\n      if (span) {\n        span.recordException(err)\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: err.message,\n        })\n      }\n\n      if (\n        !silenceLogger &&\n        // HTML errors contain RSC errors as well, filter them out before reporting\n        isSSRError\n      ) {\n        onHTMLRenderSSRError(err, errorInfo)\n      }\n    }\n\n    return err.digest\n  }\n}\n\nexport function isUserLandError(err: any): boolean {\n  return (\n    !isAbortError(err) && !isBailoutToCSRError(err) && !isNextRouterError(err)\n  )\n}\n"],"names":["createFlightReactServerErrorHandler","createHTMLErrorHandler","createHTMLReactServerErrorHandler","isUserLandError","dev","onReactServerRenderError","thrownValue","stringHash","toString","isAbortError","isBailoutToCSRError","digest","isNextRouterError","isDynamicServerError","err","getProperError","message","stack","formatServerError","span","getTracer","getActiveScopeSpan","recordException","setStatus","code","SpanStatusCode","ERROR","isNextExport","reactServerErrors","silenceLogger","has","set","includes","allCapturedErrors","onHTMLRenderSSRError","errorInfo","isSSRError","push","get","componentStack"],"mappings":"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"}