{"version":3,"sources":["../../../src/server/after/after.ts"],"sourcesContent":["import { workAsyncStorage } from '../app-render/work-async-storage.external'\n\nexport type AfterTask<T = unknown> = Promise<T> | AfterCallback<T>\nexport type AfterCallback<T = unknown> = () => T | Promise<T>\n\n/**\n * This function allows you to schedule callbacks to be executed after the current request finishes.\n */\nexport function unstable_after<T>(task: AfterTask<T>): void {\n  const workStore = workAsyncStorage.getStore()\n\n  if (!workStore) {\n    // TODO(after): the linked docs page talks about *dynamic* APIs, which unstable_after soon won't be anymore\n    throw new Error(\n      '`unstable_after` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context'\n    )\n  }\n\n  const { afterContext } = workStore\n  if (!afterContext) {\n    throw new Error(\n      '`unstable_after` must be explicitly enabled by setting `experimental.after: true` in your next.config.js.'\n    )\n  }\n\n  return afterContext.after(task)\n}\n"],"names":["unstable_after","task","workStore","workAsyncStorage","getStore","Error","afterContext","after"],"mappings":";;;;+BAQgBA;;;eAAAA;;;0CARiB;AAQ1B,SAASA,eAAkBC,IAAkB;IAClD,MAAMC,YAAYC,0CAAgB,CAACC,QAAQ;IAE3C,IAAI,CAACF,WAAW;QACd,2GAA2G;QAC3G,MAAM,IAAIG,MACR;IAEJ;IAEA,MAAM,EAAEC,YAAY,EAAE,GAAGJ;IACzB,IAAI,CAACI,cAAc;QACjB,MAAM,IAAID,MACR;IAEJ;IAEA,OAAOC,aAAaC,KAAK,CAACN;AAC5B"}