{"version":3,"sources":["../../../../../../src/client/components/react-dev-overlay/internal/helpers/use-error-handler.ts"],"sourcesContent":["import { useEffect } from 'react'\nimport { attachHydrationErrorState } from './attach-hydration-error-state'\nimport { isNextRouterError } from '../../../is-next-router-error'\nimport { storeHydrationErrorStateFromConsoleArgs } from './hydration-error-info'\nimport { formatConsoleArgs } from '../../../../lib/console'\nimport isError from '../../../../../lib/is-error'\nimport { createUnhandledError } from './console-error'\nimport { enqueueConsecutiveDedupedError } from './enqueue-client-error'\nimport { getReactStitchedError } from './stitched-error'\n\nexport type ErrorHandler = (error: Error) => void\n\nconst errorQueue: Array<Error> = []\nconst errorHandlers: Array<ErrorHandler> = []\nconst rejectionQueue: Array<Error> = []\nconst rejectionHandlers: Array<ErrorHandler> = []\n\nexport function handleClientError(\n  originError: unknown,\n  consoleErrorArgs: any[]\n) {\n  let error: Error\n  if (!originError || !isError(originError)) {\n    // If it's not an error, format the args into an error\n    const formattedErrorMessage = formatConsoleArgs(consoleErrorArgs)\n    error = getReactStitchedError(createUnhandledError(formattedErrorMessage))\n  } else {\n    error = originError\n  }\n\n  storeHydrationErrorStateFromConsoleArgs(...consoleErrorArgs)\n  attachHydrationErrorState(error)\n\n  enqueueConsecutiveDedupedError(errorQueue, error)\n  for (const handler of errorHandlers) {\n    handler(error)\n  }\n}\n\nexport function useErrorHandler(\n  handleOnUnhandledError: ErrorHandler,\n  handleOnUnhandledRejection: ErrorHandler\n) {\n  useEffect(() => {\n    // Handle queued errors.\n    errorQueue.forEach(handleOnUnhandledError)\n    rejectionQueue.forEach(handleOnUnhandledRejection)\n\n    // Listen to new errors.\n    errorHandlers.push(handleOnUnhandledError)\n    rejectionHandlers.push(handleOnUnhandledRejection)\n\n    return () => {\n      // Remove listeners.\n      errorHandlers.splice(errorHandlers.indexOf(handleOnUnhandledError), 1)\n      rejectionHandlers.splice(\n        rejectionHandlers.indexOf(handleOnUnhandledRejection),\n        1\n      )\n    }\n  }, [handleOnUnhandledError, handleOnUnhandledRejection])\n}\n\nfunction onUnhandledError(event: WindowEventMap['error']): void | boolean {\n  if (isNextRouterError(event.error)) {\n    event.preventDefault()\n    return false\n  }\n  handleClientError(event.error, [])\n}\n\nfunction onUnhandledRejection(ev: WindowEventMap['unhandledrejection']): void {\n  const reason = ev?.reason\n  if (isNextRouterError(reason)) {\n    ev.preventDefault()\n    return\n  }\n\n  let error = reason\n  if (error && !isError(error)) {\n    error = createUnhandledError(error + '')\n  }\n\n  rejectionQueue.push(error)\n  for (const handler of rejectionHandlers) {\n    handler(error)\n  }\n}\n\nexport function handleGlobalErrors() {\n  if (typeof window !== 'undefined') {\n    try {\n      // Increase the number of stack frames on the client\n      Error.stackTraceLimit = 50\n    } catch {}\n\n    window.addEventListener('error', onUnhandledError)\n    window.addEventListener('unhandledrejection', onUnhandledRejection)\n  }\n}\n"],"names":["handleClientError","handleGlobalErrors","useErrorHandler","errorQueue","errorHandlers","rejectionQueue","rejectionHandlers","originError","consoleErrorArgs","error","isError","formattedErrorMessage","formatConsoleArgs","getReactStitchedError","createUnhandledError","storeHydrationErrorStateFromConsoleArgs","attachHydrationErrorState","enqueueConsecutiveDedupedError","handler","handleOnUnhandledError","handleOnUnhandledRejection","useEffect","forEach","push","splice","indexOf","onUnhandledError","event","isNextRouterError","preventDefault","onUnhandledRejection","ev","reason","window","Error","stackTraceLimit","addEventListener"],"mappings":";;;;;;;;;;;;;;;;IAiBgBA,iBAAiB;eAAjBA;;IAwEAC,kBAAkB;eAAlBA;;IAlDAC,eAAe;eAAfA;;;;uBAvCU;2CACgB;mCACR;oCACsB;yBACtB;kEACd;8BACiB;oCACU;+BACT;AAItC,MAAMC,aAA2B,EAAE;AACnC,MAAMC,gBAAqC,EAAE;AAC7C,MAAMC,iBAA+B,EAAE;AACvC,MAAMC,oBAAyC,EAAE;AAE1C,SAASN,kBACdO,WAAoB,EACpBC,gBAAuB;IAEvB,IAAIC;IACJ,IAAI,CAACF,eAAe,CAACG,IAAAA,gBAAO,EAACH,cAAc;QACzC,sDAAsD;QACtD,MAAMI,wBAAwBC,IAAAA,0BAAiB,EAACJ;QAChDC,QAAQI,IAAAA,oCAAqB,EAACC,IAAAA,kCAAoB,EAACH;IACrD,OAAO;QACLF,QAAQF;IACV;IAEAQ,IAAAA,2DAAuC,KAAIP;IAC3CQ,IAAAA,oDAAyB,EAACP;IAE1BQ,IAAAA,kDAA8B,EAACd,YAAYM;IAC3C,KAAK,MAAMS,WAAWd,cAAe;QACnCc,QAAQT;IACV;AACF;AAEO,SAASP,gBACdiB,sBAAoC,EACpCC,0BAAwC;IAExCC,IAAAA,gBAAS,EAAC;QACR,wBAAwB;QACxBlB,WAAWmB,OAAO,CAACH;QACnBd,eAAeiB,OAAO,CAACF;QAEvB,wBAAwB;QACxBhB,cAAcmB,IAAI,CAACJ;QACnBb,kBAAkBiB,IAAI,CAACH;QAEvB,OAAO;YACL,oBAAoB;YACpBhB,cAAcoB,MAAM,CAACpB,cAAcqB,OAAO,CAACN,yBAAyB;YACpEb,kBAAkBkB,MAAM,CACtBlB,kBAAkBmB,OAAO,CAACL,6BAC1B;QAEJ;IACF,GAAG;QAACD;QAAwBC;KAA2B;AACzD;AAEA,SAASM,iBAAiBC,KAA8B;IACtD,IAAIC,IAAAA,oCAAiB,EAACD,MAAMlB,KAAK,GAAG;QAClCkB,MAAME,cAAc;QACpB,OAAO;IACT;IACA7B,kBAAkB2B,MAAMlB,KAAK,EAAE,EAAE;AACnC;AAEA,SAASqB,qBAAqBC,EAAwC;IACpE,MAAMC,SAASD,sBAAAA,GAAIC,MAAM;IACzB,IAAIJ,IAAAA,oCAAiB,EAACI,SAAS;QAC7BD,GAAGF,cAAc;QACjB;IACF;IAEA,IAAIpB,QAAQuB;IACZ,IAAIvB,SAAS,CAACC,IAAAA,gBAAO,EAACD,QAAQ;QAC5BA,QAAQK,IAAAA,kCAAoB,EAACL,QAAQ;IACvC;IAEAJ,eAAekB,IAAI,CAACd;IACpB,KAAK,MAAMS,WAAWZ,kBAAmB;QACvCY,QAAQT;IACV;AACF;AAEO,SAASR;IACd,IAAI,OAAOgC,WAAW,aAAa;QACjC,IAAI;YACF,oDAAoD;YACpDC,MAAMC,eAAe,GAAG;QAC1B,EAAE,UAAM,CAAC;QAETF,OAAOG,gBAAgB,CAAC,SAASV;QACjCO,OAAOG,gBAAgB,CAAC,sBAAsBN;IAChD;AACF"}