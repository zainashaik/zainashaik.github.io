{"version":3,"sources":["../../../src/client/components/app-router.tsx"],"sourcesContent":["'use client'\n\nimport React, {\n  use,\n  useEffect,\n  useMemo,\n  useCallback,\n  startTransition,\n  useInsertionEffect,\n  useDeferredValue,\n} from 'react'\nimport {\n  AppRouterContext,\n  LayoutRouterContext,\n  GlobalLayoutRouterContext,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  CacheNode,\n  AppRouterInstance,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport {\n  ACTION_HMR_REFRESH,\n  ACTION_NAVIGATE,\n  ACTION_PREFETCH,\n  ACTION_REFRESH,\n  ACTION_RESTORE,\n  ACTION_SERVER_PATCH,\n  PrefetchKind,\n} from './router-reducer/router-reducer-types'\nimport type {\n  AppRouterState,\n  ReducerActions,\n  RouterChangeByServerResponse,\n  RouterNavigate,\n} from './router-reducer/router-reducer-types'\nimport { createHrefFromUrl } from './router-reducer/create-href-from-url'\nimport {\n  SearchParamsContext,\n  PathnameContext,\n  PathParamsContext,\n} from '../../shared/lib/hooks-client-context.shared-runtime'\nimport { useReducer, useUnwrapState } from './use-reducer'\nimport { ErrorBoundary, type ErrorComponent } from './error-boundary'\nimport { isBot } from '../../shared/lib/router/utils/is-bot'\nimport { addBasePath } from '../add-base-path'\nimport { AppRouterAnnouncer } from './app-router-announcer'\nimport { RedirectBoundary } from './redirect-boundary'\nimport { findHeadInCache } from './router-reducer/reducers/find-head-in-cache'\nimport { unresolvedThenable } from './unresolved-thenable'\nimport { removeBasePath } from '../remove-base-path'\nimport { hasBasePath } from '../has-base-path'\nimport { getSelectedParams } from './router-reducer/compute-changed-path'\nimport type { FlightRouterState } from '../../server/app-render/types'\nimport { useNavFailureHandler } from './nav-failure-handler'\nimport { useServerActionDispatcher } from '../app-call-server'\nimport type { AppRouterActionQueue } from '../../shared/lib/router/action-queue'\nimport {\n  getRedirectTypeFromError,\n  getURLFromRedirectError,\n  isRedirectError,\n  RedirectType,\n} from './redirect'\n\nconst globalMutable: {\n  pendingMpaPath?: string\n} = {}\n\nfunction isExternalURL(url: URL) {\n  return url.origin !== window.location.origin\n}\n\nfunction HistoryUpdater({\n  appRouterState,\n}: {\n  appRouterState: AppRouterState\n}) {\n  useInsertionEffect(() => {\n    if (process.env.__NEXT_APP_NAV_FAIL_HANDLING) {\n      // clear pending URL as navigation is no longer\n      // in flight\n      window.next.__pendingUrl = undefined\n    }\n\n    const { tree, pushRef, canonicalUrl } = appRouterState\n    const historyState = {\n      ...(pushRef.preserveCustomHistoryState ? window.history.state : {}),\n      // Identifier is shortened intentionally.\n      // __NA is used to identify if the history entry can be handled by the app-router.\n      // __N is used to identify if the history entry can be handled by the old router.\n      __NA: true,\n      __PRIVATE_NEXTJS_INTERNALS_TREE: tree,\n    }\n    if (\n      pushRef.pendingPush &&\n      // Skip pushing an additional history entry if the canonicalUrl is the same as the current url.\n      // This mirrors the browser behavior for normal navigation.\n      createHrefFromUrl(new URL(window.location.href)) !== canonicalUrl\n    ) {\n      // This intentionally mutates React state, pushRef is overwritten to ensure additional push/replace calls do not trigger an additional history entry.\n      pushRef.pendingPush = false\n      window.history.pushState(historyState, '', canonicalUrl)\n    } else {\n      window.history.replaceState(historyState, '', canonicalUrl)\n    }\n  }, [appRouterState])\n  return null\n}\n\nexport function createEmptyCacheNode(): CacheNode {\n  return {\n    lazyData: null,\n    rsc: null,\n    prefetchRsc: null,\n    head: null,\n    prefetchHead: null,\n    parallelRoutes: new Map(),\n    loading: null,\n  }\n}\n\n/**\n * Server response that only patches the cache and tree.\n */\nfunction useChangeByServerResponse(\n  dispatch: React.Dispatch<ReducerActions>\n): RouterChangeByServerResponse {\n  return useCallback(\n    ({ previousTree, serverResponse }) => {\n      startTransition(() => {\n        dispatch({\n          type: ACTION_SERVER_PATCH,\n          previousTree,\n          serverResponse,\n        })\n      })\n    },\n    [dispatch]\n  )\n}\n\nfunction useNavigate(dispatch: React.Dispatch<ReducerActions>): RouterNavigate {\n  return useCallback(\n    (href, navigateType, shouldScroll) => {\n      const url = new URL(addBasePath(href), location.href)\n\n      if (process.env.__NEXT_APP_NAV_FAIL_HANDLING) {\n        window.next.__pendingUrl = url\n      }\n\n      return dispatch({\n        type: ACTION_NAVIGATE,\n        url,\n        isExternalUrl: isExternalURL(url),\n        locationSearch: location.search,\n        shouldScroll: shouldScroll ?? true,\n        navigateType,\n        allowAliasing: true,\n      })\n    },\n    [dispatch]\n  )\n}\n\nfunction copyNextJsInternalHistoryState(data: any) {\n  if (data == null) data = {}\n  const currentState = window.history.state\n  const __NA = currentState?.__NA\n  if (__NA) {\n    data.__NA = __NA\n  }\n  const __PRIVATE_NEXTJS_INTERNALS_TREE =\n    currentState?.__PRIVATE_NEXTJS_INTERNALS_TREE\n  if (__PRIVATE_NEXTJS_INTERNALS_TREE) {\n    data.__PRIVATE_NEXTJS_INTERNALS_TREE = __PRIVATE_NEXTJS_INTERNALS_TREE\n  }\n\n  return data\n}\n\nfunction Head({\n  headCacheNode,\n}: {\n  headCacheNode: CacheNode | null\n}): React.ReactNode {\n  // If this segment has a `prefetchHead`, it's the statically prefetched data.\n  // We should use that on initial render instead of `head`. Then we'll switch\n  // to `head` when the dynamic response streams in.\n  const head = headCacheNode !== null ? headCacheNode.head : null\n  const prefetchHead =\n    headCacheNode !== null ? headCacheNode.prefetchHead : null\n\n  // If no prefetch data is available, then we go straight to rendering `head`.\n  const resolvedPrefetchRsc = prefetchHead !== null ? prefetchHead : head\n\n  // We use `useDeferredValue` to handle switching between the prefetched and\n  // final values. The second argument is returned on initial render, then it\n  // re-renders with the first argument.\n  //\n  // @ts-expect-error The second argument to `useDeferredValue` is only\n  // available in the experimental builds. When its disabled, it will always\n  // return `head`.\n  return useDeferredValue(head, resolvedPrefetchRsc)\n}\n\n/**\n * The global router that wraps the application components.\n */\nfunction Router({\n  actionQueue,\n  assetPrefix,\n}: {\n  actionQueue: AppRouterActionQueue\n  assetPrefix: string\n}) {\n  const [state, dispatch] = useReducer(actionQueue)\n  const { canonicalUrl } = useUnwrapState(state)\n  // Add memoized pathname/query for useSearchParams and usePathname.\n  const { searchParams, pathname } = useMemo(() => {\n    const url = new URL(\n      canonicalUrl,\n      typeof window === 'undefined' ? 'http://n' : window.location.href\n    )\n\n    return {\n      // This is turned into a readonly class in `useSearchParams`\n      searchParams: url.searchParams,\n      pathname: hasBasePath(url.pathname)\n        ? removeBasePath(url.pathname)\n        : url.pathname,\n    }\n  }, [canonicalUrl])\n\n  const changeByServerResponse = useChangeByServerResponse(dispatch)\n  const navigate = useNavigate(dispatch)\n  useServerActionDispatcher(dispatch)\n\n  /**\n   * The app router that is exposed through `useRouter`. It's only concerned with dispatching actions to the reducer, does not hold state.\n   */\n  const appRouter = useMemo<AppRouterInstance>(() => {\n    const routerInstance: AppRouterInstance = {\n      back: () => window.history.back(),\n      forward: () => window.history.forward(),\n      prefetch: (href, options) => {\n        // Don't prefetch for bots as they don't navigate.\n        if (isBot(window.navigator.userAgent)) {\n          return\n        }\n\n        let url: URL\n        try {\n          url = new URL(addBasePath(href), window.location.href)\n        } catch (_) {\n          throw new Error(\n            `Cannot prefetch '${href}' because it cannot be converted to a URL.`\n          )\n        }\n\n        // Don't prefetch during development (improves compilation performance)\n        if (process.env.NODE_ENV === 'development') {\n          return\n        }\n\n        // External urls can't be prefetched in the same way.\n        if (isExternalURL(url)) {\n          return\n        }\n        startTransition(() => {\n          dispatch({\n            type: ACTION_PREFETCH,\n            url,\n            kind: options?.kind ?? PrefetchKind.FULL,\n          })\n        })\n      },\n      replace: (href, options = {}) => {\n        startTransition(() => {\n          navigate(href, 'replace', options.scroll ?? true)\n        })\n      },\n      push: (href, options = {}) => {\n        startTransition(() => {\n          navigate(href, 'push', options.scroll ?? true)\n        })\n      },\n      refresh: () => {\n        startTransition(() => {\n          dispatch({\n            type: ACTION_REFRESH,\n            origin: window.location.origin,\n          })\n        })\n      },\n      hmrRefresh: () => {\n        if (process.env.NODE_ENV !== 'development') {\n          throw new Error(\n            'hmrRefresh can only be used in development mode. Please use refresh instead.'\n          )\n        } else {\n          startTransition(() => {\n            dispatch({\n              type: ACTION_HMR_REFRESH,\n              origin: window.location.origin,\n            })\n          })\n        }\n      },\n    }\n\n    return routerInstance\n  }, [dispatch, navigate])\n\n  useEffect(() => {\n    // Exists for debugging purposes. Don't use in application code.\n    if (window.next) {\n      window.next.router = appRouter\n    }\n  }, [appRouter])\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const { cache, prefetchCache, tree } = useUnwrapState(state)\n\n    // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      // Add `window.nd` for debugging purposes.\n      // This is not meant for use in applications as concurrent rendering will affect the cache/tree/router.\n      // @ts-ignore this is for debugging\n      window.nd = {\n        router: appRouter,\n        cache,\n        prefetchCache,\n        tree,\n      }\n    }, [appRouter, cache, prefetchCache, tree])\n  }\n\n  useEffect(() => {\n    // If the app is restored from bfcache, it's possible that\n    // pushRef.mpaNavigation is true, which would mean that any re-render of this component\n    // would trigger the mpa navigation logic again from the lines below.\n    // This will restore the router to the initial state in the event that the app is restored from bfcache.\n    function handlePageShow(event: PageTransitionEvent) {\n      if (\n        !event.persisted ||\n        !window.history.state?.__PRIVATE_NEXTJS_INTERNALS_TREE\n      ) {\n        return\n      }\n\n      // Clear the pendingMpaPath value so that a subsequent MPA navigation to the same URL can be triggered.\n      // This is necessary because if the browser restored from bfcache, the pendingMpaPath would still be set to the value\n      // of the last MPA navigation.\n      globalMutable.pendingMpaPath = undefined\n\n      dispatch({\n        type: ACTION_RESTORE,\n        url: new URL(window.location.href),\n        tree: window.history.state.__PRIVATE_NEXTJS_INTERNALS_TREE,\n      })\n    }\n\n    window.addEventListener('pageshow', handlePageShow)\n\n    return () => {\n      window.removeEventListener('pageshow', handlePageShow)\n    }\n  }, [dispatch])\n\n  useEffect(() => {\n    // Ensure that any redirect errors that bubble up outside of the RedirectBoundary\n    // are caught and handled by the router.\n    function handleUnhandledRedirect(\n      event: ErrorEvent | PromiseRejectionEvent\n    ) {\n      const error = 'reason' in event ? event.reason : event.error\n      if (isRedirectError(error)) {\n        event.preventDefault()\n        const url = getURLFromRedirectError(error)\n        const redirectType = getRedirectTypeFromError(error)\n        if (redirectType === RedirectType.push) {\n          appRouter.push(url, {})\n        } else {\n          appRouter.replace(url, {})\n        }\n      }\n    }\n    window.addEventListener('error', handleUnhandledRedirect)\n    window.addEventListener('unhandledrejection', handleUnhandledRedirect)\n\n    return () => {\n      window.removeEventListener('error', handleUnhandledRedirect)\n      window.removeEventListener('unhandledrejection', handleUnhandledRedirect)\n    }\n  }, [appRouter])\n\n  // When mpaNavigation flag is set do a hard navigation to the new url.\n  // Infinitely suspend because we don't actually want to rerender any child\n  // components with the new URL and any entangled state updates shouldn't\n  // commit either (eg: useTransition isPending should stay true until the page\n  // unloads).\n  //\n  // This is a side effect in render. Don't try this at home, kids. It's\n  // probably safe because we know this is a singleton component and it's never\n  // in <Offscreen>. At least I hope so. (It will run twice in dev strict mode,\n  // but that's... fine?)\n  const { pushRef } = useUnwrapState(state)\n  if (pushRef.mpaNavigation) {\n    // if there's a re-render, we don't want to trigger another redirect if one is already in flight to the same URL\n    if (globalMutable.pendingMpaPath !== canonicalUrl) {\n      const location = window.location\n      if (pushRef.pendingPush) {\n        location.assign(canonicalUrl)\n      } else {\n        location.replace(canonicalUrl)\n      }\n\n      globalMutable.pendingMpaPath = canonicalUrl\n    }\n    // TODO-APP: Should we listen to navigateerror here to catch failed\n    // navigations somehow? And should we call window.stop() if a SPA navigation\n    // should interrupt an MPA one?\n    use(unresolvedThenable)\n  }\n\n  useEffect(() => {\n    const originalPushState = window.history.pushState.bind(window.history)\n    const originalReplaceState = window.history.replaceState.bind(\n      window.history\n    )\n\n    // Ensure the canonical URL in the Next.js Router is updated when the URL is changed so that `usePathname` and `useSearchParams` hold the pushed values.\n    const applyUrlFromHistoryPushReplace = (\n      url: string | URL | null | undefined\n    ) => {\n      const href = window.location.href\n      const tree: FlightRouterState | undefined =\n        window.history.state?.__PRIVATE_NEXTJS_INTERNALS_TREE\n\n      startTransition(() => {\n        dispatch({\n          type: ACTION_RESTORE,\n          url: new URL(url ?? href, href),\n          tree,\n        })\n      })\n    }\n\n    /**\n     * Patch pushState to ensure external changes to the history are reflected in the Next.js Router.\n     * Ensures Next.js internal history state is copied to the new history entry.\n     * Ensures usePathname and useSearchParams hold the newly provided url.\n     */\n    window.history.pushState = function pushState(\n      data: any,\n      _unused: string,\n      url?: string | URL | null\n    ): void {\n      // Avoid a loop when Next.js internals trigger pushState/replaceState\n      if (data?.__NA || data?._N) {\n        return originalPushState(data, _unused, url)\n      }\n\n      data = copyNextJsInternalHistoryState(data)\n\n      if (url) {\n        applyUrlFromHistoryPushReplace(url)\n      }\n\n      return originalPushState(data, _unused, url)\n    }\n\n    /**\n     * Patch replaceState to ensure external changes to the history are reflected in the Next.js Router.\n     * Ensures Next.js internal history state is copied to the new history entry.\n     * Ensures usePathname and useSearchParams hold the newly provided url.\n     */\n    window.history.replaceState = function replaceState(\n      data: any,\n      _unused: string,\n      url?: string | URL | null\n    ): void {\n      // Avoid a loop when Next.js internals trigger pushState/replaceState\n      if (data?.__NA || data?._N) {\n        return originalReplaceState(data, _unused, url)\n      }\n      data = copyNextJsInternalHistoryState(data)\n\n      if (url) {\n        applyUrlFromHistoryPushReplace(url)\n      }\n      return originalReplaceState(data, _unused, url)\n    }\n\n    /**\n     * Handle popstate event, this is used to handle back/forward in the browser.\n     * By default dispatches ACTION_RESTORE, however if the history entry was not pushed/replaced by app-router it will reload the page.\n     * That case can happen when the old router injected the history entry.\n     */\n    const onPopState = (event: PopStateEvent) => {\n      if (!event.state) {\n        // TODO-APP: this case only happens when pushState/replaceState was called outside of Next.js. It should probably reload the page in this case.\n        return\n      }\n\n      // This case happens when the history entry was pushed by the `pages` router.\n      if (!event.state.__NA) {\n        window.location.reload()\n        return\n      }\n\n      // TODO-APP: Ideally the back button should not use startTransition as it should apply the updates synchronously\n      // Without startTransition works if the cache is there for this path\n      startTransition(() => {\n        dispatch({\n          type: ACTION_RESTORE,\n          url: new URL(window.location.href),\n          tree: event.state.__PRIVATE_NEXTJS_INTERNALS_TREE,\n        })\n      })\n    }\n\n    // Register popstate event to call onPopstate.\n    window.addEventListener('popstate', onPopState)\n    return () => {\n      window.history.pushState = originalPushState\n      window.history.replaceState = originalReplaceState\n      window.removeEventListener('popstate', onPopState)\n    }\n  }, [dispatch])\n\n  const { cache, tree, nextUrl, focusAndScrollRef, buildId } =\n    useUnwrapState(state)\n\n  const matchingHead = useMemo(() => {\n    return findHeadInCache(cache, tree[1])\n  }, [cache, tree])\n\n  // Add memoized pathParams for useParams.\n  const pathParams = useMemo(() => {\n    return getSelectedParams(tree)\n  }, [tree])\n\n  const layoutRouterContext = useMemo(() => {\n    return {\n      childNodes: cache.parallelRoutes,\n      tree,\n      // Root node always has `url`\n      // Provided in AppTreeContext to ensure it can be overwritten in layout-router\n      url: canonicalUrl,\n      loading: cache.loading,\n    }\n  }, [cache.parallelRoutes, tree, canonicalUrl, cache.loading])\n\n  const globalLayoutRouterContext = useMemo(() => {\n    return {\n      buildId,\n      changeByServerResponse,\n      tree,\n      focusAndScrollRef,\n      nextUrl,\n    }\n  }, [buildId, changeByServerResponse, tree, focusAndScrollRef, nextUrl])\n\n  let head\n  if (matchingHead !== null) {\n    // The head is wrapped in an extra component so we can use\n    // `useDeferredValue` to swap between the prefetched and final versions of\n    // the head. (This is what LayoutRouter does for segment data, too.)\n    //\n    // The `key` is used to remount the component whenever the head moves to\n    // a different segment.\n    const [headCacheNode, headKey] = matchingHead\n    head = <Head key={headKey} headCacheNode={headCacheNode} />\n  } else {\n    head = null\n  }\n\n  let content = (\n    <RedirectBoundary>\n      {head}\n      {cache.rsc}\n      <AppRouterAnnouncer tree={tree} />\n    </RedirectBoundary>\n  )\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof window !== 'undefined') {\n      const DevRootNotFoundBoundary: typeof import('./dev-root-not-found-boundary').DevRootNotFoundBoundary =\n        require('./dev-root-not-found-boundary').DevRootNotFoundBoundary\n      content = <DevRootNotFoundBoundary>{content}</DevRootNotFoundBoundary>\n    }\n    const HotReloader: typeof import('./react-dev-overlay/app/hot-reloader-client').default =\n      require('./react-dev-overlay/app/hot-reloader-client').default\n\n    content = <HotReloader assetPrefix={assetPrefix}>{content}</HotReloader>\n  }\n\n  return (\n    <>\n      <HistoryUpdater appRouterState={useUnwrapState(state)} />\n      <RuntimeStyles />\n      <PathParamsContext.Provider value={pathParams}>\n        <PathnameContext.Provider value={pathname}>\n          <SearchParamsContext.Provider value={searchParams}>\n            <GlobalLayoutRouterContext.Provider\n              value={globalLayoutRouterContext}\n            >\n              <AppRouterContext.Provider value={appRouter}>\n                <LayoutRouterContext.Provider value={layoutRouterContext}>\n                  {content}\n                </LayoutRouterContext.Provider>\n              </AppRouterContext.Provider>\n            </GlobalLayoutRouterContext.Provider>\n          </SearchParamsContext.Provider>\n        </PathnameContext.Provider>\n      </PathParamsContext.Provider>\n    </>\n  )\n}\n\nexport default function AppRouter({\n  actionQueue,\n  globalErrorComponentAndStyles: [globalErrorComponent, globalErrorStyles],\n  assetPrefix,\n}: {\n  actionQueue: AppRouterActionQueue\n  globalErrorComponentAndStyles: [ErrorComponent, React.ReactNode | undefined]\n  assetPrefix: string\n}) {\n  useNavFailureHandler()\n\n  return (\n    <ErrorBoundary\n      errorComponent={globalErrorComponent}\n      errorStyles={globalErrorStyles}\n    >\n      <Router actionQueue={actionQueue} assetPrefix={assetPrefix} />\n    </ErrorBoundary>\n  )\n}\n\nconst runtimeStyles = new Set<string>()\nlet runtimeStyleChanged = new Set<() => void>()\n\nglobalThis._N_E_STYLE_LOAD = function (href: string) {\n  let len = runtimeStyles.size\n  runtimeStyles.add(href)\n  if (runtimeStyles.size !== len) {\n    runtimeStyleChanged.forEach((cb) => cb())\n  }\n  // TODO figure out how to get a promise here\n  // But maybe it's not necessary as react would block rendering until it's loaded\n  return Promise.resolve()\n}\n\nfunction RuntimeStyles() {\n  const [, forceUpdate] = React.useState(0)\n  const renderedStylesSize = runtimeStyles.size\n  useEffect(() => {\n    const changed = () => forceUpdate((c) => c + 1)\n    runtimeStyleChanged.add(changed)\n    if (renderedStylesSize !== runtimeStyles.size) {\n      changed()\n    }\n    return () => {\n      runtimeStyleChanged.delete(changed)\n    }\n  }, [renderedStylesSize, forceUpdate])\n\n  const dplId = process.env.NEXT_DEPLOYMENT_ID\n    ? `?dpl=${process.env.NEXT_DEPLOYMENT_ID}`\n    : ''\n  return [...runtimeStyles].map((href, i) => (\n    <link\n      key={i}\n      rel=\"stylesheet\"\n      href={`${href}${dplId}`}\n      // @ts-ignore\n      precedence=\"next\"\n      // TODO figure out crossOrigin and nonce\n      // crossOrigin={TODO}\n      // nonce={TODO}\n    />\n  ))\n}\n"],"names":["createEmptyCacheNode","AppRouter","globalMutable","isExternalURL","url","origin","window","location","HistoryUpdater","appRouterState","useInsertionEffect","process","env","__NEXT_APP_NAV_FAIL_HANDLING","next","__pendingUrl","undefined","tree","pushRef","canonicalUrl","historyState","preserveCustomHistoryState","history","state","__NA","__PRIVATE_NEXTJS_INTERNALS_TREE","pendingPush","createHrefFromUrl","URL","href","pushState","replaceState","lazyData","rsc","prefetchRsc","head","prefetchHead","parallelRoutes","Map","loading","useChangeByServerResponse","dispatch","useCallback","previousTree","serverResponse","startTransition","type","ACTION_SERVER_PATCH","useNavigate","navigateType","shouldScroll","addBasePath","ACTION_NAVIGATE","isExternalUrl","locationSearch","search","allowAliasing","copyNextJsInternalHistoryState","data","currentState","Head","headCacheNode","resolvedPrefetchRsc","useDeferredValue","Router","actionQueue","assetPrefix","useReducer","useUnwrapState","searchParams","pathname","useMemo","hasBasePath","removeBasePath","changeByServerResponse","navigate","useServerActionDispatcher","appRouter","routerInstance","back","forward","prefetch","options","isBot","navigator","userAgent","_","Error","NODE_ENV","ACTION_PREFETCH","kind","PrefetchKind","FULL","replace","scroll","push","refresh","ACTION_REFRESH","hmrRefresh","ACTION_HMR_REFRESH","useEffect","router","cache","prefetchCache","nd","handlePageShow","event","persisted","pendingMpaPath","ACTION_RESTORE","addEventListener","removeEventListener","handleUnhandledRedirect","error","reason","isRedirectError","preventDefault","getURLFromRedirectError","redirectType","getRedirectTypeFromError","RedirectType","mpaNavigation","assign","use","unresolvedThenable","originalPushState","bind","originalReplaceState","applyUrlFromHistoryPushReplace","_unused","_N","onPopState","reload","nextUrl","focusAndScrollRef","buildId","matchingHead","findHeadInCache","pathParams","getSelectedParams","layoutRouterContext","childNodes","globalLayoutRouterContext","headKey","content","RedirectBoundary","AppRouterAnnouncer","DevRootNotFoundBoundary","require","HotReloader","default","RuntimeStyles","PathParamsContext","Provider","value","PathnameContext","SearchParamsContext","GlobalLayoutRouterContext","AppRouterContext","LayoutRouterContext","globalErrorComponentAndStyles","globalErrorComponent","globalErrorStyles","useNavFailureHandler","ErrorBoundary","errorComponent","errorStyles","runtimeStyles","Set","runtimeStyleChanged","globalThis","_N_E_STYLE_LOAD","len","size","add","forEach","cb","Promise","resolve","forceUpdate","React","useState","renderedStylesSize","changed","c","delete","dplId","NEXT_DEPLOYMENT_ID","map","i","link","rel","precedence"],"mappings":"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"}