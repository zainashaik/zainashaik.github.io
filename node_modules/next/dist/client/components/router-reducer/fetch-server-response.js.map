{"version":3,"sources":["../../../../src/client/components/router-reducer/fetch-server-response.ts"],"sourcesContent":["'use client'\n\n// @ts-ignore\n// eslint-disable-next-line import/no-extraneous-dependencies\n// import { createFromReadableStream } from 'react-server-dom-webpack/client'\nconst { createFromReadableStream } = (\n  !!process.env.NEXT_RUNTIME\n    ? // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge')\n    : // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client')\n) as typeof import('react-server-dom-webpack/client')\n\nimport type {\n  FlightRouterState,\n  NavigationFlightResponse,\n} from '../../../server/app-render/types'\nimport {\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_RSC_UNION_QUERY,\n  NEXT_URL,\n  RSC_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n  NEXT_HMR_REFRESH_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n  NEXT_ROUTER_STALE_TIME_HEADER,\n} from '../app-router-headers'\nimport { callServer } from '../../app-call-server'\nimport { findSourceMapURL } from '../../app-find-source-map-url'\nimport { PrefetchKind } from './router-reducer-types'\nimport { hexHash } from '../../../shared/lib/hash'\nimport {\n  normalizeFlightData,\n  type NormalizedFlightData,\n} from '../../flight-data-helpers'\n\nexport interface FetchServerResponseOptions {\n  readonly flightRouterState: FlightRouterState\n  readonly nextUrl: string | null\n  readonly buildId: string\n  readonly prefetchKind?: PrefetchKind\n  readonly isHmrRefresh?: boolean\n}\n\nexport type FetchServerResponseResult = {\n  flightData: NormalizedFlightData[] | string\n  canonicalUrl: URL | undefined\n  couldBeIntercepted: boolean\n  prerendered: boolean\n  postponed: boolean\n  staleTime: number\n}\n\nfunction urlToUrlWithoutFlightMarker(url: string): URL {\n  const urlWithoutFlightParameters = new URL(url, location.origin)\n  urlWithoutFlightParameters.searchParams.delete(NEXT_RSC_UNION_QUERY)\n  if (process.env.NODE_ENV === 'production') {\n    if (\n      process.env.__NEXT_CONFIG_OUTPUT === 'export' &&\n      urlWithoutFlightParameters.pathname.endsWith('.txt')\n    ) {\n      const { pathname } = urlWithoutFlightParameters\n      const length = pathname.endsWith('/index.txt') ? 10 : 4\n      // Slice off `/index.txt` or `.txt` from the end of the pathname\n      urlWithoutFlightParameters.pathname = pathname.slice(0, -length)\n    }\n  }\n  return urlWithoutFlightParameters\n}\n\nfunction doMpaNavigation(url: string): FetchServerResponseResult {\n  return {\n    flightData: urlToUrlWithoutFlightMarker(url).toString(),\n    canonicalUrl: undefined,\n    couldBeIntercepted: false,\n    prerendered: false,\n    postponed: false,\n    staleTime: -1,\n  }\n}\n\n/**\n * Fetch the flight data for the provided url. Takes in the current router state\n * to decide what to render server-side.\n */\nexport async function fetchServerResponse(\n  url: URL,\n  options: FetchServerResponseOptions\n): Promise<FetchServerResponseResult> {\n  const { flightRouterState, nextUrl, buildId, prefetchKind } = options\n\n  const headers: {\n    [RSC_HEADER]: '1'\n    [NEXT_ROUTER_STATE_TREE_HEADER]: string\n    [NEXT_URL]?: string\n    [NEXT_ROUTER_PREFETCH_HEADER]?: '1'\n    'x-deployment-id'?: string\n    [NEXT_HMR_REFRESH_HEADER]?: '1'\n    // A header that is only added in test mode to assert on fetch priority\n    'Next-Test-Fetch-Priority'?: RequestInit['priority']\n  } = {\n    // Enable flight response\n    [RSC_HEADER]: '1',\n    // Provide the current router state\n    [NEXT_ROUTER_STATE_TREE_HEADER]: encodeURIComponent(\n      JSON.stringify(flightRouterState)\n    ),\n  }\n\n  /**\n   * Three cases:\n   * - `prefetchKind` is `undefined`, it means it's a normal navigation, so we want to prefetch the page data fully\n   * - `prefetchKind` is `full` - we want to prefetch the whole page so same as above\n   * - `prefetchKind` is `auto` - if the page is dynamic, prefetch the page data partially, if static prefetch the page data fully\n   */\n  if (prefetchKind === PrefetchKind.AUTO) {\n    headers[NEXT_ROUTER_PREFETCH_HEADER] = '1'\n  }\n\n  if (process.env.NODE_ENV === 'development' && options.isHmrRefresh) {\n    headers[NEXT_HMR_REFRESH_HEADER] = '1'\n  }\n\n  if (nextUrl) {\n    headers[NEXT_URL] = nextUrl\n  }\n\n  if (process.env.NEXT_DEPLOYMENT_ID) {\n    headers['x-deployment-id'] = process.env.NEXT_DEPLOYMENT_ID\n  }\n\n  const uniqueCacheQuery = hexHash(\n    [\n      headers[NEXT_ROUTER_PREFETCH_HEADER] || '0',\n      headers[NEXT_ROUTER_STATE_TREE_HEADER],\n      headers[NEXT_URL],\n    ].join(',')\n  )\n\n  try {\n    let fetchUrl = new URL(url)\n    if (process.env.NODE_ENV === 'production') {\n      if (process.env.__NEXT_CONFIG_OUTPUT === 'export') {\n        if (fetchUrl.pathname.endsWith('/')) {\n          fetchUrl.pathname += 'index.txt'\n        } else {\n          fetchUrl.pathname += '.txt'\n        }\n      }\n    }\n\n    // Add unique cache query to avoid caching conflicts on CDN which don't respect the Vary header\n    fetchUrl.searchParams.set(NEXT_RSC_UNION_QUERY, uniqueCacheQuery)\n\n    // When creating a \"temporary\" prefetch (the \"on-demand\" prefetch that gets created on navigation, if one doesn't exist)\n    // we send the request with a \"high\" priority as it's in response to a user interaction that could be blocking a transition.\n    // Otherwise, all other prefetches are sent with a \"low\" priority.\n    // We use \"auto\" for in all other cases to match the existing default, as this function is shared outside of prefetching.\n    const fetchPriority = prefetchKind\n      ? prefetchKind === PrefetchKind.TEMPORARY\n        ? 'high'\n        : 'low'\n      : 'auto'\n\n    if (process.env.__NEXT_TEST_MODE) {\n      headers['Next-Test-Fetch-Priority'] = fetchPriority\n    }\n\n    const res = await fetch(fetchUrl, {\n      // Backwards compat for older browsers. `same-origin` is the default in modern browsers.\n      credentials: 'same-origin',\n      headers,\n      priority: fetchPriority,\n    })\n\n    const responseUrl = urlToUrlWithoutFlightMarker(res.url)\n    const canonicalUrl = res.redirected ? responseUrl : undefined\n\n    const contentType = res.headers.get('content-type') || ''\n    const interception = !!res.headers.get('vary')?.includes(NEXT_URL)\n    const postponed = !!res.headers.get(NEXT_DID_POSTPONE_HEADER)\n    const staleTimeHeader = res.headers.get(NEXT_ROUTER_STALE_TIME_HEADER)\n    const staleTime =\n      staleTimeHeader !== null ? parseInt(staleTimeHeader, 10) : -1\n    let isFlightResponse = contentType.startsWith(RSC_CONTENT_TYPE_HEADER)\n\n    if (process.env.NODE_ENV === 'production') {\n      if (process.env.__NEXT_CONFIG_OUTPUT === 'export') {\n        if (!isFlightResponse) {\n          isFlightResponse = contentType.startsWith('text/plain')\n        }\n      }\n    }\n\n    // If fetch returns something different than flight response handle it like a mpa navigation\n    // If the fetch was not 200, we also handle it like a mpa navigation\n    if (!isFlightResponse || !res.ok || !res.body) {\n      // in case the original URL came with a hash, preserve it before redirecting to the new URL\n      if (url.hash) {\n        responseUrl.hash = url.hash\n      }\n\n      return doMpaNavigation(responseUrl.toString())\n    }\n\n    // We may navigate to a page that requires a different Webpack runtime.\n    // In prod, every page will have the same Webpack runtime.\n    // In dev, the Webpack runtime is minimal for each page.\n    // We need to ensure the Webpack runtime is updated before executing client-side JS of the new page.\n    if (process.env.NODE_ENV !== 'production' && !process.env.TURBOPACK) {\n      await require('../react-dev-overlay/app/hot-reloader-client').waitForWebpackRuntimeHotUpdate()\n    }\n\n    // Handle the `fetch` readable stream that can be unwrapped by `React.use`.\n    const flightStream = postponed\n      ? createUnclosingPrefetchStream(res.body)\n      : res.body\n    const response: NavigationFlightResponse = await createFromReadableStream(\n      flightStream,\n      { callServer, findSourceMapURL }\n    )\n\n    if (buildId !== response.b) {\n      return doMpaNavigation(res.url)\n    }\n\n    return {\n      flightData: normalizeFlightData(response.f),\n      canonicalUrl: canonicalUrl,\n      couldBeIntercepted: interception,\n      prerendered: response.S,\n      postponed,\n      staleTime,\n    }\n  } catch (err) {\n    console.error(\n      `Failed to fetch RSC payload for ${url}. Falling back to browser navigation.`,\n      err\n    )\n    // If fetch fails handle it like a mpa navigation\n    // TODO-APP: Add a test for the case where a CORS request fails, e.g. external url redirect coming from the response.\n    // See https://github.com/vercel/next.js/issues/43605#issuecomment-1451617521 for a reproduction.\n    return {\n      flightData: url.toString(),\n      canonicalUrl: undefined,\n      couldBeIntercepted: false,\n      prerendered: false,\n      postponed: false,\n      staleTime: -1,\n    }\n  }\n}\n\nfunction createUnclosingPrefetchStream(\n  originalFlightStream: ReadableStream<Uint8Array>\n): ReadableStream<Uint8Array> {\n  // When PPR is enabled, prefetch streams may contain references that never\n  // resolve, because that's how we encode dynamic data access. In the decoded\n  // object returned by the Flight client, these are reified into hanging\n  // promises that suspend during render, which is effectively what we want.\n  // The UI resolves when it switches to the dynamic data stream\n  // (via useDeferredValue(dynamic, static)).\n  //\n  // However, the Flight implementation currently errors if the server closes\n  // the response before all the references are resolved. As a cheat to work\n  // around this, we wrap the original stream in a new stream that never closes,\n  // and therefore doesn't error.\n  const reader = originalFlightStream.getReader()\n  return new ReadableStream({\n    async pull(controller) {\n      while (true) {\n        const { done, value } = await reader.read()\n        if (!done) {\n          // Pass to the target stream and keep consuming the Flight response\n          // from the server.\n          controller.enqueue(value)\n          continue\n        }\n        // The server stream has closed. Exit, but intentionally do not close\n        // the target stream.\n        return\n      }\n    },\n  })\n}\n"],"names":["fetchServerResponse","createFromReadableStream","process","env","NEXT_RUNTIME","require","urlToUrlWithoutFlightMarker","url","urlWithoutFlightParameters","URL","location","origin","searchParams","delete","NEXT_RSC_UNION_QUERY","NODE_ENV","__NEXT_CONFIG_OUTPUT","pathname","endsWith","length","slice","doMpaNavigation","flightData","toString","canonicalUrl","undefined","couldBeIntercepted","prerendered","postponed","staleTime","options","flightRouterState","nextUrl","buildId","prefetchKind","headers","RSC_HEADER","NEXT_ROUTER_STATE_TREE_HEADER","encodeURIComponent","JSON","stringify","PrefetchKind","AUTO","NEXT_ROUTER_PREFETCH_HEADER","isHmrRefresh","NEXT_HMR_REFRESH_HEADER","NEXT_URL","NEXT_DEPLOYMENT_ID","uniqueCacheQuery","hexHash","join","res","fetchUrl","set","fetchPriority","TEMPORARY","__NEXT_TEST_MODE","fetch","credentials","priority","responseUrl","redirected","contentType","get","interception","includes","NEXT_DID_POSTPONE_HEADER","staleTimeHeader","NEXT_ROUTER_STALE_TIME_HEADER","parseInt","isFlightResponse","startsWith","RSC_CONTENT_TYPE_HEADER","ok","body","hash","TURBOPACK","waitForWebpackRuntimeHotUpdate","flightStream","createUnclosingPrefetchStream","response","callServer","findSourceMapURL","b","normalizeFlightData","f","S","err","console","error","originalFlightStream","reader","getReader","ReadableStream","pull","controller","done","value","read","enqueue"],"mappings":"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"}