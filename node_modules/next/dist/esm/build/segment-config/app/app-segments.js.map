{"version":3,"sources":["../../../../src/build/segment-config/app/app-segments.ts"],"sourcesContent":["import type { LoadComponentsReturnType } from '../../../server/load-components'\nimport type { Params } from '../../../server/request/params'\nimport type {\n  AppPageRouteModule,\n  AppPageModule,\n} from '../../../server/route-modules/app-page/module.compiled'\nimport type {\n  AppRouteRouteModule,\n  AppRouteModule,\n} from '../../../server/route-modules/app-route/module.compiled'\nimport {\n  type AppSegmentConfig,\n  parseAppSegmentConfig,\n} from './app-segment-config'\n\nimport { InvariantError } from '../../../shared/lib/invariant-error'\nimport {\n  isAppRouteRouteModule,\n  isAppPageRouteModule,\n} from '../../../server/route-modules/checks'\nimport { isClientReference } from '../../../lib/client-reference'\nimport { getSegmentParam } from '../../../server/app-render/get-segment-param'\nimport { getLayoutOrPageModule } from '../../../server/lib/app-dir-module'\n\ntype GenerateStaticParams = (options: { params?: Params }) => Promise<Params[]>\n\n/**\n * Parses the app config and attaches it to the segment.\n */\nfunction attach(segment: AppSegment, userland: unknown, route: string) {\n  // If the userland is not an object, then we can't do anything with it.\n  if (typeof userland !== 'object' || userland === null) {\n    return\n  }\n\n  // Try to parse the application configuration.\n  const config = parseAppSegmentConfig(userland, route)\n\n  // If there was any keys on the config, then attach it to the segment.\n  if (Object.keys(config).length > 0) {\n    segment.config = config\n  }\n\n  if (\n    'generateStaticParams' in userland &&\n    typeof userland.generateStaticParams === 'function'\n  ) {\n    segment.generateStaticParams =\n      userland.generateStaticParams as GenerateStaticParams\n\n    // Validate that `generateStaticParams` makes sense in this context.\n    if (segment.config?.runtime === 'edge') {\n      throw new Error(\n        'Edge runtime is not supported with `generateStaticParams`.'\n      )\n    }\n  }\n}\n\nexport type AppSegment = {\n  name: string\n  param: string | undefined\n  filePath: string | undefined\n  config: AppSegmentConfig | undefined\n  isDynamicSegment: boolean\n  generateStaticParams: GenerateStaticParams | undefined\n}\n\n/**\n * Walks the loader tree and collects the generate parameters for each segment.\n *\n * @param routeModule the app page route module\n * @returns the segments for the app page route module\n */\nasync function collectAppPageSegments(routeModule: AppPageRouteModule) {\n  const segments: AppSegment[] = []\n\n  let current = routeModule.userland.loaderTree\n  while (current) {\n    const [name, parallelRoutes] = current\n    const { mod: userland, filePath } = await getLayoutOrPageModule(current)\n\n    const isClientComponent: boolean = userland && isClientReference(userland)\n    const isDynamicSegment = /^\\[.*\\]$/.test(name)\n    const param = isDynamicSegment ? getSegmentParam(name)?.param : undefined\n\n    const segment: AppSegment = {\n      name,\n      param,\n      filePath,\n      config: undefined,\n      isDynamicSegment,\n      generateStaticParams: undefined,\n    }\n\n    // Only server components can have app segment configurations. If this isn't\n    // an object, then we should skip it. This can happen when parsing the\n    // error components.\n    if (!isClientComponent) {\n      attach(segment, userland, routeModule.definition.pathname)\n    }\n\n    segments.push(segment)\n\n    // Use this route's parallel route children as the next segment.\n    current = parallelRoutes.children\n  }\n\n  return segments\n}\n\n/**\n * Collects the segments for a given app route module.\n *\n * @param routeModule the app route module\n * @returns the segments for the app route module\n */\nfunction collectAppRouteSegments(\n  routeModule: AppRouteRouteModule\n): AppSegment[] {\n  // Get the pathname parts, slice off the first element (which is empty).\n  const parts = routeModule.definition.pathname.split('/').slice(1)\n  if (parts.length === 0) {\n    throw new InvariantError('Expected at least one segment')\n  }\n\n  // Generate all the segments.\n  const segments: AppSegment[] = parts.map((name) => {\n    const isDynamicSegment = /^\\[.*\\]$/.test(name)\n    const param = isDynamicSegment ? getSegmentParam(name)?.param : undefined\n\n    return {\n      name,\n      param,\n      filePath: undefined,\n      isDynamicSegment,\n      config: undefined,\n      generateStaticParams: undefined,\n    }\n  })\n\n  // We know we have at least one, we verified this above. We should get the\n  // last segment which represents the root route module.\n  const segment = segments[segments.length - 1]\n\n  segment.filePath = routeModule.definition.filename\n\n  // Extract the segment config from the userland module.\n  attach(segment, routeModule.userland, routeModule.definition.pathname)\n\n  return segments\n}\n\n/**\n * Collects the segments for a given route module.\n *\n * @param components the loaded components\n * @returns the segments for the route module\n */\nexport function collectSegments({\n  routeModule,\n}: LoadComponentsReturnType<AppPageModule | AppRouteModule>):\n  | Promise<AppSegment[]>\n  | AppSegment[] {\n  if (isAppRouteRouteModule(routeModule)) {\n    return collectAppRouteSegments(routeModule)\n  }\n\n  if (isAppPageRouteModule(routeModule)) {\n    return collectAppPageSegments(routeModule)\n  }\n\n  throw new InvariantError(\n    'Expected a route module to be one of app route or page'\n  )\n}\n"],"names":["parseAppSegmentConfig","InvariantError","isAppRouteRouteModule","isAppPageRouteModule","isClientReference","getSegmentParam","getLayoutOrPageModule","attach","segment","userland","route","config","Object","keys","length","generateStaticParams","runtime","Error","collectAppPageSegments","routeModule","segments","current","loaderTree","name","parallelRoutes","mod","filePath","isClientComponent","isDynamicSegment","test","param","undefined","definition","pathname","push","children","collectAppRouteSegments","parts","split","slice","map","filename","collectSegments"],"mappings":"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"}