{"version":3,"sources":["../../../src/build/flying-shuttle/detect-changed-entries.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport crypto from 'crypto'\nimport { execSync } from 'child_process'\nimport { getPageFromPath } from '../entries'\nimport originalDebug from 'next/dist/compiled/debug'\nimport { Sema } from 'next/dist/compiled/async-sema'\nimport { generateShuttleManifest, type ShuttleManifest } from './store-shuttle'\nimport type { NextConfigComplete } from '../../server/config-shared'\nimport { updateIncrementalBuildMetrics } from '../../diagnostics/build-diagnostics'\n\nconst debug = originalDebug('next:build:flying-shuttle')\n\nexport interface DetectedEntriesResult {\n  app: string[]\n  pages: string[]\n}\n\nfunction deepEqual(obj1: any, obj2: any) {\n  if (obj1 === obj2) return true\n\n  if (\n    typeof obj1 !== 'object' ||\n    obj1 === null ||\n    typeof obj2 !== 'object' ||\n    obj2 === null\n  ) {\n    return false\n  }\n\n  let keys1 = Object.keys(obj1)\n  let keys2 = Object.keys(obj2)\n\n  if (keys1.length !== keys2.length) return false\n\n  for (let key of keys1) {\n    if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n      return false\n    }\n  }\n\n  return true\n}\n\nlet _hasShuttle: undefined | boolean = undefined\nexport async function hasShuttle(\n  config: NextConfigComplete,\n  shuttleDir: string\n) {\n  if (typeof _hasShuttle === 'boolean') {\n    return _hasShuttle\n  }\n  let foundShuttleManifest: ShuttleManifest\n\n  async function pruneCache() {\n    await fs.promises.rm(shuttleDir, { force: true, recursive: true })\n    await fs.promises.mkdir(shuttleDir, { recursive: true })\n  }\n\n  try {\n    foundShuttleManifest = JSON.parse(\n      await fs.promises.readFile(\n        path.join(shuttleDir, 'shuttle-manifest.json'),\n        'utf8'\n      )\n    )\n    _hasShuttle = true\n  } catch (err: unknown) {\n    _hasShuttle = false\n    console.log(`Failed to read shuttle manifest`)\n    // prune potentially corrupted cache\n    await pruneCache()\n    return _hasShuttle\n  }\n  const currentShuttleManifest = JSON.parse(\n    generateShuttleManifest(config)\n  ) as ShuttleManifest\n\n  if (currentShuttleManifest.nextVersion !== foundShuttleManifest.nextVersion) {\n    // we don't allow using shuttle from differing Next.js version\n    // as it could have internal changes\n    console.log(\n      `shuttle has differing Next.js version ${foundShuttleManifest.nextVersion} versus current ${currentShuttleManifest.nextVersion}, skipping.`\n    )\n    _hasShuttle = false\n  }\n\n  if (!deepEqual(currentShuttleManifest.config, foundShuttleManifest.config)) {\n    _hasShuttle = false\n    console.log(\n      `Mismatching shuttle configs`,\n      currentShuttleManifest.config,\n      foundShuttleManifest.config\n    )\n  }\n\n  if (_hasShuttle) {\n    let currentGitSha = ''\n\n    try {\n      currentGitSha = execSync('git rev-parse HEAD').toString().trim()\n    } catch (_) {}\n\n    await updateIncrementalBuildMetrics({\n      currentGitSha,\n      shuttleGitSha: currentShuttleManifest.gitSha,\n    })\n  } else {\n    // prune mis-matching cache\n    await pruneCache()\n  }\n  return _hasShuttle\n}\n\nexport async function detectChangedEntries({\n  appPaths,\n  pagesPaths,\n  pageExtensions,\n  distDir,\n  shuttleDir,\n  config,\n}: {\n  appPaths?: string[]\n  pagesPaths?: string[]\n  pageExtensions: string[]\n  distDir: string\n  shuttleDir: string\n  config: NextConfigComplete\n}): Promise<{\n  changed: DetectedEntriesResult\n  unchanged: DetectedEntriesResult\n}> {\n  const changedEntries: {\n    app: string[]\n    pages: string[]\n  } = {\n    app: [],\n    pages: [],\n  }\n  const unchangedEntries: typeof changedEntries = {\n    app: [],\n    pages: [],\n  }\n\n  if (!(await hasShuttle(config, shuttleDir))) {\n    // no shuttle so consider everything changed\n    console.log(`no shuttle. can't detect changes`)\n    return {\n      changed: {\n        pages: pagesPaths || [],\n        app: appPaths || [],\n      },\n      unchanged: {\n        pages: [],\n        app: [],\n      },\n    }\n  }\n\n  const hashCache = new Map<string, string>()\n\n  async function computeHash(p: string): Promise<string> {\n    let hash = hashCache.get(p)\n    if (hash) {\n      return hash\n    }\n    return new Promise((resolve, reject) => {\n      const hashInst = crypto.createHash('sha1')\n      const stream = fs.createReadStream(p)\n      stream.on('error', (err) => reject(err))\n      stream.on('data', (chunk) => hashInst.update(chunk))\n      stream.on('end', () => {\n        const digest = hashInst.digest('hex')\n        resolve(digest)\n        hashCache.set(p, digest)\n      })\n    })\n  }\n\n  const hashSema = new Sema(16)\n  let globalEntryChanged = false\n  const changedDependencies: Record<string, string> = {}\n\n  async function detectChange({\n    normalizedEntry,\n    entry,\n    type,\n  }: {\n    entry: string\n    normalizedEntry: string\n    type: keyof typeof changedEntries\n  }) {\n    const traceFile = path.join(\n      shuttleDir,\n      'server',\n      type,\n      `${normalizedEntry}.js.nft.json`\n    )\n    let changed = true\n\n    // we don't need to check any further entry's dependencies if\n    // a global entry changed since that invalidates everything\n    if (!globalEntryChanged) {\n      try {\n        const traceData: {\n          fileHashes: Record<string, string>\n        } = JSON.parse(await fs.promises.readFile(traceFile, 'utf8'))\n\n        if (traceData) {\n          let changedDependency = false\n          await Promise.all(\n            Object.keys(traceData.fileHashes).map(async (file) => {\n              try {\n                if (changedDependency) return\n                await hashSema.acquire()\n                const relativeTraceFile = path.relative(\n                  path.join(shuttleDir, 'server', type),\n                  traceFile\n                )\n                const originalTraceFile = path.join(\n                  distDir,\n                  'server',\n                  type,\n                  relativeTraceFile\n                )\n                const absoluteFile = path.join(\n                  path.dirname(originalTraceFile),\n                  file\n                )\n\n                if (absoluteFile.startsWith(distDir)) {\n                  return\n                }\n\n                const prevHash = traceData.fileHashes[file]\n                const curHash = await computeHash(absoluteFile)\n\n                if (prevHash !== curHash) {\n                  changedDependencies[normalizedEntry] = file\n                  debug('detected change on', {\n                    prevHash,\n                    curHash,\n                    file,\n                    entry: normalizedEntry,\n                  })\n                  changedDependency = true\n                }\n              } finally {\n                hashSema.release()\n              }\n            })\n          )\n\n          if (!changedDependency) {\n            changed = false\n          }\n        } else {\n          console.error('missing trace data', traceFile, normalizedEntry)\n        }\n      } catch (err) {\n        console.error(\n          `Failed to detect change for ${entry} ${normalizedEntry}`,\n          err\n        )\n      }\n    }\n\n    // we always rebuild global entries so we have a version\n    // that matches the newest build/runtime\n    const isGlobalEntry = /(_app|_document|_error)/.test(entry)\n\n    if (changed || isGlobalEntry) {\n      // if a global entry changed all entries are changed\n      if (changed && !globalEntryChanged && isGlobalEntry) {\n        console.log(`global entry ${entry} changed invalidating all entries`)\n        globalEntryChanged = true\n        // move unchanged to changed\n        changedEntries[type].push(...unchangedEntries[type])\n      }\n      changedEntries[type].push(entry)\n    } else {\n      unchangedEntries[type].push(entry)\n    }\n  }\n\n  // loop over entries and their dependency's hashes\n  // to detect which changed\n  for (const entry of pagesPaths || []) {\n    let normalizedEntry = getPageFromPath(entry, pageExtensions)\n\n    if (normalizedEntry === '/') {\n      normalizedEntry = '/index'\n    }\n    await detectChange({ entry, normalizedEntry, type: 'pages' })\n  }\n\n  for (const entry of appPaths || []) {\n    let normalizedEntry = getPageFromPath(entry, pageExtensions)\n\n    if (normalizedEntry === '/not-found') {\n      normalizedEntry = '/_not-found/page'\n    }\n    await detectChange({ entry, normalizedEntry, type: 'app' })\n  }\n  await updateIncrementalBuildMetrics({ changedDependencies })\n\n  return {\n    changed: changedEntries,\n    unchanged: unchangedEntries,\n  }\n}\n"],"names":["fs","path","crypto","execSync","getPageFromPath","originalDebug","Sema","generateShuttleManifest","updateIncrementalBuildMetrics","debug","deepEqual","obj1","obj2","keys1","Object","keys","keys2","length","key","includes","_hasShuttle","undefined","hasShuttle","config","shuttleDir","foundShuttleManifest","pruneCache","promises","rm","force","recursive","mkdir","JSON","parse","readFile","join","err","console","log","currentShuttleManifest","nextVersion","currentGitSha","toString","trim","_","shuttleGitSha","gitSha","detectChangedEntries","appPaths","pagesPaths","pageExtensions","distDir","changedEntries","app","pages","unchangedEntries","changed","unchanged","hashCache","Map","computeHash","p","hash","get","Promise","resolve","reject","hashInst","createHash","stream","createReadStream","on","chunk","update","digest","set","hashSema","globalEntryChanged","changedDependencies","detectChange","normalizedEntry","entry","type","traceFile","traceData","changedDependency","all","fileHashes","map","file","acquire","relativeTraceFile","relative","originalTraceFile","absoluteFile","dirname","startsWith","prevHash","curHash","release","error","isGlobalEntry","test","push"],"mappings":"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"}