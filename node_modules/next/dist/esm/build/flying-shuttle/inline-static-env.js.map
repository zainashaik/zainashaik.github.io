{"version":3,"sources":["../../../src/build/flying-shuttle/inline-static-env.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport { promisify } from 'util'\nimport globOriginal from 'next/dist/compiled/glob'\nimport {\n  getNextConfigEnv,\n  getNextPublicEnvironmentVariables,\n} from '../webpack/plugins/define-env-plugin'\nimport { Sema } from 'next/dist/compiled/async-sema'\nimport type { NextConfigComplete } from '../../server/config-shared'\n\nconst glob = promisify(globOriginal)\n\nexport async function inlineStaticEnv({\n  distDir,\n  config,\n}: {\n  distDir: string\n  config: NextConfigComplete\n}) {\n  const nextConfigEnv = getNextConfigEnv(config)\n\n  const staticEnv = {\n    ...getNextPublicEnvironmentVariables(),\n    ...nextConfigEnv,\n  }\n\n  const serverDir = path.join(distDir, 'server')\n  const serverChunks = await glob('**/*.js', {\n    cwd: serverDir,\n  })\n  const clientDir = path.join(distDir, 'static')\n  const clientChunks = await glob('**/*.js', {\n    cwd: clientDir,\n  })\n\n  const inlineSema = new Sema(8)\n  const nextConfigEnvKeys = Object.keys(nextConfigEnv).map((item) =>\n    item.split('process.env.').pop()\n  )\n\n  const builtRegEx = new RegExp(\n    `[\\\\w]{1,}\\\\.env\\\\.(?:NEXT_PUBLIC_[\\\\w]{1,}${nextConfigEnvKeys.length ? '|' + nextConfigEnvKeys.join('|') : ''})`,\n    'g'\n  )\n\n  for (const [parentDir, files] of [\n    [serverDir, serverChunks],\n    [clientDir, clientChunks],\n  ] as const) {\n    await Promise.all(\n      files.map(async (file) => {\n        await inlineSema.acquire()\n        const filepath = path.join(parentDir, file)\n        const content = await fs.promises.readFile(filepath, 'utf8')\n\n        await fs.promises.writeFile(\n          filepath,\n          content.replace(builtRegEx, (match) => {\n            let normalizedMatch = `process.env.${match.split('.').pop()}`\n\n            if (staticEnv[normalizedMatch]) {\n              return JSON.stringify(staticEnv[normalizedMatch])\n            }\n            return match\n          })\n        )\n        inlineSema.release()\n      })\n    )\n  }\n}\n"],"names":["fs","path","promisify","globOriginal","getNextConfigEnv","getNextPublicEnvironmentVariables","Sema","glob","inlineStaticEnv","distDir","config","nextConfigEnv","staticEnv","serverDir","join","serverChunks","cwd","clientDir","clientChunks","inlineSema","nextConfigEnvKeys","Object","keys","map","item","split","pop","builtRegEx","RegExp","length","parentDir","files","Promise","all","file","acquire","filepath","content","promises","readFile","writeFile","replace","match","normalizedMatch","JSON","stringify","release"],"mappings":"AAAA,OAAOA,QAAQ,KAAI;AACnB,OAAOC,UAAU,OAAM;AACvB,SAASC,SAAS,QAAQ,OAAM;AAChC,OAAOC,kBAAkB,0BAAyB;AAClD,SACEC,gBAAgB,EAChBC,iCAAiC,QAC5B,uCAAsC;AAC7C,SAASC,IAAI,QAAQ,gCAA+B;AAGpD,MAAMC,OAAOL,UAAUC;AAEvB,OAAO,eAAeK,gBAAgB,EACpCC,OAAO,EACPC,MAAM,EAIP;IACC,MAAMC,gBAAgBP,iBAAiBM;IAEvC,MAAME,YAAY;QAChB,GAAGP,mCAAmC;QACtC,GAAGM,aAAa;IAClB;IAEA,MAAME,YAAYZ,KAAKa,IAAI,CAACL,SAAS;IACrC,MAAMM,eAAe,MAAMR,KAAK,WAAW;QACzCS,KAAKH;IACP;IACA,MAAMI,YAAYhB,KAAKa,IAAI,CAACL,SAAS;IACrC,MAAMS,eAAe,MAAMX,KAAK,WAAW;QACzCS,KAAKC;IACP;IAEA,MAAME,aAAa,IAAIb,KAAK;IAC5B,MAAMc,oBAAoBC,OAAOC,IAAI,CAACX,eAAeY,GAAG,CAAC,CAACC,OACxDA,KAAKC,KAAK,CAAC,gBAAgBC,GAAG;IAGhC,MAAMC,aAAa,IAAIC,OACrB,CAAC,0CAA0C,EAAER,kBAAkBS,MAAM,GAAG,MAAMT,kBAAkBN,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,EACjH;IAGF,KAAK,MAAM,CAACgB,WAAWC,MAAM,IAAI;QAC/B;YAAClB;YAAWE;SAAa;QACzB;YAACE;YAAWC;SAAa;KAC1B,CAAW;QACV,MAAMc,QAAQC,GAAG,CACfF,MAAMR,GAAG,CAAC,OAAOW;YACf,MAAMf,WAAWgB,OAAO;YACxB,MAAMC,WAAWnC,KAAKa,IAAI,CAACgB,WAAWI;YACtC,MAAMG,UAAU,MAAMrC,GAAGsC,QAAQ,CAACC,QAAQ,CAACH,UAAU;YAErD,MAAMpC,GAAGsC,QAAQ,CAACE,SAAS,CACzBJ,UACAC,QAAQI,OAAO,CAACd,YAAY,CAACe;gBAC3B,IAAIC,kBAAkB,CAAC,YAAY,EAAED,MAAMjB,KAAK,CAAC,KAAKC,GAAG,GAAG,CAAC;gBAE7D,IAAId,SAAS,CAAC+B,gBAAgB,EAAE;oBAC9B,OAAOC,KAAKC,SAAS,CAACjC,SAAS,CAAC+B,gBAAgB;gBAClD;gBACA,OAAOD;YACT;YAEFvB,WAAW2B,OAAO;QACpB;IAEJ;AACF"}