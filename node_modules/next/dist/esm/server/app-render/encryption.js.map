{"version":3,"sources":["../../../src/server/app-render/encryption.ts"],"sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\nimport 'server-only'\n\n/* eslint-disable import/no-extraneous-dependencies */\nimport { renderToReadableStream } from 'react-server-dom-webpack/server.edge'\n/* eslint-disable import/no-extraneous-dependencies */\nimport { createFromReadableStream } from 'react-server-dom-webpack/client.edge'\n\nimport { streamToString } from '../stream-utils/node-web-streams-helper'\nimport {\n  arrayBufferToString,\n  decrypt,\n  encrypt,\n  getActionEncryptionKey,\n  getClientReferenceManifestForRsc,\n  getServerModuleMap,\n  stringToUint8Array,\n} from './encryption-utils'\n\nconst isEdgeRuntime = process.env.NEXT_RUNTIME === 'edge'\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nasync function decodeActionBoundArg(actionId: string, arg: string) {\n  const key = await getActionEncryptionKey()\n  if (typeof key === 'undefined') {\n    throw new Error(\n      `Missing encryption key for Server Action. This is a bug in Next.js`\n    )\n  }\n\n  // Get the iv (16 bytes) and the payload from the arg.\n  const originalPayload = atob(arg)\n  const ivValue = originalPayload.slice(0, 16)\n  const payload = originalPayload.slice(16)\n\n  const decrypted = textDecoder.decode(\n    await decrypt(key, stringToUint8Array(ivValue), stringToUint8Array(payload))\n  )\n\n  if (!decrypted.startsWith(actionId)) {\n    throw new Error('Invalid Server Action payload: failed to decrypt.')\n  }\n\n  return decrypted.slice(actionId.length)\n}\n\nasync function encodeActionBoundArg(actionId: string, arg: string) {\n  const key = await getActionEncryptionKey()\n  if (key === undefined) {\n    throw new Error(\n      `Missing encryption key for Server Action. This is a bug in Next.js`\n    )\n  }\n\n  // Get 16 random bytes as iv.\n  const randomBytes = new Uint8Array(16)\n  crypto.getRandomValues(randomBytes)\n  const ivValue = arrayBufferToString(randomBytes.buffer)\n\n  const encrypted = await encrypt(\n    key,\n    randomBytes,\n    textEncoder.encode(actionId + arg)\n  )\n\n  return btoa(ivValue + arrayBufferToString(encrypted))\n}\n\n// Encrypts the action's bound args into a string.\nexport async function encryptActionBoundArgs(actionId: string, args: any[]) {\n  const { clientModules } = getClientReferenceManifestForRsc()\n\n  // Using Flight to serialize the args into a string.\n  const serialized = await streamToString(\n    renderToReadableStream(args, clientModules)\n  )\n\n  // Encrypt the serialized string with the action id as the salt.\n  // Add a prefix to later ensure that the payload is correctly decrypted, similar\n  // to a checksum.\n  const encrypted = await encodeActionBoundArg(actionId, serialized)\n\n  return encrypted\n}\n\n// Decrypts the action's bound args from the encrypted string.\nexport async function decryptActionBoundArgs(\n  actionId: string,\n  encrypted: Promise<string>\n) {\n  const { edgeRscModuleMapping, rscModuleMapping } =\n    getClientReferenceManifestForRsc()\n\n  // Decrypt the serialized string with the action id as the salt.\n  const decrypted = await decodeActionBoundArg(actionId, await encrypted)\n\n  // Using Flight to deserialize the args from the string.\n  const deserialized = await createFromReadableStream(\n    new ReadableStream({\n      start(controller) {\n        controller.enqueue(textEncoder.encode(decrypted))\n        controller.close()\n      },\n    }),\n    {\n      serverConsumerManifest: {\n        // moduleLoading must be null because we don't want to trigger preloads of ClientReferences\n        // to be added to the current execution. Instead, we'll wait for any ClientReference\n        // to be emitted which themselves will handle the preloading.\n        moduleLoading: null,\n        moduleMap: isEdgeRuntime ? edgeRscModuleMapping : rscModuleMapping,\n        serverModuleMap: getServerModuleMap(),\n      },\n    }\n  )\n\n  return deserialized\n}\n"],"names":["renderToReadableStream","createFromReadableStream","streamToString","arrayBufferToString","decrypt","encrypt","getActionEncryptionKey","getClientReferenceManifestForRsc","getServerModuleMap","stringToUint8Array","isEdgeRuntime","process","env","NEXT_RUNTIME","textEncoder","TextEncoder","textDecoder","TextDecoder","decodeActionBoundArg","actionId","arg","key","Error","originalPayload","atob","ivValue","slice","payload","decrypted","decode","startsWith","length","encodeActionBoundArg","undefined","randomBytes","Uint8Array","crypto","getRandomValues","buffer","encrypted","encode","btoa","encryptActionBoundArgs","args","clientModules","serialized","decryptActionBoundArgs","edgeRscModuleMapping","rscModuleMapping","deserialized","ReadableStream","start","controller","enqueue","close","serverConsumerManifest","moduleLoading","moduleMap","serverModuleMap"],"mappings":"AAAA,oDAAoD,GACpD,OAAO,cAAa;AAEpB,oDAAoD,GACpD,SAASA,sBAAsB,QAAQ,uCAAsC;AAC7E,oDAAoD,GACpD,SAASC,wBAAwB,QAAQ,uCAAsC;AAE/E,SAASC,cAAc,QAAQ,0CAAyC;AACxE,SACEC,mBAAmB,EACnBC,OAAO,EACPC,OAAO,EACPC,sBAAsB,EACtBC,gCAAgC,EAChCC,kBAAkB,EAClBC,kBAAkB,QACb,qBAAoB;AAE3B,MAAMC,gBAAgBC,QAAQC,GAAG,CAACC,YAAY,KAAK;AAEnD,MAAMC,cAAc,IAAIC;AACxB,MAAMC,cAAc,IAAIC;AAExB,eAAeC,qBAAqBC,QAAgB,EAAEC,GAAW;IAC/D,MAAMC,MAAM,MAAMf;IAClB,IAAI,OAAOe,QAAQ,aAAa;QAC9B,MAAM,IAAIC,MACR,CAAC,kEAAkE,CAAC;IAExE;IAEA,sDAAsD;IACtD,MAAMC,kBAAkBC,KAAKJ;IAC7B,MAAMK,UAAUF,gBAAgBG,KAAK,CAAC,GAAG;IACzC,MAAMC,UAAUJ,gBAAgBG,KAAK,CAAC;IAEtC,MAAME,YAAYZ,YAAYa,MAAM,CAClC,MAAMzB,QAAQiB,KAAKZ,mBAAmBgB,UAAUhB,mBAAmBkB;IAGrE,IAAI,CAACC,UAAUE,UAAU,CAACX,WAAW;QACnC,MAAM,IAAIG,MAAM;IAClB;IAEA,OAAOM,UAAUF,KAAK,CAACP,SAASY,MAAM;AACxC;AAEA,eAAeC,qBAAqBb,QAAgB,EAAEC,GAAW;IAC/D,MAAMC,MAAM,MAAMf;IAClB,IAAIe,QAAQY,WAAW;QACrB,MAAM,IAAIX,MACR,CAAC,kEAAkE,CAAC;IAExE;IAEA,6BAA6B;IAC7B,MAAMY,cAAc,IAAIC,WAAW;IACnCC,OAAOC,eAAe,CAACH;IACvB,MAAMT,UAAUtB,oBAAoB+B,YAAYI,MAAM;IAEtD,MAAMC,YAAY,MAAMlC,QACtBgB,KACAa,aACApB,YAAY0B,MAAM,CAACrB,WAAWC;IAGhC,OAAOqB,KAAKhB,UAAUtB,oBAAoBoC;AAC5C;AAEA,kDAAkD;AAClD,OAAO,eAAeG,uBAAuBvB,QAAgB,EAAEwB,IAAW;IACxE,MAAM,EAAEC,aAAa,EAAE,GAAGrC;IAE1B,oDAAoD;IACpD,MAAMsC,aAAa,MAAM3C,eACvBF,uBAAuB2C,MAAMC;IAG/B,gEAAgE;IAChE,gFAAgF;IAChF,iBAAiB;IACjB,MAAML,YAAY,MAAMP,qBAAqBb,UAAU0B;IAEvD,OAAON;AACT;AAEA,8DAA8D;AAC9D,OAAO,eAAeO,uBACpB3B,QAAgB,EAChBoB,SAA0B;IAE1B,MAAM,EAAEQ,oBAAoB,EAAEC,gBAAgB,EAAE,GAC9CzC;IAEF,gEAAgE;IAChE,MAAMqB,YAAY,MAAMV,qBAAqBC,UAAU,MAAMoB;IAE7D,wDAAwD;IACxD,MAAMU,eAAe,MAAMhD,yBACzB,IAAIiD,eAAe;QACjBC,OAAMC,UAAU;YACdA,WAAWC,OAAO,CAACvC,YAAY0B,MAAM,CAACZ;YACtCwB,WAAWE,KAAK;QAClB;IACF,IACA;QACEC,wBAAwB;YACtB,2FAA2F;YAC3F,oFAAoF;YACpF,6DAA6D;YAC7DC,eAAe;YACfC,WAAW/C,gBAAgBqC,uBAAuBC;YAClDU,iBAAiBlD;QACnB;IACF;IAGF,OAAOyC;AACT"}