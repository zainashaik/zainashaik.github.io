{"version":3,"sources":["../../../src/server/app-render/create-component-tree.tsx"],"sourcesContent":["import type {\n  FlightSegmentPath,\n  CacheNodeSeedData,\n  PreloadCallbacks,\n} from './types'\nimport React from 'react'\nimport { isClientReference } from '../../lib/client-reference'\nimport { getLayoutOrPageModule } from '../lib/app-dir-module'\nimport type { LoaderTree } from '../lib/app-dir-module'\nimport { interopDefault } from './interop-default'\nimport { parseLoaderTree } from './parse-loader-tree'\nimport type { CreateSegmentPath, AppRenderContext } from './app-render'\nimport { createComponentStylesAndScripts } from './create-component-styles-and-scripts'\nimport { getLayerAssets } from './get-layer-assets'\nimport { hasLoadingComponentInTree } from './has-loading-component-in-tree'\nimport { validateRevalidate } from '../lib/patch-fetch'\nimport { PARALLEL_ROUTE_DEFAULT_PATH } from '../../client/components/parallel-route-default'\nimport { getTracer } from '../lib/trace/tracer'\nimport { NextNodeServerSpan } from '../lib/trace/constants'\nimport { StaticGenBailoutError } from '../../client/components/static-generation-bailout'\nimport type { LoadingModuleData } from '../../shared/lib/app-router-context.shared-runtime'\nimport type { Params } from '../request/params'\nimport { workUnitAsyncStorage } from './work-unit-async-storage.external'\nimport { OUTLET_BOUNDARY_NAME } from '../../lib/metadata/metadata-constants'\n\n/**\n * Use the provided loader tree to create the React Component tree.\n */\nexport function createComponentTree(props: {\n  createSegmentPath: CreateSegmentPath\n  loaderTree: LoaderTree\n  parentParams: Params\n  rootLayoutIncluded: boolean\n  firstItem?: boolean\n  injectedCSS: Set<string>\n  injectedJS: Set<string>\n  injectedFontPreloadTags: Set<string>\n  getMetadataReady: () => Promise<void>\n  ctx: AppRenderContext\n  missingSlots?: Set<string>\n  preloadCallbacks: PreloadCallbacks\n}): Promise<CacheNodeSeedData> {\n  return getTracer().trace(\n    NextNodeServerSpan.createComponentTree,\n    {\n      spanName: 'build component tree',\n    },\n    () => createComponentTreeInternal(props)\n  )\n}\n\nfunction errorMissingDefaultExport(\n  pagePath: string,\n  convention: string\n): never {\n  const normalizedPagePath = pagePath === '/' ? '' : pagePath\n  throw new Error(\n    `The default export is not a React Component in \"${normalizedPagePath}/${convention}\"`\n  )\n}\n\nconst cacheNodeKey = 'c'\n\nasync function createComponentTreeInternal({\n  createSegmentPath,\n  loaderTree: tree,\n  parentParams,\n  firstItem,\n  rootLayoutIncluded,\n  injectedCSS,\n  injectedJS,\n  injectedFontPreloadTags,\n  getMetadataReady,\n  ctx,\n  missingSlots,\n  preloadCallbacks,\n}: {\n  createSegmentPath: CreateSegmentPath\n  loaderTree: LoaderTree\n  parentParams: Params\n  rootLayoutIncluded: boolean\n  firstItem?: boolean\n  injectedCSS: Set<string>\n  injectedJS: Set<string>\n  injectedFontPreloadTags: Set<string>\n  getMetadataReady: () => Promise<void>\n  ctx: AppRenderContext\n  missingSlots?: Set<string>\n  preloadCallbacks: PreloadCallbacks\n}): Promise<CacheNodeSeedData> {\n  const {\n    renderOpts: { nextConfigOutput, experimental },\n    workStore,\n    componentMod: {\n      NotFoundBoundary,\n      LayoutRouter,\n      RenderFromTemplateContext,\n      OutletBoundary,\n      ClientPageRoot,\n      ClientSegmentRoot,\n      createServerSearchParamsForServerPage,\n      createPrerenderSearchParamsForClientPage,\n      createServerParamsForServerSegment,\n      createPrerenderParamsForClientSegment,\n      serverHooks: { DynamicServerError },\n      Postpone,\n    },\n    pagePath,\n    getDynamicParamFromSegment,\n    isPrefetch,\n    query,\n  } = ctx\n\n  const { page, layoutOrPagePath, segment, modules, parallelRoutes } =\n    parseLoaderTree(tree)\n\n  const { layout, template, error, loading, 'not-found': notFound } = modules\n\n  const injectedCSSWithCurrentLayout = new Set(injectedCSS)\n  const injectedJSWithCurrentLayout = new Set(injectedJS)\n  const injectedFontPreloadTagsWithCurrentLayout = new Set(\n    injectedFontPreloadTags\n  )\n\n  const layerAssets = getLayerAssets({\n    preloadCallbacks,\n    ctx,\n    layoutOrPagePath,\n    injectedCSS: injectedCSSWithCurrentLayout,\n    injectedJS: injectedJSWithCurrentLayout,\n    injectedFontPreloadTags: injectedFontPreloadTagsWithCurrentLayout,\n  })\n\n  const [Template, templateStyles, templateScripts] = template\n    ? await createComponentStylesAndScripts({\n        ctx,\n        filePath: template[1],\n        getComponent: template[0],\n        injectedCSS: injectedCSSWithCurrentLayout,\n        injectedJS: injectedJSWithCurrentLayout,\n      })\n    : [React.Fragment]\n\n  const [ErrorComponent, errorStyles, errorScripts] = error\n    ? await createComponentStylesAndScripts({\n        ctx,\n        filePath: error[1],\n        getComponent: error[0],\n        injectedCSS: injectedCSSWithCurrentLayout,\n        injectedJS: injectedJSWithCurrentLayout,\n      })\n    : []\n\n  const [Loading, loadingStyles, loadingScripts] = loading\n    ? await createComponentStylesAndScripts({\n        ctx,\n        filePath: loading[1],\n        getComponent: loading[0],\n        injectedCSS: injectedCSSWithCurrentLayout,\n        injectedJS: injectedJSWithCurrentLayout,\n      })\n    : []\n\n  const isLayout = typeof layout !== 'undefined'\n  const isPage = typeof page !== 'undefined'\n  const { mod: layoutOrPageMod } = await getTracer().trace(\n    NextNodeServerSpan.getLayoutOrPageModule,\n    {\n      hideSpan: !(isLayout || isPage),\n      spanName: 'resolve segment modules',\n      attributes: {\n        'next.segment': segment,\n      },\n    },\n    () => getLayoutOrPageModule(tree)\n  )\n\n  /**\n   * Checks if the current segment is a root layout.\n   */\n  const rootLayoutAtThisLevel = isLayout && !rootLayoutIncluded\n  /**\n   * Checks if the current segment or any level above it has a root layout.\n   */\n  const rootLayoutIncludedAtThisLevelOrAbove =\n    rootLayoutIncluded || rootLayoutAtThisLevel\n\n  const [NotFound, notFoundStyles] = notFound\n    ? await createComponentStylesAndScripts({\n        ctx,\n        filePath: notFound[1],\n        getComponent: notFound[0],\n        injectedCSS: injectedCSSWithCurrentLayout,\n        injectedJS: injectedJSWithCurrentLayout,\n      })\n    : []\n\n  let dynamic = layoutOrPageMod?.dynamic\n\n  if (nextConfigOutput === 'export') {\n    if (!dynamic || dynamic === 'auto') {\n      dynamic = 'error'\n    } else if (dynamic === 'force-dynamic') {\n      // force-dynamic is always incompatible with 'export'. We must interrupt the build\n      throw new StaticGenBailoutError(\n        `Page with \\`dynamic = \"force-dynamic\"\\` couldn't be exported. \\`output: \"export\"\\` requires all pages be renderable statically because there is not runtime server to dynamic render routes in this output format. Learn more: https://nextjs.org/docs/app/building-your-application/deploying/static-exports`\n      )\n    }\n  }\n\n  if (typeof dynamic === 'string') {\n    // the nested most config wins so we only force-static\n    // if it's configured above any parent that configured\n    // otherwise\n    if (dynamic === 'error') {\n      workStore.dynamicShouldError = true\n    } else if (dynamic === 'force-dynamic') {\n      workStore.forceDynamic = true\n\n      // TODO: (PPR) remove this bailout once PPR is the default\n      if (workStore.isStaticGeneration && !experimental.isRoutePPREnabled) {\n        // If the postpone API isn't available, we can't postpone the render and\n        // therefore we can't use the dynamic API.\n        const err = new DynamicServerError(\n          `Page with \\`dynamic = \"force-dynamic\"\\` won't be rendered statically.`\n        )\n        workStore.dynamicUsageDescription = err.message\n        workStore.dynamicUsageStack = err.stack\n        throw err\n      }\n    } else {\n      workStore.dynamicShouldError = false\n      workStore.forceStatic = dynamic === 'force-static'\n    }\n  }\n\n  if (typeof layoutOrPageMod?.fetchCache === 'string') {\n    workStore.fetchCache = layoutOrPageMod?.fetchCache\n  }\n\n  if (typeof layoutOrPageMod?.revalidate !== 'undefined') {\n    validateRevalidate(layoutOrPageMod?.revalidate, workStore.route)\n  }\n\n  if (typeof layoutOrPageMod?.revalidate === 'number') {\n    const defaultRevalidate = layoutOrPageMod.revalidate as number\n\n    const workUnitStore = workUnitAsyncStorage.getStore()\n\n    if (workUnitStore) {\n      if (\n        workUnitStore.type === 'prerender' ||\n        workUnitStore.type === 'prerender-legacy' ||\n        workUnitStore.type === 'prerender-ppr' ||\n        workUnitStore.type === 'cache'\n      ) {\n        if (workUnitStore.revalidate > defaultRevalidate) {\n          workUnitStore.revalidate = defaultRevalidate\n        }\n      }\n    }\n\n    if (\n      !workStore.forceStatic &&\n      workStore.isStaticGeneration &&\n      defaultRevalidate === 0 &&\n      // If the postpone API isn't available, we can't postpone the render and\n      // therefore we can't use the dynamic API.\n      !experimental.isRoutePPREnabled\n    ) {\n      const dynamicUsageDescription = `revalidate: 0 configured ${segment}`\n      workStore.dynamicUsageDescription = dynamicUsageDescription\n\n      throw new DynamicServerError(dynamicUsageDescription)\n    }\n  }\n\n  const isStaticGeneration = workStore.isStaticGeneration\n\n  // If there's a dynamic usage error attached to the store, throw it.\n  if (workStore.dynamicUsageErr) {\n    throw workStore.dynamicUsageErr\n  }\n\n  const LayoutOrPage: React.ComponentType<any> | undefined = layoutOrPageMod\n    ? interopDefault(layoutOrPageMod)\n    : undefined\n\n  /**\n   * The React Component to render.\n   */\n  let MaybeComponent = LayoutOrPage\n\n  if (process.env.NODE_ENV === 'development') {\n    const { isValidElementType } = require('next/dist/compiled/react-is')\n    if (\n      (isPage || typeof MaybeComponent !== 'undefined') &&\n      !isValidElementType(MaybeComponent)\n    ) {\n      errorMissingDefaultExport(pagePath, 'page')\n    }\n\n    if (\n      typeof ErrorComponent !== 'undefined' &&\n      !isValidElementType(ErrorComponent)\n    ) {\n      errorMissingDefaultExport(pagePath, 'error')\n    }\n\n    if (typeof Loading !== 'undefined' && !isValidElementType(Loading)) {\n      errorMissingDefaultExport(pagePath, 'loading')\n    }\n\n    if (typeof NotFound !== 'undefined' && !isValidElementType(NotFound)) {\n      errorMissingDefaultExport(pagePath, 'not-found')\n    }\n  }\n\n  // Handle dynamic segment params.\n  const segmentParam = getDynamicParamFromSegment(segment)\n\n  // Create object holding the parent params and current params\n  let currentParams: Params = parentParams\n  if (segmentParam && segmentParam.value !== null) {\n    currentParams = {\n      ...parentParams,\n      [segmentParam.param]: segmentParam.value,\n    }\n  }\n\n  // Resolve the segment param\n  const actualSegment = segmentParam ? segmentParam.treeSegment : segment\n\n  //\n  // TODO: Combine this `map` traversal with the loop below that turns the array\n  // into an object.\n  const parallelRouteMap = await Promise.all(\n    Object.keys(parallelRoutes).map(\n      async (\n        parallelRouteKey\n      ): Promise<[string, React.ReactNode, CacheNodeSeedData | null]> => {\n        const isChildrenRouteKey = parallelRouteKey === 'children'\n        const currentSegmentPath: FlightSegmentPath = firstItem\n          ? [parallelRouteKey]\n          : [actualSegment, parallelRouteKey]\n\n        const parallelRoute = parallelRoutes[parallelRouteKey]\n\n        const notFoundComponent =\n          NotFound && isChildrenRouteKey ? <NotFound /> : undefined\n\n        // if we're prefetching and that there's a Loading component, we bail out\n        // otherwise we keep rendering for the prefetch.\n        // We also want to bail out if there's no Loading component in the tree.\n        let childCacheNodeSeedData: CacheNodeSeedData | null = null\n\n        if (\n          // Before PPR, the way instant navigations work in Next.js is we\n          // prefetch everything up to the first route segment that defines a\n          // loading.tsx boundary. (We do the same if there's no loading\n          // boundary in the entire tree, because we don't want to prefetch too\n          // much) The rest of the tree is deferred until the actual navigation.\n          // It does not take into account whether the data is dynamic — even if\n          // the tree is completely static, it will still defer everything\n          // inside the loading boundary.\n          //\n          // This behavior predates PPR and is only relevant if the\n          // PPR flag is not enabled.\n          isPrefetch &&\n          (Loading || !hasLoadingComponentInTree(parallelRoute)) &&\n          // The approach with PPR is different — loading.tsx behaves like a\n          // regular Suspense boundary and has no special behavior.\n          //\n          // With PPR, we prefetch as deeply as possible, and only defer when\n          // dynamic data is accessed. If so, we only defer the nearest parent\n          // Suspense boundary of the dynamic data access, regardless of whether\n          // the boundary is defined by loading.tsx or a normal <Suspense>\n          // component in userspace.\n          //\n          // NOTE: In practice this usually means we'll end up prefetching more\n          // than we were before PPR, which may or may not be considered a\n          // performance regression by some apps. The plan is to address this\n          // before General Availability of PPR by introducing granular\n          // per-segment fetching, so we can reuse as much of the tree as\n          // possible during both prefetches and dynamic navigations. But during\n          // the beta period, we should be clear about this trade off in our\n          // communications.\n          !experimental.isRoutePPREnabled\n        ) {\n          // Don't prefetch this child. This will trigger a lazy fetch by the\n          // client router.\n        } else {\n          // Create the child component\n\n          if (process.env.NODE_ENV === 'development' && missingSlots) {\n            // When we detect the default fallback (which triggers a 404), we collect the missing slots\n            // to provide more helpful debug information during development mode.\n            const parsedTree = parseLoaderTree(parallelRoute)\n            if (\n              parsedTree.layoutOrPagePath?.endsWith(PARALLEL_ROUTE_DEFAULT_PATH)\n            ) {\n              missingSlots.add(parallelRouteKey)\n            }\n          }\n\n          const seedData = await createComponentTreeInternal({\n            createSegmentPath: (child) => {\n              return createSegmentPath([...currentSegmentPath, ...child])\n            },\n            loaderTree: parallelRoute,\n            parentParams: currentParams,\n            rootLayoutIncluded: rootLayoutIncludedAtThisLevelOrAbove,\n            injectedCSS: injectedCSSWithCurrentLayout,\n            injectedJS: injectedJSWithCurrentLayout,\n            injectedFontPreloadTags: injectedFontPreloadTagsWithCurrentLayout,\n            // getMetadataReady is used to conditionally throw. In the case of parallel routes we will have more than one page\n            // but we only want to throw on the first one.\n            getMetadataReady: isChildrenRouteKey\n              ? getMetadataReady\n              : () => Promise.resolve(),\n            ctx,\n            missingSlots,\n            preloadCallbacks,\n          })\n\n          childCacheNodeSeedData = seedData\n        }\n\n        // This is turned back into an object below.\n        return [\n          parallelRouteKey,\n          <LayoutRouter\n            parallelRouterKey={parallelRouteKey}\n            segmentPath={createSegmentPath(currentSegmentPath)}\n            // TODO-APP: Add test for loading returning `undefined`. This currently can't be tested as the `webdriver()` tab will wait for the full page to load before returning.\n            error={ErrorComponent}\n            errorStyles={errorStyles}\n            errorScripts={errorScripts}\n            template={\n              <Template>\n                <RenderFromTemplateContext />\n              </Template>\n            }\n            templateStyles={templateStyles}\n            templateScripts={templateScripts}\n            notFound={notFoundComponent}\n            notFoundStyles={notFoundStyles}\n          />,\n          childCacheNodeSeedData,\n        ]\n      }\n    )\n  )\n\n  // Convert the parallel route map into an object after all promises have been resolved.\n  let parallelRouteProps: { [key: string]: React.ReactNode } = {}\n  let parallelRouteCacheNodeSeedData: {\n    [key: string]: CacheNodeSeedData | null\n  } = {}\n  for (const parallelRoute of parallelRouteMap) {\n    const [parallelRouteKey, parallelRouteProp, flightData] = parallelRoute\n    parallelRouteProps[parallelRouteKey] = parallelRouteProp\n    parallelRouteCacheNodeSeedData[parallelRouteKey] = flightData\n  }\n\n  const loadingData: LoadingModuleData = Loading\n    ? [<Loading key=\"l\" />, loadingStyles, loadingScripts]\n    : null\n\n  // When the segment does not have a layout or page we still have to add the layout router to ensure the path holds the loading component\n  if (!MaybeComponent) {\n    return [\n      actualSegment,\n      <React.Fragment key={cacheNodeKey}>\n        {layerAssets}\n        {parallelRouteProps.children}\n      </React.Fragment>,\n      parallelRouteCacheNodeSeedData,\n      loadingData,\n    ]\n  }\n\n  const Component = MaybeComponent\n\n  // If force-dynamic is used and the current render supports postponing, we\n  // replace it with a node that will postpone the render. This ensures that the\n  // postpone is invoked during the react render phase and not during the next\n  // render phase.\n  // @TODO this does not actually do what it seems like it would or should do. The idea is that\n  // if we are rendering in a force-dynamic mode and we can postpone we should only make the segments\n  // that ask for force-dynamic to be dynamic, allowing other segments to still prerender. However\n  // because this comes after the children traversal and the static generation store is mutated every segment\n  // along the parent path of a force-dynamic segment will hit this condition effectively making the entire\n  // render force-dynamic. We should refactor this function so that we can correctly track which segments\n  // need to be dynamic\n  if (\n    workStore.isStaticGeneration &&\n    workStore.forceDynamic &&\n    experimental.isRoutePPREnabled\n  ) {\n    return [\n      actualSegment,\n      <React.Fragment key={cacheNodeKey}>\n        <Postpone\n          reason='dynamic = \"force-dynamic\" was used'\n          route={workStore.route}\n        />\n        {layerAssets}\n      </React.Fragment>,\n      parallelRouteCacheNodeSeedData,\n      loadingData,\n    ]\n  }\n\n  const isClientComponent = isClientReference(layoutOrPageMod)\n\n  if (\n    process.env.NODE_ENV === 'development' &&\n    'params' in parallelRouteProps\n  ) {\n    // @TODO consider making this an error and running the check in build as well\n    console.error(\n      `\"params\" is a reserved prop in Layouts and Pages and cannot be used as the name of a parallel route in ${segment}`\n    )\n  }\n\n  if (isPage) {\n    const PageComponent = Component\n    // Assign searchParams to props if this is a page\n    let pageElement: React.ReactNode\n    if (isClientComponent) {\n      if (isStaticGeneration) {\n        const promiseOfParams = createPrerenderParamsForClientSegment(\n          currentParams,\n          workStore\n        )\n        const promiseOfSearchParams =\n          createPrerenderSearchParamsForClientPage(workStore)\n        pageElement = (\n          <ClientPageRoot\n            Component={PageComponent}\n            searchParams={query}\n            params={currentParams}\n            promises={[promiseOfSearchParams, promiseOfParams]}\n          />\n        )\n      } else {\n        pageElement = (\n          <ClientPageRoot\n            Component={PageComponent}\n            searchParams={query}\n            params={currentParams}\n          />\n        )\n      }\n    } else {\n      // If we are passing searchParams to a server component Page we need to track their usage in case\n      // the current render mode tracks dynamic API usage.\n      const params = createServerParamsForServerSegment(\n        currentParams,\n        workStore\n      )\n      const searchParams = createServerSearchParamsForServerPage(\n        query,\n        workStore\n      )\n      pageElement = (\n        <PageComponent params={params} searchParams={searchParams} />\n      )\n    }\n    return [\n      actualSegment,\n      <React.Fragment key={cacheNodeKey}>\n        {pageElement}\n        {layerAssets}\n        <OutletBoundary>\n          <MetadataOutlet ready={getMetadataReady} />\n        </OutletBoundary>\n      </React.Fragment>,\n      parallelRouteCacheNodeSeedData,\n      loadingData,\n    ]\n  } else {\n    const SegmentComponent = Component\n\n    const isRootLayoutWithChildrenSlotAndAtLeastOneMoreSlot =\n      rootLayoutAtThisLevel &&\n      'children' in parallelRoutes &&\n      Object.keys(parallelRoutes).length > 1\n\n    let segmentNode: React.ReactNode\n\n    if (isClientComponent) {\n      let clientSegment: React.ReactNode\n\n      if (isStaticGeneration) {\n        const promiseOfParams = createPrerenderParamsForClientSegment(\n          currentParams,\n          workStore\n        )\n\n        clientSegment = (\n          <ClientSegmentRoot\n            Component={SegmentComponent}\n            slots={parallelRouteProps}\n            params={currentParams}\n            promise={promiseOfParams}\n          />\n        )\n      } else {\n        clientSegment = (\n          <ClientSegmentRoot\n            Component={SegmentComponent}\n            slots={parallelRouteProps}\n            params={currentParams}\n          />\n        )\n      }\n\n      if (isRootLayoutWithChildrenSlotAndAtLeastOneMoreSlot) {\n        // TODO-APP: This is a hack to support unmatched parallel routes, which will throw `notFound()`.\n        // This ensures that a `NotFoundBoundary` is available for when that happens,\n        // but it's not ideal, as it needlessly invokes the `NotFound` component and renders the `RootLayout` twice.\n        // We should instead look into handling the fallback behavior differently in development mode so that it doesn't\n        // rely on the `NotFound` behavior.\n        if (NotFound) {\n          const notFoundParallelRouteProps = {\n            children: (\n              <>\n                {notFoundStyles}\n                <NotFound />\n              </>\n            ),\n          }\n          const notfoundClientSegment = (\n            <ClientSegmentRoot\n              Component={SegmentComponent}\n              slots={notFoundParallelRouteProps}\n              params={currentParams}\n            />\n          )\n\n          segmentNode = (\n            <NotFoundBoundary\n              key={cacheNodeKey}\n              notFound={\n                <>\n                  {layerAssets}\n                  {notfoundClientSegment}\n                </>\n              }\n            >\n              {layerAssets}\n              {clientSegment}\n            </NotFoundBoundary>\n          )\n        } else {\n          segmentNode = (\n            <NotFoundBoundary key={cacheNodeKey}>\n              {layerAssets}\n              {clientSegment}\n            </NotFoundBoundary>\n          )\n        }\n      } else {\n        segmentNode = (\n          <React.Fragment key={cacheNodeKey}>\n            {layerAssets}\n            {clientSegment}\n          </React.Fragment>\n        )\n      }\n    } else {\n      const params = createServerParamsForServerSegment(\n        currentParams,\n        workStore\n      )\n\n      let serverSegment = (\n        <SegmentComponent {...parallelRouteProps} params={params} />\n      )\n\n      if (isRootLayoutWithChildrenSlotAndAtLeastOneMoreSlot) {\n        // TODO-APP: This is a hack to support unmatched parallel routes, which will throw `notFound()`.\n        // This ensures that a `NotFoundBoundary` is available for when that happens,\n        // but it's not ideal, as it needlessly invokes the `NotFound` component and renders the `RootLayout` twice.\n        // We should instead look into handling the fallback behavior differently in development mode so that it doesn't\n        // rely on the `NotFound` behavior.\n        segmentNode = (\n          <NotFoundBoundary\n            key={cacheNodeKey}\n            notFound={\n              NotFound ? (\n                <>\n                  {layerAssets}\n                  <SegmentComponent params={params}>\n                    {notFoundStyles}\n                    <NotFound />\n                  </SegmentComponent>\n                </>\n              ) : undefined\n            }\n          >\n            {layerAssets}\n            {serverSegment}\n          </NotFoundBoundary>\n        )\n      } else {\n        segmentNode = (\n          <React.Fragment key={cacheNodeKey}>\n            {layerAssets}\n            {serverSegment}\n          </React.Fragment>\n        )\n      }\n    }\n    // For layouts we just render the component\n    return [\n      actualSegment,\n      segmentNode,\n      parallelRouteCacheNodeSeedData,\n      loadingData,\n    ]\n  }\n}\n\nasync function MetadataOutlet({\n  ready,\n}: {\n  ready: () => Promise<void> & { status?: string; value?: unknown }\n}) {\n  const r = ready()\n  // We can avoid a extra microtask by unwrapping the instrumented promise directly if available.\n  if (r.status === 'rejected') {\n    throw r.value\n  } else if (r.status !== 'fulfilled') {\n    await r\n  }\n  return null\n}\nMetadataOutlet.displayName = OUTLET_BOUNDARY_NAME\n"],"names":["React","isClientReference","getLayoutOrPageModule","interopDefault","parseLoaderTree","createComponentStylesAndScripts","getLayerAssets","hasLoadingComponentInTree","validateRevalidate","PARALLEL_ROUTE_DEFAULT_PATH","getTracer","NextNodeServerSpan","StaticGenBailoutError","workUnitAsyncStorage","OUTLET_BOUNDARY_NAME","createComponentTree","props","trace","spanName","createComponentTreeInternal","errorMissingDefaultExport","pagePath","convention","normalizedPagePath","Error","cacheNodeKey","createSegmentPath","loaderTree","tree","parentParams","firstItem","rootLayoutIncluded","injectedCSS","injectedJS","injectedFontPreloadTags","getMetadataReady","ctx","missingSlots","preloadCallbacks","renderOpts","nextConfigOutput","experimental","workStore","componentMod","NotFoundBoundary","LayoutRouter","RenderFromTemplateContext","OutletBoundary","ClientPageRoot","ClientSegmentRoot","createServerSearchParamsForServerPage","createPrerenderSearchParamsForClientPage","createServerParamsForServerSegment","createPrerenderParamsForClientSegment","serverHooks","DynamicServerError","Postpone","getDynamicParamFromSegment","isPrefetch","query","page","layoutOrPagePath","segment","modules","parallelRoutes","layout","template","error","loading","notFound","injectedCSSWithCurrentLayout","Set","injectedJSWithCurrentLayout","injectedFontPreloadTagsWithCurrentLayout","layerAssets","Template","templateStyles","templateScripts","filePath","getComponent","Fragment","ErrorComponent","errorStyles","errorScripts","Loading","loadingStyles","loadingScripts","isLayout","isPage","mod","layoutOrPageMod","hideSpan","attributes","rootLayoutAtThisLevel","rootLayoutIncludedAtThisLevelOrAbove","NotFound","notFoundStyles","dynamic","dynamicShouldError","forceDynamic","isStaticGeneration","isRoutePPREnabled","err","dynamicUsageDescription","message","dynamicUsageStack","stack","forceStatic","fetchCache","revalidate","route","defaultRevalidate","workUnitStore","getStore","type","dynamicUsageErr","LayoutOrPage","undefined","MaybeComponent","process","env","NODE_ENV","isValidElementType","require","segmentParam","currentParams","value","param","actualSegment","treeSegment","parallelRouteMap","Promise","all","Object","keys","map","parallelRouteKey","isChildrenRouteKey","currentSegmentPath","parallelRoute","notFoundComponent","childCacheNodeSeedData","parsedTree","endsWith","add","seedData","child","resolve","parallelRouterKey","segmentPath","parallelRouteProps","parallelRouteCacheNodeSeedData","parallelRouteProp","flightData","loadingData","children","Component","reason","isClientComponent","console","PageComponent","pageElement","promiseOfParams","promiseOfSearchParams","searchParams","params","promises","MetadataOutlet","ready","SegmentComponent","isRootLayoutWithChildrenSlotAndAtLeastOneMoreSlot","length","segmentNode","clientSegment","slots","promise","notFoundParallelRouteProps","notfoundClientSegment","serverSegment","r","status","displayName"],"mappings":"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"}