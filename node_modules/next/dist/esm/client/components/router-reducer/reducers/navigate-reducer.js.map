{"version":3,"sources":["../../../../../src/client/components/router-reducer/reducers/navigate-reducer.ts"],"sourcesContent":["import type { CacheNode } from '../../../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  FlightRouterState,\n  FlightSegmentPath,\n} from '../../../../server/app-render/types'\nimport { fetchServerResponse } from '../fetch-server-response'\nimport { createHrefFromUrl } from '../create-href-from-url'\nimport { invalidateCacheBelowFlightSegmentPath } from '../invalidate-cache-below-flight-segmentpath'\nimport { applyRouterStatePatchToTree } from '../apply-router-state-patch-to-tree'\nimport { shouldHardNavigate } from '../should-hard-navigate'\nimport { isNavigatingToNewRootLayout } from '../is-navigating-to-new-root-layout'\nimport {\n  PrefetchCacheEntryStatus,\n  type Mutable,\n  type NavigateAction,\n  type ReadonlyReducerState,\n  type ReducerState,\n} from '../router-reducer-types'\nimport { handleMutable } from '../handle-mutable'\nimport { applyFlightData } from '../apply-flight-data'\nimport { prefetchQueue } from './prefetch-reducer'\nimport { createEmptyCacheNode } from '../../app-router'\nimport { DEFAULT_SEGMENT_KEY } from '../../../../shared/lib/segment'\nimport {\n  listenForDynamicRequest,\n  updateCacheNodeOnNavigation,\n} from '../ppr-navigations'\nimport {\n  getOrCreatePrefetchCacheEntry,\n  prunePrefetchCache,\n} from '../prefetch-cache-utils'\nimport { clearCacheNodeDataForSegmentPath } from '../clear-cache-node-data-for-segment-path'\nimport { handleAliasedPrefetchEntry } from '../aliased-prefetch-navigations'\n\nexport function handleExternalUrl(\n  state: ReadonlyReducerState,\n  mutable: Mutable,\n  url: string,\n  pendingPush: boolean\n) {\n  mutable.mpaNavigation = true\n  mutable.canonicalUrl = url\n  mutable.pendingPush = pendingPush\n  mutable.scrollableSegments = undefined\n\n  return handleMutable(state, mutable)\n}\n\nfunction generateSegmentsFromPatch(\n  flightRouterPatch: FlightRouterState\n): FlightSegmentPath[] {\n  const segments: FlightSegmentPath[] = []\n  const [segment, parallelRoutes] = flightRouterPatch\n\n  if (Object.keys(parallelRoutes).length === 0) {\n    return [[segment]]\n  }\n\n  for (const [parallelRouteKey, parallelRoute] of Object.entries(\n    parallelRoutes\n  )) {\n    for (const childSegment of generateSegmentsFromPatch(parallelRoute)) {\n      // If the segment is empty, it means we are at the root of the tree\n      if (segment === '') {\n        segments.push([parallelRouteKey, ...childSegment])\n      } else {\n        segments.push([segment, parallelRouteKey, ...childSegment])\n      }\n    }\n  }\n\n  return segments\n}\n\nfunction triggerLazyFetchForLeafSegments(\n  newCache: CacheNode,\n  currentCache: CacheNode,\n  flightSegmentPath: FlightSegmentPath,\n  treePatch: FlightRouterState\n) {\n  let appliedPatch = false\n\n  newCache.rsc = currentCache.rsc\n  newCache.prefetchRsc = currentCache.prefetchRsc\n  newCache.loading = currentCache.loading\n  newCache.parallelRoutes = new Map(currentCache.parallelRoutes)\n\n  const segmentPathsToFill = generateSegmentsFromPatch(treePatch).map(\n    (segment) => [...flightSegmentPath, ...segment]\n  )\n\n  for (const segmentPaths of segmentPathsToFill) {\n    clearCacheNodeDataForSegmentPath(newCache, currentCache, segmentPaths)\n\n    appliedPatch = true\n  }\n\n  return appliedPatch\n}\n\nexport function navigateReducer(\n  state: ReadonlyReducerState,\n  action: NavigateAction\n): ReducerState {\n  const { url, isExternalUrl, navigateType, shouldScroll, allowAliasing } =\n    action\n  const mutable: Mutable = {}\n  const { hash } = url\n  const href = createHrefFromUrl(url)\n  const pendingPush = navigateType === 'push'\n  // we want to prune the prefetch cache on every navigation to avoid it growing too large\n  prunePrefetchCache(state.prefetchCache)\n\n  mutable.preserveCustomHistoryState = false\n  mutable.pendingPush = pendingPush\n\n  if (isExternalUrl) {\n    return handleExternalUrl(state, mutable, url.toString(), pendingPush)\n  }\n\n  // Handles case where `<meta http-equiv=\"refresh\">` tag is present,\n  // which will trigger an MPA navigation.\n  if (document.getElementById('__next-page-redirect')) {\n    return handleExternalUrl(state, mutable, href, pendingPush)\n  }\n\n  const prefetchValues = getOrCreatePrefetchCacheEntry({\n    url,\n    nextUrl: state.nextUrl,\n    tree: state.tree,\n    buildId: state.buildId,\n    prefetchCache: state.prefetchCache,\n    allowAliasing,\n  })\n  const { treeAtTimeOfPrefetch, data } = prefetchValues\n\n  prefetchQueue.bump(data)\n\n  return data.then(\n    ({ flightData, canonicalUrl: canonicalUrlOverride, postponed }) => {\n      let isFirstRead = false\n      // we only want to mark this once\n      if (!prefetchValues.lastUsedTime) {\n        // important: we should only mark the cache node as dirty after we unsuspend from the call above\n        prefetchValues.lastUsedTime = Date.now()\n        isFirstRead = true\n      }\n\n      // Handle case when navigating to page in `pages` from `app`\n      if (typeof flightData === 'string') {\n        return handleExternalUrl(state, mutable, flightData, pendingPush)\n      }\n\n      const updatedCanonicalUrl = canonicalUrlOverride\n        ? createHrefFromUrl(canonicalUrlOverride)\n        : href\n\n      const onlyHashChange =\n        !!hash &&\n        state.canonicalUrl.split('#', 1)[0] ===\n          updatedCanonicalUrl.split('#', 1)[0]\n\n      // If only the hash has changed, the server hasn't sent us any new data. We can just update\n      // the mutable properties responsible for URL and scroll handling and return early.\n      if (onlyHashChange) {\n        mutable.onlyHashChange = true\n        mutable.canonicalUrl = updatedCanonicalUrl\n        mutable.shouldScroll = shouldScroll\n        mutable.hashFragment = hash\n        mutable.scrollableSegments = []\n        return handleMutable(state, mutable)\n      }\n\n      if (prefetchValues.aliased) {\n        const result = handleAliasedPrefetchEntry(\n          state,\n          flightData,\n          url,\n          mutable\n        )\n\n        // We didn't return new router state because we didn't apply the aliased entry for some reason.\n        // We'll re-invoke the navigation handler but ensure that we don't attempt to use the aliased entry. This\n        // will create an on-demand prefetch entry.\n        if (result === false) {\n          return navigateReducer(state, { ...action, allowAliasing: false })\n        }\n\n        return result\n      }\n\n      let currentTree = state.tree\n      let currentCache = state.cache\n      let scrollableSegments: FlightSegmentPath[] = []\n      for (const normalizedFlightData of flightData) {\n        const {\n          pathToSegment: flightSegmentPath,\n          seedData,\n          head,\n          isRootRender,\n        } = normalizedFlightData\n        let treePatch = normalizedFlightData.tree\n\n        // TODO-APP: remove ''\n        const flightSegmentPathWithLeadingEmpty = ['', ...flightSegmentPath]\n\n        // Create new tree based on the flightSegmentPath and router state patch\n        let newTree = applyRouterStatePatchToTree(\n          // TODO-APP: remove ''\n          flightSegmentPathWithLeadingEmpty,\n          currentTree,\n          treePatch,\n          href\n        )\n\n        // If the tree patch can't be applied to the current tree then we use the tree at time of prefetch\n        // TODO-APP: This should instead fill in the missing pieces in `currentTree` with the data from `treeAtTimeOfPrefetch`, then apply the patch.\n        if (newTree === null) {\n          newTree = applyRouterStatePatchToTree(\n            // TODO-APP: remove ''\n            flightSegmentPathWithLeadingEmpty,\n            treeAtTimeOfPrefetch,\n            treePatch,\n            href\n          )\n        }\n\n        if (newTree !== null) {\n          if (isNavigatingToNewRootLayout(currentTree, newTree)) {\n            return handleExternalUrl(state, mutable, href, pendingPush)\n          }\n\n          if (\n            // This is just a paranoid check. When a route is PPRed, the server\n            // will send back a static response that's rendered from\n            // the root. If for some reason it doesn't, we fall back to the\n            // non-PPR implementation.\n            // TODO: We should get rid of the else branch and do all navigations\n            // via updateCacheNodeOnNavigation. The current structure is just\n            // an incremental step.\n            seedData &&\n            isRootRender &&\n            postponed\n          ) {\n            const task = updateCacheNodeOnNavigation(\n              currentCache,\n              currentTree,\n              treePatch,\n              seedData,\n              head\n            )\n\n            if (task !== null) {\n              // We've created a new Cache Node tree that contains a prefetched\n              // version of the next page. This can be rendered instantly.\n\n              // Use the tree computed by updateCacheNodeOnNavigation instead\n              // of the one computed by applyRouterStatePatchToTree.\n              // TODO: We should remove applyRouterStatePatchToTree\n              // from the PPR path entirely.\n              const patchedRouterState: FlightRouterState = task.route\n              newTree = patchedRouterState\n\n              // It's possible that `updateCacheNodeOnNavigation` only spawned tasks to reuse the existing cache,\n              // in which case `task.node` will be null, signaling we don't need to wait for a dynamic request\n              // and can simply apply the patched `FlightRouterState`.\n              if (task.node !== null) {\n                const newCache = task.node\n\n                // The prefetched tree has dynamic holes in it. We initiate a\n                // dynamic request to fill them in.\n                //\n                // Do not block on the result. We'll immediately render the Cache\n                // Node tree and suspend on the dynamic parts. When the request\n                // comes in, we'll fill in missing data and ping React to\n                // re-render. Unlike the lazy fetching model in the non-PPR\n                // implementation, this is modeled as a single React update +\n                // streaming, rather than multiple top-level updates. (However,\n                // even in the new model, we'll still need to sometimes update the\n                // root multiple times per navigation, like if the server sends us\n                // a different response than we expected. For now, we revert back\n                // to the lazy fetching mechanism in that case.)\n                const dynamicRequest = fetchServerResponse(url, {\n                  flightRouterState: currentTree,\n                  nextUrl: state.nextUrl,\n                  buildId: state.buildId,\n                })\n\n                listenForDynamicRequest(task, dynamicRequest)\n                // We store the dynamic request on the `lazyData` property of the CacheNode\n                // because we're not going to await the dynamic request here. Since we're not blocking\n                // on the dynamic request, `layout-router` will\n                // task.node.lazyData = dynamicRequest\n\n                mutable.cache = newCache\n              }\n            } else {\n              // Nothing changed, so reuse the old cache.\n              // TODO: What if the head changed but not any of the segment data?\n              // Is that possible? If so, we should clone the whole tree and\n              // update the head.\n              newTree = treePatch\n            }\n          } else {\n            // The static response does not include any dynamic holes, so\n            // there's no need to do a second request.\n            // TODO: As an incremental step this just reverts back to the\n            // non-PPR implementation. We can simplify this branch further,\n            // given that PPR prefetches are always static and return the whole\n            // tree. Or in the meantime we could factor it out into a\n            // separate function.\n            const cache: CacheNode = createEmptyCacheNode()\n            let applied = false\n\n            if (\n              prefetchValues.status === PrefetchCacheEntryStatus.stale &&\n              !isFirstRead\n            ) {\n              // When we have a stale prefetch entry, we only want to re-use the loading state of the route we're navigating to, to support instant loading navigations\n              // this will trigger a lazy fetch for the actual page data by nulling the `rsc` and `prefetchRsc` values for page data,\n              // while copying over the `loading` for the segment that contains the page data.\n              // We only do this on subsequent reads, as otherwise there'd be no loading data to re-use.\n\n              // We skip this branch if only the hash fragment has changed, as we don't want to trigger a lazy fetch in that case\n              applied = triggerLazyFetchForLeafSegments(\n                cache,\n                currentCache,\n                flightSegmentPath,\n                treePatch\n              )\n              // since we re-used the stale cache's loading state & refreshed the data,\n              // update the `lastUsedTime` so that it can continue to be re-used for the next 30s\n              prefetchValues.lastUsedTime = Date.now()\n            } else {\n              applied = applyFlightData(\n                currentCache,\n                cache,\n                normalizedFlightData,\n                prefetchValues\n              )\n            }\n\n            const hardNavigate = shouldHardNavigate(\n              // TODO-APP: remove ''\n              flightSegmentPathWithLeadingEmpty,\n              currentTree\n            )\n\n            if (hardNavigate) {\n              // Copy rsc for the root node of the cache.\n              cache.rsc = currentCache.rsc\n              cache.prefetchRsc = currentCache.prefetchRsc\n\n              invalidateCacheBelowFlightSegmentPath(\n                cache,\n                currentCache,\n                flightSegmentPath\n              )\n              // Ensure the existing cache value is used when the cache was not invalidated.\n              mutable.cache = cache\n            } else if (applied) {\n              mutable.cache = cache\n              // If we applied the cache, we update the \"current cache\" value so any other\n              // segments in the FlightDataPath will be able to reference the updated cache.\n              currentCache = cache\n            }\n          }\n\n          currentTree = newTree\n\n          for (const subSegment of generateSegmentsFromPatch(treePatch)) {\n            const scrollableSegmentPath = [...flightSegmentPath, ...subSegment]\n            // Filter out the __DEFAULT__ paths as they shouldn't be scrolled to in this case.\n            if (\n              scrollableSegmentPath[scrollableSegmentPath.length - 1] !==\n              DEFAULT_SEGMENT_KEY\n            ) {\n              scrollableSegments.push(scrollableSegmentPath)\n            }\n          }\n        }\n      }\n\n      mutable.patchedTree = currentTree\n      mutable.canonicalUrl = updatedCanonicalUrl\n      mutable.scrollableSegments = scrollableSegments\n      mutable.hashFragment = hash\n      mutable.shouldScroll = shouldScroll\n\n      return handleMutable(state, mutable)\n    },\n    () => state\n  )\n}\n"],"names":["fetchServerResponse","createHrefFromUrl","invalidateCacheBelowFlightSegmentPath","applyRouterStatePatchToTree","shouldHardNavigate","isNavigatingToNewRootLayout","PrefetchCacheEntryStatus","handleMutable","applyFlightData","prefetchQueue","createEmptyCacheNode","DEFAULT_SEGMENT_KEY","listenForDynamicRequest","updateCacheNodeOnNavigation","getOrCreatePrefetchCacheEntry","prunePrefetchCache","clearCacheNodeDataForSegmentPath","handleAliasedPrefetchEntry","handleExternalUrl","state","mutable","url","pendingPush","mpaNavigation","canonicalUrl","scrollableSegments","undefined","generateSegmentsFromPatch","flightRouterPatch","segments","segment","parallelRoutes","Object","keys","length","parallelRouteKey","parallelRoute","entries","childSegment","push","triggerLazyFetchForLeafSegments","newCache","currentCache","flightSegmentPath","treePatch","appliedPatch","rsc","prefetchRsc","loading","Map","segmentPathsToFill","map","segmentPaths","navigateReducer","action","isExternalUrl","navigateType","shouldScroll","allowAliasing","hash","href","prefetchCache","preserveCustomHistoryState","toString","document","getElementById","prefetchValues","nextUrl","tree","buildId","treeAtTimeOfPrefetch","data","bump","then","flightData","canonicalUrlOverride","postponed","isFirstRead","lastUsedTime","Date","now","updatedCanonicalUrl","onlyHashChange","split","hashFragment","aliased","result","currentTree","cache","normalizedFlightData","pathToSegment","seedData","head","isRootRender","flightSegmentPathWithLeadingEmpty","newTree","task","patchedRouterState","route","node","dynamicRequest","flightRouterState","applied","status","stale","hardNavigate","subSegment","scrollableSegmentPath","patchedTree"],"mappings":"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"}