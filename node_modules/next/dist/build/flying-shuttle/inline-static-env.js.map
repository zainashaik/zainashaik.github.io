{"version":3,"sources":["../../../src/build/flying-shuttle/inline-static-env.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport { promisify } from 'util'\nimport globOriginal from 'next/dist/compiled/glob'\nimport {\n  getNextConfigEnv,\n  getNextPublicEnvironmentVariables,\n} from '../webpack/plugins/define-env-plugin'\nimport { Sema } from 'next/dist/compiled/async-sema'\nimport type { NextConfigComplete } from '../../server/config-shared'\n\nconst glob = promisify(globOriginal)\n\nexport async function inlineStaticEnv({\n  distDir,\n  config,\n}: {\n  distDir: string\n  config: NextConfigComplete\n}) {\n  const nextConfigEnv = getNextConfigEnv(config)\n\n  const staticEnv = {\n    ...getNextPublicEnvironmentVariables(),\n    ...nextConfigEnv,\n  }\n\n  const serverDir = path.join(distDir, 'server')\n  const serverChunks = await glob('**/*.js', {\n    cwd: serverDir,\n  })\n  const clientDir = path.join(distDir, 'static')\n  const clientChunks = await glob('**/*.js', {\n    cwd: clientDir,\n  })\n\n  const inlineSema = new Sema(8)\n  const nextConfigEnvKeys = Object.keys(nextConfigEnv).map((item) =>\n    item.split('process.env.').pop()\n  )\n\n  const builtRegEx = new RegExp(\n    `[\\\\w]{1,}\\\\.env\\\\.(?:NEXT_PUBLIC_[\\\\w]{1,}${nextConfigEnvKeys.length ? '|' + nextConfigEnvKeys.join('|') : ''})`,\n    'g'\n  )\n\n  for (const [parentDir, files] of [\n    [serverDir, serverChunks],\n    [clientDir, clientChunks],\n  ] as const) {\n    await Promise.all(\n      files.map(async (file) => {\n        await inlineSema.acquire()\n        const filepath = path.join(parentDir, file)\n        const content = await fs.promises.readFile(filepath, 'utf8')\n\n        await fs.promises.writeFile(\n          filepath,\n          content.replace(builtRegEx, (match) => {\n            let normalizedMatch = `process.env.${match.split('.').pop()}`\n\n            if (staticEnv[normalizedMatch]) {\n              return JSON.stringify(staticEnv[normalizedMatch])\n            }\n            return match\n          })\n        )\n        inlineSema.release()\n      })\n    )\n  }\n}\n"],"names":["inlineStaticEnv","glob","promisify","globOriginal","distDir","config","nextConfigEnv","getNextConfigEnv","staticEnv","getNextPublicEnvironmentVariables","serverDir","path","join","serverChunks","cwd","clientDir","clientChunks","inlineSema","Sema","nextConfigEnvKeys","Object","keys","map","item","split","pop","builtRegEx","RegExp","length","parentDir","files","Promise","all","file","acquire","filepath","content","fs","promises","readFile","writeFile","replace","match","normalizedMatch","JSON","stringify","release"],"mappings":";;;;+BAasBA;;;eAAAA;;;2DAbP;6DACE;sBACS;6DACD;iCAIlB;2BACc;;;;;;AAGrB,MAAMC,OAAOC,IAAAA,eAAS,EAACC,aAAY;AAE5B,eAAeH,gBAAgB,EACpCI,OAAO,EACPC,MAAM,EAIP;IACC,MAAMC,gBAAgBC,IAAAA,iCAAgB,EAACF;IAEvC,MAAMG,YAAY;QAChB,GAAGC,IAAAA,kDAAiC,GAAE;QACtC,GAAGH,aAAa;IAClB;IAEA,MAAMI,YAAYC,aAAI,CAACC,IAAI,CAACR,SAAS;IACrC,MAAMS,eAAe,MAAMZ,KAAK,WAAW;QACzCa,KAAKJ;IACP;IACA,MAAMK,YAAYJ,aAAI,CAACC,IAAI,CAACR,SAAS;IACrC,MAAMY,eAAe,MAAMf,KAAK,WAAW;QACzCa,KAAKC;IACP;IAEA,MAAME,aAAa,IAAIC,eAAI,CAAC;IAC5B,MAAMC,oBAAoBC,OAAOC,IAAI,CAACf,eAAegB,GAAG,CAAC,CAACC,OACxDA,KAAKC,KAAK,CAAC,gBAAgBC,GAAG;IAGhC,MAAMC,aAAa,IAAIC,OACrB,CAAC,0CAA0C,EAAER,kBAAkBS,MAAM,GAAG,MAAMT,kBAAkBP,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,EACjH;IAGF,KAAK,MAAM,CAACiB,WAAWC,MAAM,IAAI;QAC/B;YAACpB;YAAWG;SAAa;QACzB;YAACE;YAAWC;SAAa;KAC1B,CAAW;QACV,MAAMe,QAAQC,GAAG,CACfF,MAAMR,GAAG,CAAC,OAAOW;YACf,MAAMhB,WAAWiB,OAAO;YACxB,MAAMC,WAAWxB,aAAI,CAACC,IAAI,CAACiB,WAAWI;YACtC,MAAMG,UAAU,MAAMC,WAAE,CAACC,QAAQ,CAACC,QAAQ,CAACJ,UAAU;YAErD,MAAME,WAAE,CAACC,QAAQ,CAACE,SAAS,CACzBL,UACAC,QAAQK,OAAO,CAACf,YAAY,CAACgB;gBAC3B,IAAIC,kBAAkB,CAAC,YAAY,EAAED,MAAMlB,KAAK,CAAC,KAAKC,GAAG,GAAG,CAAC;gBAE7D,IAAIjB,SAAS,CAACmC,gBAAgB,EAAE;oBAC9B,OAAOC,KAAKC,SAAS,CAACrC,SAAS,CAACmC,gBAAgB;gBAClD;gBACA,OAAOD;YACT;YAEFzB,WAAW6B,OAAO;QACpB;IAEJ;AACF"}