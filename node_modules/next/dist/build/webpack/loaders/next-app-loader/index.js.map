{"version":3,"sources":["../../../../../src/build/webpack/loaders/next-app-loader/index.ts"],"sourcesContent":["import type webpack from 'next/dist/compiled/webpack/webpack'\nimport {\n  UNDERSCORE_NOT_FOUND_ROUTE,\n  UNDERSCORE_NOT_FOUND_ROUTE_ENTRY,\n  type ValueOf,\n} from '../../../../shared/lib/constants'\nimport type { ModuleTuple, CollectedMetadata } from '../metadata/types'\n\nimport path from 'path'\nimport { bold } from '../../../../lib/picocolors'\nimport { getModuleBuildInfo } from '../get-module-build-info'\nimport { verifyRootLayout } from '../../../../lib/verify-root-layout'\nimport * as Log from '../../../output/log'\nimport { APP_DIR_ALIAS } from '../../../../lib/constants'\nimport {\n  createMetadataExportsCode,\n  createStaticMetadataFromRoute,\n} from '../metadata/discover'\nimport { promises as fs } from 'fs'\nimport { isAppRouteRoute } from '../../../../lib/is-app-route-route'\nimport type { NextConfig } from '../../../../server/config-shared'\nimport { AppPathnameNormalizer } from '../../../../server/normalizers/built/app/app-pathname-normalizer'\nimport type { MiddlewareConfig } from '../../../analysis/get-page-static-info'\nimport { isAppBuiltinNotFoundPage } from '../../../utils'\nimport { loadEntrypoint } from '../../../load-entrypoint'\nimport {\n  isGroupSegment,\n  DEFAULT_SEGMENT_KEY,\n  PAGE_SEGMENT_KEY,\n} from '../../../../shared/lib/segment'\nimport { getFilesInDir } from '../../../../lib/get-files-in-dir'\nimport type { PageExtensions } from '../../../page-extensions-type'\nimport { PARALLEL_ROUTE_DEFAULT_PATH } from '../../../../client/components/parallel-route-default'\nimport type { Compilation } from 'webpack'\nimport { createAppRouteCode } from './create-app-route-code'\n\nexport type AppLoaderOptions = {\n  name: string\n  page: string\n  pagePath: string\n  appDir: string\n  appPaths: readonly string[] | null\n  preferredRegion: string | string[] | undefined\n  pageExtensions: PageExtensions\n  assetPrefix: string\n  rootDir?: string\n  tsconfigPath?: string\n  isDev?: true\n  basePath: string\n  flyingShuttle?: boolean\n  nextConfigOutput?: NextConfig['output']\n  nextConfigExperimentalUseEarlyImport?: true\n  middlewareConfig: string\n}\ntype AppLoader = webpack.LoaderDefinitionFunction<AppLoaderOptions>\n\nconst FILE_TYPES = {\n  layout: 'layout',\n  template: 'template',\n  error: 'error',\n  loading: 'loading',\n  'not-found': 'not-found',\n  'global-error': 'global-error',\n} as const\n\nconst GLOBAL_ERROR_FILE_TYPE = 'global-error'\nconst PAGE_SEGMENT = 'page$'\nconst PARALLEL_CHILDREN_SEGMENT = 'children$'\n\nconst defaultNotFoundPath = 'next/dist/client/components/not-found-error'\nconst defaultGlobalErrorPath = 'next/dist/client/components/error-boundary'\nconst defaultLayoutPath = 'next/dist/client/components/default-layout'\n\ntype DirResolver = (pathToResolve: string) => string\ntype PathResolver = (\n  pathname: string\n) => Promise<string | undefined> | string | undefined\nexport type MetadataResolver = (\n  dir: string,\n  filename: string,\n  extensions: readonly string[]\n) => Promise<string | undefined>\n\nexport type AppDirModules = {\n  readonly [moduleKey in ValueOf<typeof FILE_TYPES>]?: ModuleTuple\n} & {\n  readonly page?: ModuleTuple\n} & {\n  readonly metadata?: CollectedMetadata\n} & {\n  readonly defaultPage?: ModuleTuple\n}\n\nconst normalizeParallelKey = (key: string) =>\n  key.startsWith('@') ? key.slice(1) : key\n\nconst isDirectory = async (pathname: string) => {\n  try {\n    const stat = await fs.stat(pathname)\n    return stat.isDirectory()\n  } catch (err) {\n    return false\n  }\n}\n\nasync function createTreeCodeFromPath(\n  pagePath: string,\n  {\n    page,\n    resolveDir,\n    resolver,\n    resolveParallelSegments,\n    metadataResolver,\n    pageExtensions,\n    basePath,\n    buildInfo,\n    flyingShuttle,\n    collectedDeclarations,\n  }: {\n    page: string\n    flyingShuttle?: boolean\n    buildInfo: ReturnType<typeof getModuleBuildInfo>\n    resolveDir: DirResolver\n    resolver: PathResolver\n    metadataResolver: MetadataResolver\n    resolveParallelSegments: (\n      pathname: string\n    ) => [key: string, segment: string | string[]][]\n    loaderContext: webpack.LoaderContext<AppLoaderOptions>\n    pageExtensions: PageExtensions\n    basePath: string\n    collectedDeclarations: [string, string][]\n  }\n): Promise<{\n  treeCode: string\n  pages: string\n  rootLayout: string | undefined\n  globalError: string\n}> {\n  const splittedPath = pagePath.split(/[\\\\/]/, 1)\n  const isNotFoundRoute = page === UNDERSCORE_NOT_FOUND_ROUTE_ENTRY\n\n  const isDefaultNotFound = isAppBuiltinNotFoundPage(pagePath)\n  const appDirPrefix = isDefaultNotFound ? APP_DIR_ALIAS : splittedPath[0]\n  const hasRootNotFound = await resolver(\n    `${appDirPrefix}/${FILE_TYPES['not-found']}`\n  )\n  const pages: string[] = []\n\n  let rootLayout: string | undefined\n  let globalError: string | undefined\n\n  async function resolveAdjacentParallelSegments(\n    segmentPath: string\n  ): Promise<string[]> {\n    const absoluteSegmentPath = await resolveDir(\n      `${appDirPrefix}${segmentPath}`\n    )\n\n    if (!absoluteSegmentPath) {\n      return []\n    }\n\n    const segmentIsDirectory = await isDirectory(absoluteSegmentPath)\n\n    if (!segmentIsDirectory) {\n      return []\n    }\n\n    // We need to resolve all parallel routes in this level.\n    const files = await fs.opendir(absoluteSegmentPath)\n\n    const parallelSegments: string[] = ['children']\n\n    for await (const dirent of files) {\n      // Make sure name starts with \"@\" and is a directory.\n      if (dirent.isDirectory() && dirent.name.charCodeAt(0) === 64) {\n        parallelSegments.push(dirent.name)\n      }\n    }\n\n    return parallelSegments\n  }\n\n  async function createSubtreePropsFromSegmentPath(\n    segments: string[],\n    nestedCollectedDeclarations: [string, string][]\n  ): Promise<{\n    treeCode: string\n  }> {\n    const segmentPath = segments.join('/')\n\n    // Existing tree are the children of the current segment\n    const props: Record<string, string> = {}\n    // Root layer could be 1st layer of normal routes\n    const isRootLayer = segments.length === 0\n    const isRootLayoutOrRootPage = segments.length <= 1\n\n    // We need to resolve all parallel routes in this level.\n    const parallelSegments: [key: string, segment: string | string[]][] = []\n    if (isRootLayer) {\n      parallelSegments.push(['children', ''])\n    } else {\n      parallelSegments.push(...resolveParallelSegments(segmentPath))\n    }\n\n    let metadata: Awaited<ReturnType<typeof createStaticMetadataFromRoute>> =\n      null\n    const routerDirPath = `${appDirPrefix}${segmentPath}`\n    // For default not-found, don't traverse the directory to find metadata.\n    const resolvedRouteDir = isDefaultNotFound\n      ? ''\n      : await resolveDir(routerDirPath)\n\n    if (resolvedRouteDir) {\n      metadata = await createStaticMetadataFromRoute(resolvedRouteDir, {\n        basePath,\n        segment: segmentPath,\n        metadataResolver,\n        isRootLayoutOrRootPage,\n        pageExtensions,\n      })\n    }\n\n    for (const [parallelKey, parallelSegment] of parallelSegments) {\n      // if parallelSegment is the page segment (ie, `page$` and not ['page$']), it gets loaded into the __PAGE__ slot\n      // as it's the page for the current route.\n      if (parallelSegment === PAGE_SEGMENT) {\n        const matchedPagePath = `${appDirPrefix}${segmentPath}${\n          parallelKey === 'children' ? '' : `/${parallelKey}`\n        }/page`\n\n        const resolvedPagePath = await resolver(matchedPagePath)\n        if (resolvedPagePath) {\n          pages.push(resolvedPagePath)\n\n          const varName = `page${nestedCollectedDeclarations.length}`\n          nestedCollectedDeclarations.push([varName, resolvedPagePath])\n\n          // Use '' for segment as it's the page. There can't be a segment called '' so this is the safest way to add it.\n          props[normalizeParallelKey(parallelKey)] =\n            `['${PAGE_SEGMENT_KEY}', {}, {\n          page: [${varName}, ${JSON.stringify(resolvedPagePath)}],\n          ${createMetadataExportsCode(metadata)}\n        }]`\n          continue\n        }\n      }\n\n      // if the parallelSegment was not matched to the __PAGE__ slot, then it's a parallel route at this level.\n      // the code below recursively traverses the parallel slots directory to match the corresponding __PAGE__ for each parallel slot\n      // while also filling in layout/default/etc files into the loader tree at each segment level.\n\n      const subSegmentPath = [...segments]\n      if (parallelKey !== 'children') {\n        // A `children` parallel key should have already been processed in the above segment\n        // So we exclude it when constructing the subsegment path for the remaining segment levels\n        subSegmentPath.push(parallelKey)\n      }\n\n      const normalizedParallelSegment = Array.isArray(parallelSegment)\n        ? parallelSegment[0]\n        : parallelSegment\n\n      if (\n        normalizedParallelSegment !== PAGE_SEGMENT &&\n        normalizedParallelSegment !== PARALLEL_CHILDREN_SEGMENT\n      ) {\n        // If we don't have a page segment, nor a special $children marker, it means we need to traverse the next directory\n        // (ie, `normalizedParallelSegment` would correspond with the folder that contains the next level of pages/layout/etc)\n        // we push it to the subSegmentPath so that we can fill in the loader tree for that segment.\n        subSegmentPath.push(normalizedParallelSegment)\n      }\n\n      const parallelSegmentPath = subSegmentPath.join('/')\n\n      // Fill in the loader tree for all of the special files types (layout, default, etc) at this level\n      // `page` is not included here as it's added above.\n      const filePaths = await Promise.all(\n        Object.values(FILE_TYPES).map(async (file) => {\n          return [\n            file,\n            await resolver(\n              `${appDirPrefix}${\n                // TODO-APP: parallelSegmentPath sometimes ends in `/` but sometimes it doesn't. This should be consistent.\n                parallelSegmentPath.endsWith('/')\n                  ? parallelSegmentPath\n                  : parallelSegmentPath + '/'\n              }${file}`\n            ),\n          ] as const\n        })\n      )\n\n      const definedFilePaths = filePaths.filter(([, filePath]) => {\n        if (filePath !== undefined) {\n          if (flyingShuttle && buildInfo.route?.relatedModules) {\n            buildInfo.route.relatedModules.push(filePath)\n          }\n          return true\n        }\n        return false\n      }) as [ValueOf<typeof FILE_TYPES>, string][]\n\n      // Add default not found error as root not found if not present\n      const hasNotFoundFile = definedFilePaths.some(\n        ([type]) => type === 'not-found'\n      )\n      // If the first layer is a group route, we treat it as root layer\n      const isFirstLayerGroupRoute =\n        segments.length === 1 &&\n        subSegmentPath.filter((seg) => isGroupSegment(seg)).length === 1\n      if ((isRootLayer || isFirstLayerGroupRoute) && !hasNotFoundFile) {\n        // If you already have a root not found, don't insert default not-found to group routes root\n        if (!(hasRootNotFound && isFirstLayerGroupRoute)) {\n          definedFilePaths.push(['not-found', defaultNotFoundPath])\n        }\n      }\n\n      if (!rootLayout) {\n        const layoutPath = definedFilePaths.find(\n          ([type]) => type === 'layout'\n        )?.[1]\n        rootLayout = layoutPath\n\n        if (isDefaultNotFound && !layoutPath && !rootLayout) {\n          rootLayout = defaultLayoutPath\n          definedFilePaths.push(['layout', rootLayout])\n        }\n      }\n\n      if (!globalError) {\n        const resolvedGlobalErrorPath = await resolver(\n          `${appDirPrefix}/${GLOBAL_ERROR_FILE_TYPE}`\n        )\n        if (resolvedGlobalErrorPath) {\n          globalError = resolvedGlobalErrorPath\n        }\n      }\n\n      let parallelSegmentKey = Array.isArray(parallelSegment)\n        ? parallelSegment[0]\n        : parallelSegment\n\n      // normalize the parallel segment key to remove any special markers that we inserted in the\n      // earlier logic (such as children$ and page$). These should never appear in the loader tree, and\n      // should instead be the corresponding segment keys (ie `__PAGE__`) or the `children` parallel route.\n      parallelSegmentKey =\n        parallelSegmentKey === PARALLEL_CHILDREN_SEGMENT\n          ? 'children'\n          : parallelSegmentKey === PAGE_SEGMENT\n            ? PAGE_SEGMENT_KEY\n            : parallelSegmentKey\n\n      const normalizedParallelKey = normalizeParallelKey(parallelKey)\n      let subtreeCode\n      // If it's root not found page, set not-found boundary as children page\n      if (isNotFoundRoute && normalizedParallelKey === 'children') {\n        const notFoundPath =\n          definedFilePaths.find(([type]) => type === 'not-found')?.[1] ??\n          defaultNotFoundPath\n\n        const varName = `notFound${nestedCollectedDeclarations.length}`\n        nestedCollectedDeclarations.push([varName, notFoundPath])\n        subtreeCode = `{\n          children: [${JSON.stringify(UNDERSCORE_NOT_FOUND_ROUTE)}, {\n            children: ['${PAGE_SEGMENT_KEY}', {}, {\n              page: [\n                ${varName},\n                ${JSON.stringify(notFoundPath)}\n              ]\n            }]\n          }, {}]\n        }`\n      }\n\n      const modulesCode = `{\n        ${definedFilePaths\n          .map(([file, filePath]) => {\n            const varName = `module${nestedCollectedDeclarations.length}`\n            nestedCollectedDeclarations.push([varName, filePath])\n            return `'${file}': [${varName}, ${JSON.stringify(filePath)}],`\n          })\n          .join('\\n')}\n        ${createMetadataExportsCode(metadata)}\n      }`\n\n      if (!subtreeCode) {\n        const { treeCode: pageSubtreeCode } =\n          await createSubtreePropsFromSegmentPath(\n            subSegmentPath,\n            nestedCollectedDeclarations\n          )\n\n        subtreeCode = pageSubtreeCode\n      }\n\n      props[normalizedParallelKey] = `[\n        '${parallelSegmentKey}',\n        ${subtreeCode},\n        ${modulesCode}\n      ]`\n    }\n\n    const adjacentParallelSegments =\n      await resolveAdjacentParallelSegments(segmentPath)\n\n    for (const adjacentParallelSegment of adjacentParallelSegments) {\n      if (!props[normalizeParallelKey(adjacentParallelSegment)]) {\n        const actualSegment =\n          adjacentParallelSegment === 'children'\n            ? ''\n            : `/${adjacentParallelSegment}`\n\n        // if a default is found, use that. Otherwise use the fallback, which will trigger a `notFound()`\n        const defaultPath =\n          (await resolver(\n            `${appDirPrefix}${segmentPath}${actualSegment}/default`\n          )) ?? PARALLEL_ROUTE_DEFAULT_PATH\n\n        const varName = `default${nestedCollectedDeclarations.length}`\n        nestedCollectedDeclarations.push([varName, defaultPath])\n        props[normalizeParallelKey(adjacentParallelSegment)] = `[\n          '${DEFAULT_SEGMENT_KEY}',\n          {},\n          {\n            defaultPage: [${varName}, ${JSON.stringify(defaultPath)}],\n          }\n        ]`\n      }\n    }\n    return {\n      treeCode: `{\n        ${Object.entries(props)\n          .map(([key, value]) => `${key}: ${value}`)\n          .join(',\\n')}\n      }`,\n    }\n  }\n\n  const { treeCode } = await createSubtreePropsFromSegmentPath(\n    [],\n    collectedDeclarations\n  )\n\n  return {\n    treeCode: `${treeCode}.children;`,\n    pages: `${JSON.stringify(pages)};`,\n    rootLayout,\n    globalError: globalError ?? defaultGlobalErrorPath,\n  }\n}\n\nfunction createAbsolutePath(appDir: string, pathToTurnAbsolute: string) {\n  return (\n    pathToTurnAbsolute\n      // Replace all POSIX path separators with the current OS path separator\n      .replace(/\\//g, path.sep)\n      .replace(/^private-next-app-dir/, appDir)\n  )\n}\n\nconst filesInDirMapMap: WeakMap<\n  Compilation,\n  Map<string, Promise<Set<string>>>\n> = new WeakMap()\nconst nextAppLoader: AppLoader = async function nextAppLoader() {\n  const loaderOptions = this.getOptions()\n  const {\n    name,\n    appDir,\n    appPaths,\n    pagePath,\n    pageExtensions,\n    rootDir,\n    tsconfigPath,\n    isDev,\n    nextConfigOutput,\n    preferredRegion,\n    basePath,\n    flyingShuttle,\n    middlewareConfig: middlewareConfigBase64,\n    nextConfigExperimentalUseEarlyImport,\n  } = loaderOptions\n\n  const buildInfo = getModuleBuildInfo((this as any)._module)\n  const collectedDeclarations: [string, string][] = []\n  const page = name.replace(/^app/, '')\n  const middlewareConfig: MiddlewareConfig = JSON.parse(\n    Buffer.from(middlewareConfigBase64, 'base64').toString()\n  )\n  buildInfo.route = {\n    page,\n    absolutePagePath: createAbsolutePath(appDir, pagePath),\n    preferredRegion,\n    middlewareConfig,\n    relatedModules: [],\n  }\n\n  const extensions = pageExtensions.map((extension) => `.${extension}`)\n\n  const normalizedAppPaths =\n    typeof appPaths === 'string' ? [appPaths] : appPaths || []\n\n  const resolveParallelSegments = (\n    pathname: string\n  ): [string, string | string[]][] => {\n    const matched: Record<string, string | string[]> = {}\n    let existingChildrenPath: string | undefined\n    for (const appPath of normalizedAppPaths) {\n      if (appPath.startsWith(pathname + '/')) {\n        const rest = appPath.slice(pathname.length + 1).split('/')\n\n        // It is the actual page, mark it specially.\n        if (rest.length === 1 && rest[0] === 'page') {\n          existingChildrenPath = appPath\n          matched.children = PAGE_SEGMENT\n          continue\n        }\n\n        const isParallelRoute = rest[0].startsWith('@')\n        if (isParallelRoute) {\n          if (rest.length === 2 && rest[1] === 'page') {\n            // We found a parallel route at this level. We don't want to mark it explicitly as the page segment,\n            // as that should be matched to the `children` slot. Instead, we use an array, to signal to `createSubtreePropsFromSegmentPath`\n            // that it needs to recursively fill in the loader tree code for the parallel route at the appropriate levels.\n            matched[rest[0]] = [PAGE_SEGMENT]\n            continue\n          }\n          // If it was a parallel route but we weren't able to find the page segment (ie, maybe the page is nested further)\n          // we first insert a special marker to ensure that we still process layout/default/etc at the slot level prior to continuing\n          // on to the page segment.\n          matched[rest[0]] = [PARALLEL_CHILDREN_SEGMENT, ...rest.slice(1)]\n          continue\n        }\n\n        if (existingChildrenPath && matched.children !== rest[0]) {\n          // If we get here, it means we already set a `page` segment earlier in the loop,\n          // meaning we already matched a page to the `children` parallel segment.\n          const isIncomingParallelPage = appPath.includes('@')\n          const hasCurrentParallelPage = existingChildrenPath.includes('@')\n\n          if (isIncomingParallelPage) {\n            // The duplicate segment was for a parallel slot. In this case,\n            // rather than throwing an error, we can ignore it since this can happen for valid reasons.\n            // For example, when we attempt to normalize catch-all routes, we'll push potential slot matches so\n            // that they are available in the loader tree when we go to render the page.\n            // We only need to throw an error if the duplicate segment was for a regular page.\n            // For example, /app/(groupa)/page & /app/(groupb)/page is an error since it corresponds\n            // with the same path.\n            continue\n          } else if (!hasCurrentParallelPage && !isIncomingParallelPage) {\n            // Both the current `children` and the incoming `children` are regular pages.\n            throw new Error(\n              `You cannot have two parallel pages that resolve to the same path. Please check ${existingChildrenPath} and ${appPath}. Refer to the route group docs for more information: https://nextjs.org/docs/app/building-your-application/routing/route-groups`\n            )\n          }\n        }\n\n        existingChildrenPath = appPath\n        matched.children = rest[0]\n      }\n    }\n\n    return Object.entries(matched)\n  }\n\n  const resolveDir: DirResolver = (pathToResolve) => {\n    return createAbsolutePath(appDir, pathToResolve)\n  }\n\n  const resolveAppRoute: PathResolver = (pathToResolve) => {\n    return createAbsolutePath(appDir, pathToResolve)\n  }\n\n  // Cached checker to see if a file exists in a given directory.\n  // This can be more efficient than checking them with `fs.stat` one by one\n  // because all the thousands of files are likely in a few possible directories.\n  // Note that it should only be cached for this compilation, not globally.\n  const fileExistsInDirectory = async (dirname: string, fileName: string) => {\n    // I don't think we should ever hit this code path, but if we do we should handle it gracefully.\n    if (this._compilation === undefined) {\n      try {\n        return (await getFilesInDir(dirname).catch(() => new Set())).has(\n          fileName\n        )\n      } catch (e) {\n        return false\n      }\n    }\n    const map =\n      filesInDirMapMap.get(this._compilation) ||\n      new Map<string, Promise<Set<string>>>()\n    if (!filesInDirMapMap.has(this._compilation)) {\n      filesInDirMapMap.set(this._compilation, map)\n    }\n    if (!map.has(dirname)) {\n      map.set(\n        dirname,\n        getFilesInDir(dirname).catch(() => new Set())\n      )\n    }\n    return ((await map.get(dirname)) || new Set()).has(fileName)\n  }\n\n  const resolver: PathResolver = async (pathname) => {\n    const absolutePath = createAbsolutePath(appDir, pathname)\n\n    const filenameIndex = absolutePath.lastIndexOf(path.sep)\n    const dirname = absolutePath.slice(0, filenameIndex)\n    const filename = absolutePath.slice(filenameIndex + 1)\n\n    let result: string | undefined\n\n    for (const ext of extensions) {\n      const absolutePathWithExtension = `${absolutePath}${ext}`\n      if (\n        !result &&\n        (await fileExistsInDirectory(dirname, `${filename}${ext}`))\n      ) {\n        result = absolutePathWithExtension\n      }\n      // Call `addMissingDependency` for all files even if they didn't match,\n      // because they might be added or removed during development.\n      this.addMissingDependency(absolutePathWithExtension)\n    }\n\n    return result\n  }\n\n  const metadataResolver: MetadataResolver = async (\n    dirname,\n    filename,\n    exts\n  ) => {\n    const absoluteDir = createAbsolutePath(appDir, dirname)\n\n    let result: string | undefined\n\n    for (const ext of exts) {\n      // Compared to `resolver` above the exts do not have the `.` included already, so it's added here.\n      const filenameWithExt = `${filename}.${ext}`\n      const absolutePathWithExtension = `${absoluteDir}${path.sep}${filenameWithExt}`\n      if (!result && (await fileExistsInDirectory(dirname, filenameWithExt))) {\n        result = absolutePathWithExtension\n      }\n      // Call `addMissingDependency` for all files even if they didn't match,\n      // because they might be added or removed during development.\n      this.addMissingDependency(absolutePathWithExtension)\n    }\n\n    return result\n  }\n\n  if (isAppRouteRoute(name)) {\n    return createAppRouteCode({\n      // TODO: investigate if the local `page` is the same as the loaderOptions.page\n      page: loaderOptions.page,\n      name,\n      pagePath,\n      resolveAppRoute,\n      pageExtensions,\n      nextConfigOutput,\n    })\n  }\n\n  let treeCodeResult = await createTreeCodeFromPath(pagePath, {\n    page,\n    resolveDir,\n    resolver,\n    metadataResolver,\n    resolveParallelSegments,\n    loaderContext: this,\n    pageExtensions,\n    basePath,\n    collectedDeclarations,\n    buildInfo,\n    flyingShuttle,\n  })\n\n  if (!treeCodeResult.rootLayout) {\n    if (!isDev) {\n      // If we're building and missing a root layout, exit the build\n      Log.error(\n        `${bold(\n          pagePath.replace(`${APP_DIR_ALIAS}/`, '')\n        )} doesn't have a root layout. To fix this error, make sure every page has a root layout.`\n      )\n      process.exit(1)\n    } else {\n      // In dev we'll try to create a root layout\n      const [createdRootLayout, rootLayoutPath] = await verifyRootLayout({\n        appDir: appDir,\n        dir: rootDir!,\n        tsconfigPath: tsconfigPath!,\n        pagePath,\n        pageExtensions,\n      })\n      if (!createdRootLayout) {\n        let message = `${bold(\n          pagePath.replace(`${APP_DIR_ALIAS}/`, '')\n        )} doesn't have a root layout. `\n\n        if (rootLayoutPath) {\n          message += `We tried to create ${bold(\n            path.relative(this._compiler?.context ?? '', rootLayoutPath)\n          )} for you but something went wrong.`\n        } else {\n          message +=\n            'To fix this error, make sure every page has a root layout.'\n        }\n\n        throw new Error(message)\n      }\n\n      // Clear fs cache, get the new result with the created root layout.\n      if (this._compilation) filesInDirMapMap.get(this._compilation)?.clear()\n      treeCodeResult = await createTreeCodeFromPath(pagePath, {\n        page,\n        resolveDir,\n        resolver,\n        metadataResolver,\n        resolveParallelSegments,\n        loaderContext: this,\n        pageExtensions,\n        basePath,\n        collectedDeclarations,\n        buildInfo,\n        flyingShuttle,\n      })\n    }\n  }\n\n  const pathname = new AppPathnameNormalizer().normalize(page)\n\n  // Prefer to modify next/src/server/app-render/entry-base.ts since this is shared with Turbopack.\n  // Any changes to this code should be reflected in Turbopack's app_source.rs and/or app-renderer.tsx as well.\n  const code = await loadEntrypoint(\n    'app-page',\n    {\n      VAR_DEFINITION_PAGE: page,\n      VAR_DEFINITION_PATHNAME: pathname,\n      VAR_MODULE_GLOBAL_ERROR: treeCodeResult.globalError,\n    },\n    {\n      tree: treeCodeResult.treeCode,\n      pages: treeCodeResult.pages,\n      __next_app_require__: '__webpack_require__',\n      __next_app_load_chunk__: '() => Promise.resolve()',\n    }\n  )\n\n  const header =\n    nextConfigExperimentalUseEarlyImport &&\n    process.env.NODE_ENV === 'production'\n      ? // Evaluate the imported modules early in the generated code\n        collectedDeclarations\n          .map(([varName, modulePath]) => {\n            return `import * as ${varName}_ from ${JSON.stringify(\n              modulePath\n            )};\\nconst ${varName} = () => ${varName}_;\\n`\n          })\n          .join('')\n      : // Lazily evaluate the imported modules in the generated code\n        collectedDeclarations\n          .map(([varName, modulePath]) => {\n            return `const ${varName} = () => import(/* webpackMode: \"eager\" */ ${JSON.stringify(\n              modulePath\n            )});\\n`\n          })\n          .join('')\n\n  return header + code\n}\n\nexport default nextAppLoader\n"],"names":["FILE_TYPES","layout","template","error","loading","GLOBAL_ERROR_FILE_TYPE","PAGE_SEGMENT","PARALLEL_CHILDREN_SEGMENT","defaultNotFoundPath","defaultGlobalErrorPath","defaultLayoutPath","normalizeParallelKey","key","startsWith","slice","isDirectory","pathname","stat","fs","err","createTreeCodeFromPath","pagePath","page","resolveDir","resolver","resolveParallelSegments","metadataResolver","pageExtensions","basePath","buildInfo","flyingShuttle","collectedDeclarations","splittedPath","split","isNotFoundRoute","UNDERSCORE_NOT_FOUND_ROUTE_ENTRY","isDefaultNotFound","isAppBuiltinNotFoundPage","appDirPrefix","APP_DIR_ALIAS","hasRootNotFound","pages","rootLayout","globalError","resolveAdjacentParallelSegments","segmentPath","absoluteSegmentPath","segmentIsDirectory","files","opendir","parallelSegments","dirent","name","charCodeAt","push","createSubtreePropsFromSegmentPath","segments","nestedCollectedDeclarations","join","props","isRootLayer","length","isRootLayoutOrRootPage","metadata","routerDirPath","resolvedRouteDir","createStaticMetadataFromRoute","segment","parallelKey","parallelSegment","matchedPagePath","resolvedPagePath","varName","PAGE_SEGMENT_KEY","JSON","stringify","createMetadataExportsCode","subSegmentPath","normalizedParallelSegment","Array","isArray","parallelSegmentPath","filePaths","Promise","all","Object","values","map","file","endsWith","definedFilePaths","filter","filePath","undefined","route","relatedModules","hasNotFoundFile","some","type","isFirstLayerGroupRoute","seg","isGroupSegment","layoutPath","find","resolvedGlobalErrorPath","parallelSegmentKey","normalizedParallelKey","subtreeCode","notFoundPath","UNDERSCORE_NOT_FOUND_ROUTE","modulesCode","treeCode","pageSubtreeCode","adjacentParallelSegments","adjacentParallelSegment","actualSegment","defaultPath","PARALLEL_ROUTE_DEFAULT_PATH","DEFAULT_SEGMENT_KEY","entries","value","createAbsolutePath","appDir","pathToTurnAbsolute","replace","path","sep","filesInDirMapMap","WeakMap","nextAppLoader","loaderOptions","getOptions","appPaths","rootDir","tsconfigPath","isDev","nextConfigOutput","preferredRegion","middlewareConfig","middlewareConfigBase64","nextConfigExperimentalUseEarlyImport","getModuleBuildInfo","_module","parse","Buffer","from","toString","absolutePagePath","extensions","extension","normalizedAppPaths","matched","existingChildrenPath","appPath","rest","children","isParallelRoute","isIncomingParallelPage","includes","hasCurrentParallelPage","Error","pathToResolve","resolveAppRoute","fileExistsInDirectory","dirname","fileName","_compilation","getFilesInDir","catch","Set","has","e","get","Map","set","absolutePath","filenameIndex","lastIndexOf","filename","result","ext","absolutePathWithExtension","addMissingDependency","exts","absoluteDir","filenameWithExt","isAppRouteRoute","createAppRouteCode","treeCodeResult","loaderContext","Log","bold","process","exit","createdRootLayout","rootLayoutPath","verifyRootLayout","dir","message","relative","_compiler","context","clear","AppPathnameNormalizer","normalize","code","loadEntrypoint","VAR_DEFINITION_PAGE","VAR_DEFINITION_PATHNAME","VAR_MODULE_GLOBAL_ERROR","tree","__next_app_require__","__next_app_load_chunk__","header","env","NODE_ENV","modulePath"],"mappings":"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"}