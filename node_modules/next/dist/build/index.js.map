{"version":3,"sources":["../../src/build/index.ts"],"sourcesContent":["import type { AppBuildManifest } from './webpack/plugins/app-build-manifest-plugin'\nimport type { PagesManifest } from './webpack/plugins/pages-manifest-plugin'\nimport type { ExportPathMap, NextConfigComplete } from '../server/config-shared'\nimport type { MiddlewareManifest } from './webpack/plugins/middleware-plugin'\nimport type { ActionManifest } from './webpack/plugins/flight-client-entry-plugin'\nimport type { Revalidate } from '../server/lib/revalidate'\n\nimport '../lib/setup-exception-listeners'\n\nimport { loadEnvConfig, type LoadedEnvFiles } from '@next/env'\nimport { bold, yellow } from '../lib/picocolors'\nimport crypto from 'crypto'\nimport { makeRe } from 'next/dist/compiled/picomatch'\nimport { existsSync, promises as fs } from 'fs'\nimport os from 'os'\nimport { Worker } from '../lib/worker'\nimport { defaultConfig } from '../server/config-shared'\nimport devalue from 'next/dist/compiled/devalue'\nimport findUp from 'next/dist/compiled/find-up'\nimport { nanoid } from 'next/dist/compiled/nanoid/index.cjs'\nimport { Sema } from 'next/dist/compiled/async-sema'\nimport path from 'path'\nimport {\n  STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR,\n  PUBLIC_DIR_MIDDLEWARE_CONFLICT,\n  MIDDLEWARE_FILENAME,\n  PAGES_DIR_ALIAS,\n  INSTRUMENTATION_HOOK_FILENAME,\n  RSC_PREFETCH_SUFFIX,\n  RSC_SUFFIX,\n  NEXT_RESUME_HEADER,\n  PRERENDER_REVALIDATE_HEADER,\n  PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER,\n  NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER,\n  NEXT_CACHE_REVALIDATED_TAGS_HEADER,\n  MATCHED_PATH_HEADER,\n} from '../lib/constants'\nimport { FileType, fileExists } from '../lib/file-exists'\nimport { findPagesDir } from '../lib/find-pages-dir'\nimport loadCustomRoutes, {\n  normalizeRouteRegex,\n} from '../lib/load-custom-routes'\nimport type {\n  CustomRoutes,\n  Header,\n  Redirect,\n  Rewrite,\n  RouteHas,\n} from '../lib/load-custom-routes'\nimport { nonNullable } from '../lib/non-nullable'\nimport { recursiveDelete } from '../lib/recursive-delete'\nimport { verifyPartytownSetup } from '../lib/verify-partytown-setup'\nimport { validateTurboNextConfig } from '../lib/turbopack-warning'\nimport {\n  BUILD_ID_FILE,\n  BUILD_MANIFEST,\n  CLIENT_STATIC_FILES_PATH,\n  EXPORT_DETAIL,\n  EXPORT_MARKER,\n  IMAGES_MANIFEST,\n  PAGES_MANIFEST,\n  PHASE_PRODUCTION_BUILD,\n  PRERENDER_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  ROUTES_MANIFEST,\n  SERVER_DIRECTORY,\n  SERVER_FILES_MANIFEST,\n  STATIC_STATUS_PAGES,\n  MIDDLEWARE_MANIFEST,\n  APP_PATHS_MANIFEST,\n  APP_PATH_ROUTES_MANIFEST,\n  APP_BUILD_MANIFEST,\n  RSC_MODULE_TYPES,\n  NEXT_FONT_MANIFEST,\n  SUBRESOURCE_INTEGRITY_MANIFEST,\n  MIDDLEWARE_BUILD_MANIFEST,\n  MIDDLEWARE_REACT_LOADABLE_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n  FUNCTIONS_CONFIG_MANIFEST,\n  UNDERSCORE_NOT_FOUND_ROUTE_ENTRY,\n  UNDERSCORE_NOT_FOUND_ROUTE,\n} from '../shared/lib/constants'\nimport {\n  getSortedRoutes,\n  isDynamicRoute,\n  getSortedRouteObjects,\n} from '../shared/lib/router/utils'\nimport type { __ApiPreviewProps } from '../server/api-utils'\nimport loadConfig from '../server/config'\nimport type { BuildManifest } from '../server/get-page-files'\nimport { normalizePagePath } from '../shared/lib/page-path/normalize-page-path'\nimport { getPagePath } from '../server/require'\nimport * as ciEnvironment from '../server/ci-info'\nimport {\n  turborepoTraceAccess,\n  TurborepoAccessTraceResult,\n  writeTurborepoAccessTraceResult,\n} from './turborepo-access-trace'\n\nimport {\n  eventBuildOptimize,\n  eventCliSession,\n  eventBuildFeatureUsage,\n  eventNextPlugins,\n  EVENT_BUILD_FEATURE_USAGE,\n  eventPackageUsedInGetServerSideProps,\n  eventBuildCompleted,\n} from '../telemetry/events'\nimport type { EventBuildFeatureUsage } from '../telemetry/events'\nimport { Telemetry } from '../telemetry/storage'\nimport { hadUnsupportedValue } from './analysis/get-page-static-info'\nimport {\n  createPagesMapping,\n  getPageFromPath,\n  getStaticInfoIncludingLayouts,\n  sortByPageExts,\n} from './entries'\nimport { PAGE_TYPES } from '../lib/page-types'\nimport { generateBuildId } from './generate-build-id'\nimport { isWriteable } from './is-writeable'\nimport * as Log from './output/log'\nimport createSpinner from './spinner'\nimport { trace, flushAllTraces, setGlobal, type Span } from '../trace'\nimport {\n  detectConflictingPaths,\n  computeFromManifest,\n  getJsPageSizeInKb,\n  printCustomRoutes,\n  printTreeView,\n  copyTracedFiles,\n  isReservedPage,\n  isAppBuiltinNotFoundPage,\n  collectRoutesUsingEdgeRuntime,\n  collectMeta,\n} from './utils'\nimport type { PageInfo, PageInfos, PrerenderedRoute } from './utils'\nimport type { AppSegmentConfig } from './segment-config/app/app-segment-config'\nimport { writeBuildId } from './write-build-id'\nimport { normalizeLocalePath } from '../shared/lib/i18n/normalize-locale-path'\nimport isError from '../lib/is-error'\nimport type { NextError } from '../lib/is-error'\nimport { isEdgeRuntime } from '../lib/is-edge-runtime'\nimport { recursiveCopy } from '../lib/recursive-copy'\nimport { recursiveReadDir } from '../lib/recursive-readdir'\nimport {\n  loadBindings,\n  lockfilePatchPromise,\n  teardownTraceSubscriber,\n  teardownHeapProfiler,\n  createDefineEnv,\n} from './swc'\nimport { getNamedRouteRegex } from '../shared/lib/router/utils/route-regex'\nimport { getFilesInDir } from '../lib/get-files-in-dir'\nimport { eventSwcPlugins } from '../telemetry/events/swc-plugins'\nimport { normalizeAppPath } from '../shared/lib/router/utils/app-paths'\nimport {\n  ACTION_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  RSC_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n  NEXT_ROUTER_SEGMENT_PREFETCH_HEADER,\n} from '../client/components/app-router-headers'\nimport { webpackBuild } from './webpack-build'\nimport { NextBuildContext, type MappedPages } from './build-context'\nimport { normalizePathSep } from '../shared/lib/page-path/normalize-path-sep'\nimport { isAppRouteRoute } from '../lib/is-app-route-route'\nimport { createClientRouterFilter } from '../lib/create-client-router-filter'\nimport { createValidFileMatcher } from '../server/lib/find-page-file'\nimport { startTypeChecking } from './type-check'\nimport { generateInterceptionRoutesRewrites } from '../lib/generate-interception-routes-rewrites'\n\nimport { buildDataRoute } from '../server/lib/router-utils/build-data-route'\nimport { collectBuildTraces } from './collect-build-traces'\nimport type { BuildTraceContext } from './webpack/plugins/next-trace-entrypoints-plugin'\nimport { formatManifest } from './manifests/formatter/format-manifest'\nimport {\n  recordFrameworkVersion,\n  updateBuildDiagnostics,\n  recordFetchMetrics,\n  updateIncrementalBuildMetrics,\n} from '../diagnostics/build-diagnostics'\nimport { getStartServerInfo, logStartInfo } from '../server/lib/app-info-log'\nimport type { NextEnabledDirectories } from '../server/base-server'\nimport { hasCustomExportOutput } from '../export/utils'\nimport {\n  getTurbopackJsConfig,\n  handleEntrypoints,\n  type EntryIssuesMap,\n  handleRouteType,\n  handlePagesErrorRoute,\n  formatIssue,\n  isRelevantWarning,\n  isPersistentCachingEnabled,\n} from '../server/dev/turbopack-utils'\nimport { TurbopackManifestLoader } from '../server/dev/turbopack/manifest-loader'\nimport type { Entrypoints } from '../server/dev/turbopack/types'\nimport { buildCustomRoute } from '../lib/build-custom-route'\nimport { createProgress } from './progress'\nimport { traceMemoryUsage } from '../lib/memory/trace'\nimport { generateEncryptionKeyBase64 } from '../server/app-render/encryption-utils-server'\nimport type { DeepReadonly } from '../shared/lib/deep-readonly'\nimport uploadTrace from '../trace/upload-trace'\nimport {\n  checkIsAppPPREnabled,\n  checkIsRoutePPREnabled,\n} from '../server/lib/experimental/ppr'\nimport {\n  detectChangedEntries,\n  type DetectedEntriesResult,\n} from './flying-shuttle/detect-changed-entries'\nimport { storeShuttle } from './flying-shuttle/store-shuttle'\nimport { stitchBuilds } from './flying-shuttle/stitch-builds'\nimport { inlineStaticEnv } from './flying-shuttle/inline-static-env'\nimport { FallbackMode, fallbackModeToFallbackField } from '../lib/fallback'\nimport { RenderingMode } from './rendering-mode'\nimport { getParamKeys } from '../server/request/fallback-params'\n\ntype Fallback = null | boolean | string\n\nexport interface SsgRoute {\n  dataRoute: string | null\n  experimentalBypassFor?: RouteHas[]\n\n  /**\n   * The headers that should be served along side this prerendered route.\n   */\n  initialHeaders?: Record<string, string>\n\n  /**\n   * The status code that should be served along side this prerendered route.\n   */\n  initialStatus?: number\n\n  /**\n   * The revalidation configuration for this route.\n   */\n  initialRevalidateSeconds: Revalidate\n\n  /**\n   * The prefetch data route associated with this page. If not defined, this\n   * page does not support prefetching.\n   */\n  prefetchDataRoute: string | null | undefined\n\n  /**\n   * The dynamic route that this statically prerendered route is based on. If\n   * this is null, then the route was not based on a dynamic route.\n   */\n  srcRoute: string | null\n\n  /**\n   * @deprecated use `renderingMode` instead\n   */\n  experimentalPPR: boolean | undefined\n\n  /**\n   * The rendering mode for this route. Only `undefined` when not an app router\n   * route.\n   */\n  renderingMode: RenderingMode | undefined\n\n  /**\n   * The headers that are allowed to be used when revalidating this route. These\n   * are used internally by Next.js to revalidate routes.\n   */\n  allowHeader: string[]\n}\n\nexport interface DynamicSsgRoute {\n  dataRoute: string | null\n  dataRouteRegex: string | null\n  experimentalBypassFor?: RouteHas[]\n  fallback: Fallback\n\n  /**\n   * When defined, it describes the revalidation configuration for the fallback\n   * route.\n   */\n  fallbackRevalidate: Revalidate | undefined\n\n  /**\n   * The headers that should used when serving the fallback.\n   */\n  fallbackHeaders?: Record<string, string>\n\n  /**\n   * The status code that should be used when serving the fallback.\n   */\n  fallbackStatus?: number\n  prefetchDataRoute: string | null | undefined\n  prefetchDataRouteRegex: string | null | undefined\n  routeRegex: string\n\n  /**\n   * @deprecated use `renderingMode` instead\n   */\n  experimentalPPR: boolean | undefined\n\n  /**\n   * The rendering mode for this route. Only `undefined` when not an app router\n   * route.\n   */\n  renderingMode: RenderingMode | undefined\n\n  /**\n   * The headers that are allowed to be used when revalidating this route. These\n   * are used internally by Next.js to revalidate routes.\n   */\n  allowHeader: string[]\n}\n\n/**\n * The headers that are allowed to be used when revalidating routes. Currently\n * this includes both headers used by the pages and app routers.\n */\nconst ALLOWED_HEADERS: string[] = [\n  MATCHED_PATH_HEADER,\n  PRERENDER_REVALIDATE_HEADER,\n  PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER,\n  NEXT_CACHE_REVALIDATED_TAGS_HEADER,\n  NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER,\n]\n\nexport type PrerenderManifest = {\n  version: 4\n  routes: { [route: string]: SsgRoute }\n  dynamicRoutes: { [route: string]: DynamicSsgRoute }\n  notFoundRoutes: string[]\n  preview: __ApiPreviewProps\n}\n\ntype ManifestBuiltRoute = {\n  /**\n   * The route pattern used to match requests for this route.\n   */\n  regex: string\n}\n\nexport type ManifestRewriteRoute = ManifestBuiltRoute & Rewrite\nexport type ManifestRedirectRoute = ManifestBuiltRoute & Redirect\nexport type ManifestHeaderRoute = ManifestBuiltRoute & Header\n\nexport type ManifestRoute = ManifestBuiltRoute & {\n  page: string\n  namedRegex?: string\n  routeKeys?: { [key: string]: string }\n}\n\nexport type ManifestDataRoute = {\n  page: string\n  routeKeys?: { [key: string]: string }\n  dataRouteRegex: string\n  namedDataRouteRegex?: string\n}\n\nexport type RoutesManifest = {\n  version: number\n  pages404: boolean\n  basePath: string\n  redirects: Array<Redirect>\n  rewrites?:\n    | Array<ManifestRewriteRoute>\n    | {\n        beforeFiles: Array<ManifestRewriteRoute>\n        afterFiles: Array<ManifestRewriteRoute>\n        fallback: Array<ManifestRewriteRoute>\n      }\n  headers: Array<ManifestHeaderRoute>\n  staticRoutes: Array<ManifestRoute>\n  dynamicRoutes: Array<ManifestRoute>\n  dataRoutes: Array<ManifestDataRoute>\n  i18n?: {\n    domains?: Array<{\n      http?: true\n      domain: string\n      locales?: string[]\n      defaultLocale: string\n    }>\n    locales: string[]\n    defaultLocale: string\n    localeDetection?: false\n  }\n  rsc: {\n    header: typeof RSC_HEADER\n    didPostponeHeader: typeof NEXT_DID_POSTPONE_HEADER\n    contentTypeHeader: typeof RSC_CONTENT_TYPE_HEADER\n    varyHeader: string\n    prefetchHeader: typeof NEXT_ROUTER_PREFETCH_HEADER\n    suffix: typeof RSC_SUFFIX\n    prefetchSuffix: typeof RSC_PREFETCH_SUFFIX\n  }\n  skipMiddlewareUrlNormalize?: boolean\n  caseSensitive?: boolean\n  /**\n   * Configuration related to Partial Prerendering.\n   */\n  ppr?: {\n    /**\n     * The chained response for the PPR resume.\n     */\n    chain: {\n      /**\n       * The headers that will indicate to Next.js that the request is for a PPR\n       * resume.\n       */\n      headers: Record<string, string>\n    }\n  }\n}\n\nfunction pageToRoute(page: string) {\n  const routeRegex = getNamedRouteRegex(page, true)\n  return {\n    page,\n    regex: normalizeRouteRegex(routeRegex.re.source),\n    routeKeys: routeRegex.routeKeys,\n    namedRegex: routeRegex.namedRegex,\n  }\n}\n\nfunction getCacheDir(distDir: string): string {\n  const cacheDir = path.join(distDir, 'cache')\n  if (ciEnvironment.isCI && !ciEnvironment.hasNextSupport) {\n    const hasCache = existsSync(cacheDir)\n\n    if (!hasCache) {\n      // Intentionally not piping to stderr which is what `Log.warn` does in case people fail in CI when\n      // stderr is detected.\n      console.log(\n        `${Log.prefixes.warn} No build cache found. Please configure build caching for faster rebuilds. Read more: https://nextjs.org/docs/messages/no-cache`\n      )\n    }\n  }\n  return cacheDir\n}\n\nasync function writeFileUtf8(filePath: string, content: string): Promise<void> {\n  await fs.writeFile(filePath, content, 'utf-8')\n}\n\nfunction readFileUtf8(filePath: string): Promise<string> {\n  return fs.readFile(filePath, 'utf8')\n}\n\nasync function writeManifest<T extends object>(\n  filePath: string,\n  manifest: T\n): Promise<void> {\n  await writeFileUtf8(filePath, formatManifest(manifest))\n}\n\nasync function readManifest<T extends object>(filePath: string): Promise<T> {\n  return JSON.parse(await readFileUtf8(filePath))\n}\n\nasync function writePrerenderManifest(\n  distDir: string,\n  manifest: DeepReadonly<PrerenderManifest>\n): Promise<void> {\n  await writeManifest(path.join(distDir, PRERENDER_MANIFEST), manifest)\n}\n\nasync function writeClientSsgManifest(\n  prerenderManifest: DeepReadonly<PrerenderManifest>,\n  {\n    buildId,\n    distDir,\n    locales,\n  }: { buildId: string; distDir: string; locales: string[] }\n) {\n  const ssgPages = new Set<string>(\n    [\n      ...Object.entries(prerenderManifest.routes)\n        // Filter out dynamic routes\n        .filter(([, { srcRoute }]) => srcRoute == null)\n        .map(([route]) => normalizeLocalePath(route, locales).pathname),\n      ...Object.keys(prerenderManifest.dynamicRoutes),\n    ].sort()\n  )\n\n  const clientSsgManifestContent = `self.__SSG_MANIFEST=${devalue(\n    ssgPages\n  )};self.__SSG_MANIFEST_CB&&self.__SSG_MANIFEST_CB()`\n\n  await writeFileUtf8(\n    path.join(distDir, CLIENT_STATIC_FILES_PATH, buildId, '_ssgManifest.js'),\n    clientSsgManifestContent\n  )\n}\n\ninterface FunctionsConfigManifest {\n  version: number\n  functions: Record<\n    string,\n    {\n      maxDuration?: number | undefined\n    }\n  >\n}\n\nasync function writeFunctionsConfigManifest(\n  distDir: string,\n  manifest: FunctionsConfigManifest\n): Promise<void> {\n  await writeManifest(\n    path.join(distDir, SERVER_DIRECTORY, FUNCTIONS_CONFIG_MANIFEST),\n    manifest\n  )\n}\n\ninterface RequiredServerFilesManifest {\n  version: number\n  config: NextConfigComplete\n  appDir: string\n  relativeAppDir: string\n  files: string[]\n  ignore: string[]\n}\n\nasync function writeRequiredServerFilesManifest(\n  distDir: string,\n  requiredServerFiles: RequiredServerFilesManifest\n) {\n  await writeManifest(\n    path.join(distDir, SERVER_FILES_MANIFEST),\n    requiredServerFiles\n  )\n}\n\nasync function writeImagesManifest(\n  distDir: string,\n  config: NextConfigComplete\n): Promise<void> {\n  const images = { ...config.images }\n  const { deviceSizes, imageSizes } = images\n  ;(images as any).sizes = [...deviceSizes, ...imageSizes]\n\n  // By default, remotePatterns will allow no remote images ([])\n  images.remotePatterns = (config?.images?.remotePatterns || []).map((p) => ({\n    // Modifying the manifest should also modify matchRemotePattern()\n    protocol: p.protocol,\n    hostname: makeRe(p.hostname).source,\n    port: p.port,\n    pathname: makeRe(p.pathname ?? '**', { dot: true }).source,\n    search: p.search,\n  }))\n\n  // By default, localPatterns will allow all local images (undefined)\n  if (config?.images?.localPatterns) {\n    images.localPatterns = config.images.localPatterns.map((p) => ({\n      // Modifying the manifest should also modify matchLocalPattern()\n      pathname: makeRe(p.pathname ?? '**', { dot: true }).source,\n      search: p.search,\n    }))\n  }\n\n  await writeManifest(path.join(distDir, IMAGES_MANIFEST), {\n    version: 1,\n    images,\n  })\n}\n\nconst STANDALONE_DIRECTORY = 'standalone' as const\nasync function writeStandaloneDirectory(\n  nextBuildSpan: Span,\n  distDir: string,\n  pageKeys: { pages: string[]; app: string[] | undefined },\n  denormalizedAppPages: string[] | undefined,\n  outputFileTracingRoot: string,\n  requiredServerFiles: RequiredServerFilesManifest,\n  middlewareManifest: MiddlewareManifest,\n  hasInstrumentationHook: boolean,\n  staticPages: Set<string>,\n  loadedEnvFiles: LoadedEnvFiles,\n  appDir: string | undefined\n) {\n  await nextBuildSpan\n    .traceChild('write-standalone-directory')\n    .traceAsyncFn(async () => {\n      await copyTracedFiles(\n        // requiredServerFiles.appDir Refers to the application directory, not App Router.\n        requiredServerFiles.appDir,\n        distDir,\n        pageKeys.pages,\n        denormalizedAppPages,\n        outputFileTracingRoot,\n        requiredServerFiles.config,\n        middlewareManifest,\n        hasInstrumentationHook,\n        staticPages\n      )\n\n      for (const file of [\n        ...requiredServerFiles.files,\n        path.join(requiredServerFiles.config.distDir, SERVER_FILES_MANIFEST),\n        ...loadedEnvFiles.reduce<string[]>((acc, envFile) => {\n          if (['.env', '.env.production'].includes(envFile.path)) {\n            acc.push(envFile.path)\n          }\n          return acc\n        }, []),\n      ]) {\n        // requiredServerFiles.appDir Refers to the application directory, not App Router.\n        const filePath = path.join(requiredServerFiles.appDir, file)\n        const outputPath = path.join(\n          distDir,\n          STANDALONE_DIRECTORY,\n          path.relative(outputFileTracingRoot, filePath)\n        )\n        await fs.mkdir(path.dirname(outputPath), {\n          recursive: true,\n        })\n        await fs.copyFile(filePath, outputPath)\n      }\n      await recursiveCopy(\n        path.join(distDir, SERVER_DIRECTORY, 'pages'),\n        path.join(\n          distDir,\n          STANDALONE_DIRECTORY,\n          path.relative(outputFileTracingRoot, distDir),\n          SERVER_DIRECTORY,\n          'pages'\n        ),\n        { overwrite: true }\n      )\n      if (appDir) {\n        const originalServerApp = path.join(distDir, SERVER_DIRECTORY, 'app')\n        if (existsSync(originalServerApp)) {\n          await recursiveCopy(\n            originalServerApp,\n            path.join(\n              distDir,\n              STANDALONE_DIRECTORY,\n              path.relative(outputFileTracingRoot, distDir),\n              SERVER_DIRECTORY,\n              'app'\n            ),\n            { overwrite: true }\n          )\n        }\n      }\n    })\n}\n\nfunction getNumberOfWorkers(config: NextConfigComplete) {\n  if (\n    config.experimental.cpus &&\n    config.experimental.cpus !== defaultConfig.experimental!.cpus\n  ) {\n    return config.experimental.cpus\n  }\n\n  if (config.experimental.memoryBasedWorkersCount) {\n    return Math.max(\n      Math.min(config.experimental.cpus || 1, Math.floor(os.freemem() / 1e9)),\n      // enforce a minimum of 4 workers\n      4\n    )\n  }\n\n  if (config.experimental.cpus) {\n    return config.experimental.cpus\n  }\n\n  // Fall back to 4 workers if a count is not specified\n  return 4\n}\n\nconst staticWorkerPath = require.resolve('./worker')\nconst staticWorkerExposedMethods = [\n  'hasCustomGetInitialProps',\n  'isPageStatic',\n  'getDefinedNamedExports',\n  'exportPages',\n] as const\ntype StaticWorker = typeof import('./worker') & Worker\nexport function createStaticWorker(\n  config: NextConfigComplete,\n  progress?: {\n    run: () => void\n    clear: () => void\n  }\n): StaticWorker {\n  return new Worker(staticWorkerPath, {\n    logger: Log,\n    numWorkers: getNumberOfWorkers(config),\n    onActivity: () => {\n      progress?.run()\n    },\n    onActivityAbort: () => {\n      progress?.clear()\n    },\n    forkOptions: {\n      env: process.env,\n    },\n    enableWorkerThreads: config.experimental.workerThreads,\n    exposedMethods: staticWorkerExposedMethods,\n  }) as StaticWorker\n}\n\nasync function writeFullyStaticExport(\n  config: NextConfigComplete,\n  dir: string,\n  enabledDirectories: NextEnabledDirectories,\n  configOutDir: string,\n  nextBuildSpan: Span\n): Promise<void> {\n  const exportApp = require('../export')\n    .default as typeof import('../export').default\n\n  const pagesWorker = createStaticWorker(config)\n  const appWorker = createStaticWorker(config)\n\n  await exportApp(\n    dir,\n    {\n      buildExport: false,\n      nextConfig: config,\n      enabledDirectories,\n      silent: true,\n      outdir: path.join(dir, configOutDir),\n      numWorkers: getNumberOfWorkers(config),\n    },\n    nextBuildSpan\n  )\n\n  pagesWorker.end()\n  appWorker.end()\n}\n\nasync function getBuildId(\n  isGenerateMode: boolean,\n  distDir: string,\n  nextBuildSpan: Span,\n  config: NextConfigComplete\n) {\n  if (isGenerateMode) {\n    return await fs.readFile(path.join(distDir, 'BUILD_ID'), 'utf8')\n  }\n  return await nextBuildSpan\n    .traceChild('generate-buildid')\n    .traceAsyncFn(() => generateBuildId(config.generateBuildId, nanoid))\n}\n\nconst IS_TURBOPACK_BUILD = process.env.TURBOPACK && process.env.TURBOPACK_BUILD\n\nexport default async function build(\n  dir: string,\n  reactProductionProfiling = false,\n  debugOutput = false,\n  runLint = true,\n  noMangling = false,\n  appDirOnly = false,\n  turboNextBuild = false,\n  experimentalBuildMode: 'default' | 'compile' | 'generate',\n  traceUploadUrl: string | undefined\n): Promise<void> {\n  const isCompileMode = experimentalBuildMode === 'compile'\n  const isGenerateMode = experimentalBuildMode === 'generate'\n\n  let loadedConfig: NextConfigComplete | undefined\n  try {\n    const nextBuildSpan = trace('next-build', undefined, {\n      buildMode: experimentalBuildMode,\n      isTurboBuild: String(turboNextBuild),\n      version: process.env.__NEXT_VERSION as string,\n    })\n\n    NextBuildContext.nextBuildSpan = nextBuildSpan\n    NextBuildContext.dir = dir\n    NextBuildContext.appDirOnly = appDirOnly\n    NextBuildContext.reactProductionProfiling = reactProductionProfiling\n    NextBuildContext.noMangling = noMangling\n\n    await nextBuildSpan.traceAsyncFn(async () => {\n      // attempt to load global env values so they are available in next.config.js\n      const { loadedEnvFiles } = nextBuildSpan\n        .traceChild('load-dotenv')\n        .traceFn(() => loadEnvConfig(dir, false, Log))\n      NextBuildContext.loadedEnvFiles = loadedEnvFiles\n\n      const turborepoAccessTraceResult = new TurborepoAccessTraceResult()\n      const config: NextConfigComplete = await nextBuildSpan\n        .traceChild('load-next-config')\n        .traceAsyncFn(() =>\n          turborepoTraceAccess(\n            () =>\n              loadConfig(PHASE_PRODUCTION_BUILD, dir, {\n                // Log for next.config loading process\n                silent: false,\n                reactProductionProfiling,\n              }),\n            turborepoAccessTraceResult\n          )\n        )\n      loadedConfig = config\n\n      process.env.NEXT_DEPLOYMENT_ID = config.deploymentId || ''\n      NextBuildContext.config = config\n\n      let configOutDir = 'out'\n      if (hasCustomExportOutput(config)) {\n        configOutDir = config.distDir\n        config.distDir = '.next'\n      }\n      const distDir = path.join(dir, config.distDir)\n      setGlobal('phase', PHASE_PRODUCTION_BUILD)\n      setGlobal('distDir', distDir)\n\n      const buildId = await getBuildId(\n        isGenerateMode,\n        distDir,\n        nextBuildSpan,\n        config\n      )\n      NextBuildContext.buildId = buildId\n\n      const { flyingShuttle } = config.experimental\n      const isFullFlyingShuttle = flyingShuttle?.mode === 'full'\n      const isStoreOnlyFlyingShuttle = flyingShuttle?.mode === 'store-only'\n\n      const shuttleDir = path.join(distDir, 'cache', 'shuttle')\n\n      if (flyingShuttle) {\n        await fs.mkdir(shuttleDir, {\n          recursive: true,\n        })\n\n        // since inlining comes after static generation we need\n        // to ensure this value is assigned to process env so it\n        // can still be accessed\n        for (const key in config.env) {\n          if (!process.env[key]) {\n            process.env[key] = config.env[key]\n          }\n        }\n      }\n\n      const customRoutes: CustomRoutes = await nextBuildSpan\n        .traceChild('load-custom-routes')\n        .traceAsyncFn(() => loadCustomRoutes(config))\n\n      const { headers, rewrites, redirects } = customRoutes\n      const combinedRewrites: Rewrite[] = [\n        ...rewrites.beforeFiles,\n        ...rewrites.afterFiles,\n        ...rewrites.fallback,\n      ]\n      const hasRewrites = combinedRewrites.length > 0\n\n      NextBuildContext.originalRewrites = config._originalRewrites\n      NextBuildContext.originalRedirects = config._originalRedirects\n\n      const cacheDir = getCacheDir(distDir)\n\n      const telemetry = new Telemetry({ distDir })\n\n      setGlobal('telemetry', telemetry)\n\n      const publicDir = path.join(dir, 'public')\n      const { pagesDir, appDir } = findPagesDir(dir)\n      NextBuildContext.pagesDir = pagesDir\n      NextBuildContext.appDir = appDir\n\n      const enabledDirectories: NextEnabledDirectories = {\n        app: typeof appDir === 'string',\n        pages: typeof pagesDir === 'string',\n      }\n\n      // Generate a random encryption key for this build.\n      // This key is used to encrypt cross boundary values and can be used to generate hashes.\n      const encryptionKey = await generateEncryptionKeyBase64({\n        isBuild: true,\n        distDir,\n      })\n      NextBuildContext.encryptionKey = encryptionKey\n\n      const isSrcDir = path\n        .relative(dir, pagesDir || appDir || '')\n        .startsWith('src')\n      const hasPublicDir = existsSync(publicDir)\n\n      telemetry.record(\n        eventCliSession(dir, config, {\n          webpackVersion: 5,\n          cliCommand: 'build',\n          isSrcDir,\n          hasNowJson: !!(await findUp('now.json', { cwd: dir })),\n          isCustomServer: null,\n          turboFlag: false,\n          pagesDir: !!pagesDir,\n          appDir: !!appDir,\n        })\n      )\n\n      eventNextPlugins(path.resolve(dir)).then((events) =>\n        telemetry.record(events)\n      )\n\n      eventSwcPlugins(path.resolve(dir), config).then((events) =>\n        telemetry.record(events)\n      )\n\n      // Always log next version first then start rest jobs\n      const { envInfo, expFeatureInfo } = await getStartServerInfo(dir, false)\n      logStartInfo({\n        networkUrl: null,\n        appUrl: null,\n        envInfo,\n        expFeatureInfo,\n      })\n\n      const ignoreESLint = Boolean(config.eslint.ignoreDuringBuilds)\n      const shouldLint = !ignoreESLint && runLint\n\n      const typeCheckingOptions: Parameters<typeof startTypeChecking>[0] = {\n        dir,\n        appDir,\n        pagesDir,\n        runLint,\n        shouldLint,\n        ignoreESLint,\n        telemetry,\n        nextBuildSpan,\n        config,\n        cacheDir,\n      }\n\n      const distDirCreated = await nextBuildSpan\n        .traceChild('create-dist-dir')\n        .traceAsyncFn(async () => {\n          try {\n            await fs.mkdir(distDir, { recursive: true })\n            return true\n          } catch (err) {\n            if (isError(err) && err.code === 'EPERM') {\n              return false\n            }\n            throw err\n          }\n        })\n\n      if (!distDirCreated || !(await isWriteable(distDir))) {\n        throw new Error(\n          '> Build directory is not writeable. https://nextjs.org/docs/messages/build-dir-not-writeable'\n        )\n      }\n\n      if (config.cleanDistDir && !isGenerateMode) {\n        await recursiveDelete(distDir, /^cache/)\n      }\n\n      // For app directory, we run type checking after build. That's because\n      // we dynamically generate types for each layout and page in the app\n      // directory.\n      if (!appDir && !isCompileMode)\n        await startTypeChecking(typeCheckingOptions)\n\n      if (appDir && 'exportPathMap' in config) {\n        Log.error(\n          'The \"exportPathMap\" configuration cannot be used with the \"app\" directory. Please use generateStaticParams() instead.'\n        )\n        await telemetry.flush()\n        process.exit(1)\n      }\n\n      const buildLintEvent: EventBuildFeatureUsage = {\n        featureName: 'build-lint',\n        invocationCount: shouldLint ? 1 : 0,\n      }\n      telemetry.record({\n        eventName: EVENT_BUILD_FEATURE_USAGE,\n        payload: buildLintEvent,\n      })\n\n      const validFileMatcher = createValidFileMatcher(\n        config.pageExtensions,\n        appDir\n      )\n\n      const providedPagePaths: string[] = JSON.parse(\n        process.env.NEXT_PRIVATE_PAGE_PATHS || '[]'\n      )\n\n      let pagesPaths = Boolean(process.env.NEXT_PRIVATE_PAGE_PATHS)\n        ? providedPagePaths\n        : !appDirOnly && pagesDir\n          ? await nextBuildSpan.traceChild('collect-pages').traceAsyncFn(() =>\n              recursiveReadDir(pagesDir, {\n                pathnameFilter: validFileMatcher.isPageFile,\n              })\n            )\n          : []\n\n      let changedPagePathsResult:\n        | undefined\n        | {\n            changed: DetectedEntriesResult\n            unchanged: DetectedEntriesResult\n          }\n\n      if (pagesPaths && isFullFlyingShuttle) {\n        await nextBuildSpan\n          .traceChild('detect-changed-entries', { type: 'pages' })\n          .traceAsyncFn(async () => {\n            changedPagePathsResult = await detectChangedEntries({\n              pagesPaths,\n              pageExtensions: config.pageExtensions,\n              distDir,\n              shuttleDir,\n              config,\n            })\n            await updateIncrementalBuildMetrics({\n              changedPagePaths: changedPagePathsResult.changed.pages,\n              unchangedPagePaths: changedPagePathsResult.unchanged.pages,\n            })\n            pagesPaths = changedPagePathsResult.changed.pages\n          })\n      }\n\n      const middlewareDetectionRegExp = new RegExp(\n        `^${MIDDLEWARE_FILENAME}\\\\.(?:${config.pageExtensions.join('|')})$`\n      )\n\n      const instrumentationHookDetectionRegExp = new RegExp(\n        `^${INSTRUMENTATION_HOOK_FILENAME}\\\\.(?:${config.pageExtensions.join(\n          '|'\n        )})$`\n      )\n\n      const rootDir = path.join((pagesDir || appDir)!, '..')\n      const includes = [\n        middlewareDetectionRegExp,\n        instrumentationHookDetectionRegExp,\n      ]\n\n      const rootPaths = Array.from(await getFilesInDir(rootDir))\n        .filter((file) => includes.some((include) => include.test(file)))\n        .sort(sortByPageExts(config.pageExtensions))\n        .map((file) => path.join(rootDir, file).replace(dir, ''))\n\n      const hasInstrumentationHook = rootPaths.some((p) =>\n        p.includes(INSTRUMENTATION_HOOK_FILENAME)\n      )\n      const hasMiddlewareFile = rootPaths.some((p) =>\n        p.includes(MIDDLEWARE_FILENAME)\n      )\n\n      NextBuildContext.hasInstrumentationHook = hasInstrumentationHook\n\n      const previewProps: __ApiPreviewProps = {\n        previewModeId: crypto.randomBytes(16).toString('hex'),\n        previewModeSigningKey: crypto.randomBytes(32).toString('hex'),\n        previewModeEncryptionKey: crypto.randomBytes(32).toString('hex'),\n      }\n      NextBuildContext.previewProps = previewProps\n\n      const mappedPages = await nextBuildSpan\n        .traceChild('create-pages-mapping')\n        .traceAsyncFn(() =>\n          createPagesMapping({\n            isDev: false,\n            pageExtensions: config.pageExtensions,\n            pagesType: PAGE_TYPES.PAGES,\n            pagePaths: pagesPaths,\n            pagesDir,\n            appDir,\n          })\n        )\n      NextBuildContext.mappedPages = mappedPages\n\n      let mappedAppPages: MappedPages | undefined\n      let denormalizedAppPages: string[] | undefined\n      let changedAppPathsResult:\n        | undefined\n        | {\n            changed: DetectedEntriesResult\n            unchanged: DetectedEntriesResult\n          }\n\n      if (appDir) {\n        const providedAppPaths: string[] = JSON.parse(\n          process.env.NEXT_PRIVATE_APP_PATHS || '[]'\n        )\n\n        let appPaths = Boolean(process.env.NEXT_PRIVATE_APP_PATHS)\n          ? providedAppPaths\n          : await nextBuildSpan\n              .traceChild('collect-app-paths')\n              .traceAsyncFn(() =>\n                recursiveReadDir(appDir, {\n                  pathnameFilter: (absolutePath) =>\n                    validFileMatcher.isAppRouterPage(absolutePath) ||\n                    // For now we only collect the root /not-found page in the app\n                    // directory as the 404 fallback\n                    validFileMatcher.isRootNotFound(absolutePath),\n                  ignorePartFilter: (part) => part.startsWith('_'),\n                })\n              )\n\n        if (appPaths && isFullFlyingShuttle) {\n          await nextBuildSpan\n            .traceChild('detect-changed-entries', { type: 'app' })\n            .traceAsyncFn(async () => {\n              changedAppPathsResult = await detectChangedEntries({\n                appPaths,\n                pageExtensions: config.pageExtensions,\n                distDir,\n                shuttleDir,\n                config,\n              })\n              await updateIncrementalBuildMetrics({\n                changedAppPaths: changedAppPathsResult.changed.app,\n                unchangedAppPaths: changedAppPathsResult.unchanged.app,\n              })\n              appPaths = changedAppPathsResult.changed.app\n            })\n        }\n\n        mappedAppPages = await nextBuildSpan\n          .traceChild('create-app-mapping')\n          .traceAsyncFn(() =>\n            createPagesMapping({\n              pagePaths: appPaths,\n              isDev: false,\n              pagesType: PAGE_TYPES.APP,\n              pageExtensions: config.pageExtensions,\n              pagesDir,\n              appDir,\n            })\n          )\n\n        NextBuildContext.mappedAppPages = mappedAppPages\n      }\n\n      const mappedRootPaths = await createPagesMapping({\n        isDev: false,\n        pageExtensions: config.pageExtensions,\n        pagePaths: rootPaths,\n        pagesType: PAGE_TYPES.ROOT,\n        pagesDir: pagesDir,\n        appDir,\n      })\n      NextBuildContext.mappedRootPaths = mappedRootPaths\n\n      const pagesPageKeys = Object.keys(mappedPages)\n\n      const conflictingAppPagePaths: [pagePath: string, appPath: string][] = []\n      const appPageKeys = new Set<string>()\n      if (mappedAppPages) {\n        denormalizedAppPages = Object.keys(mappedAppPages)\n        for (const appKey of denormalizedAppPages) {\n          const normalizedAppPageKey = normalizeAppPath(appKey)\n          const pagePath = mappedPages[normalizedAppPageKey]\n          if (pagePath) {\n            const appPath = mappedAppPages[appKey]\n            conflictingAppPagePaths.push([\n              pagePath.replace(/^private-next-pages/, 'pages'),\n              appPath.replace(/^private-next-app-dir/, 'app'),\n            ])\n          }\n          appPageKeys.add(normalizedAppPageKey)\n        }\n      }\n\n      const appPaths = Array.from(appPageKeys)\n      // Interception routes are modelled as beforeFiles rewrites\n      rewrites.beforeFiles.push(\n        ...generateInterceptionRoutesRewrites(appPaths, config.basePath)\n      )\n\n      NextBuildContext.rewrites = rewrites\n\n      const totalAppPagesCount = appPaths.length\n\n      const pageKeys = {\n        pages: pagesPageKeys,\n        app: appPaths.length > 0 ? appPaths : undefined,\n      }\n\n      // Turbopack already handles conflicting app and page routes.\n      if (!IS_TURBOPACK_BUILD) {\n        const numConflictingAppPaths = conflictingAppPagePaths.length\n        if (mappedAppPages && numConflictingAppPaths > 0) {\n          Log.error(\n            `Conflicting app and page file${\n              numConflictingAppPaths === 1 ? ' was' : 's were'\n            } found, please remove the conflicting files to continue:`\n          )\n          for (const [pagePath, appPath] of conflictingAppPagePaths) {\n            Log.error(`  \"${pagePath}\" - \"${appPath}\"`)\n          }\n          await telemetry.flush()\n          process.exit(1)\n        }\n      }\n\n      const conflictingPublicFiles: string[] = []\n      const hasPages404 = mappedPages['/404']?.startsWith(PAGES_DIR_ALIAS)\n      const hasApp404 = !!mappedAppPages?.[UNDERSCORE_NOT_FOUND_ROUTE_ENTRY]\n      const hasCustomErrorPage =\n        mappedPages['/_error'].startsWith(PAGES_DIR_ALIAS)\n\n      if (hasPublicDir) {\n        const hasPublicUnderScoreNextDir = existsSync(\n          path.join(publicDir, '_next')\n        )\n        if (hasPublicUnderScoreNextDir) {\n          throw new Error(PUBLIC_DIR_MIDDLEWARE_CONFLICT)\n        }\n      }\n\n      await nextBuildSpan\n        .traceChild('public-dir-conflict-check')\n        .traceAsyncFn(async () => {\n          // Check if pages conflict with files in `public`\n          // Only a page of public file can be served, not both.\n          for (const page in mappedPages) {\n            const hasPublicPageFile = await fileExists(\n              path.join(publicDir, page === '/' ? '/index' : page),\n              FileType.File\n            )\n            if (hasPublicPageFile) {\n              conflictingPublicFiles.push(page)\n            }\n          }\n\n          const numConflicting = conflictingPublicFiles.length\n\n          if (numConflicting) {\n            throw new Error(\n              `Conflicting public and page file${\n                numConflicting === 1 ? ' was' : 's were'\n              } found. https://nextjs.org/docs/messages/conflicting-public-file-page\\n${conflictingPublicFiles.join(\n                '\\n'\n              )}`\n            )\n          }\n        })\n\n      const nestedReservedPages = pageKeys.pages.filter((page) => {\n        return (\n          page.match(/\\/(_app|_document|_error)$/) && path.dirname(page) !== '/'\n        )\n      })\n\n      if (nestedReservedPages.length) {\n        Log.warn(\n          `The following reserved Next.js pages were detected not directly under the pages directory:\\n` +\n            nestedReservedPages.join('\\n') +\n            `\\nSee more info here: https://nextjs.org/docs/messages/nested-reserved-page\\n`\n        )\n      }\n\n      const restrictedRedirectPaths = ['/_next'].map((p) =>\n        config.basePath ? `${config.basePath}${p}` : p\n      )\n\n      const isAppDynamicIOEnabled = Boolean(config.experimental.dynamicIO)\n      const isAppPPREnabled = checkIsAppPPREnabled(config.experimental.ppr)\n\n      const routesManifestPath = path.join(distDir, ROUTES_MANIFEST)\n      const routesManifest: RoutesManifest = nextBuildSpan\n        .traceChild('generate-routes-manifest')\n        .traceFn(() => {\n          const sortedRoutes = getSortedRoutes([\n            ...pageKeys.pages,\n            ...(pageKeys.app ?? []),\n          ])\n          const dynamicRoutes: Array<ReturnType<typeof pageToRoute>> = []\n          const staticRoutes: typeof dynamicRoutes = []\n\n          for (const route of sortedRoutes) {\n            if (isDynamicRoute(route)) {\n              dynamicRoutes.push(pageToRoute(route))\n            } else if (!isReservedPage(route)) {\n              staticRoutes.push(pageToRoute(route))\n            }\n          }\n\n          return {\n            version: 3,\n            pages404: true,\n            caseSensitive: !!config.experimental.caseSensitiveRoutes,\n            basePath: config.basePath,\n            redirects: redirects.map((r) =>\n              buildCustomRoute('redirect', r, restrictedRedirectPaths)\n            ),\n            headers: headers.map((r) => buildCustomRoute('header', r)),\n            dynamicRoutes,\n            staticRoutes,\n            dataRoutes: [],\n            i18n: config.i18n || undefined,\n            rsc: {\n              header: RSC_HEADER,\n              // This vary header is used as a default. It is technically re-assigned in `base-server`,\n              // and may include an additional Vary option for `Next-URL`.\n              varyHeader: `${RSC_HEADER}, ${NEXT_ROUTER_STATE_TREE_HEADER}, ${NEXT_ROUTER_PREFETCH_HEADER}, ${NEXT_ROUTER_SEGMENT_PREFETCH_HEADER}`,\n              prefetchHeader: NEXT_ROUTER_PREFETCH_HEADER,\n              didPostponeHeader: NEXT_DID_POSTPONE_HEADER,\n              contentTypeHeader: RSC_CONTENT_TYPE_HEADER,\n              suffix: RSC_SUFFIX,\n              prefetchSuffix: RSC_PREFETCH_SUFFIX,\n            },\n            skipMiddlewareUrlNormalize: config.skipMiddlewareUrlNormalize,\n            ppr: isAppPPREnabled\n              ? {\n                  chain: {\n                    headers: {\n                      [NEXT_RESUME_HEADER]: '1',\n                    },\n                  },\n                }\n              : undefined,\n          } satisfies RoutesManifest\n        })\n\n      if (rewrites.beforeFiles.length === 0 && rewrites.fallback.length === 0) {\n        routesManifest.rewrites = rewrites.afterFiles.map((r) =>\n          buildCustomRoute('rewrite', r)\n        )\n      } else {\n        routesManifest.rewrites = {\n          beforeFiles: rewrites.beforeFiles.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n          afterFiles: rewrites.afterFiles.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n          fallback: rewrites.fallback.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n        }\n      }\n      let clientRouterFilters:\n        | undefined\n        | ReturnType<typeof createClientRouterFilter>\n\n      if (config.experimental.clientRouterFilter) {\n        const nonInternalRedirects = (config._originalRedirects || []).filter(\n          (r: any) => !r.internal\n        )\n        const filterPaths: string[] = []\n\n        if (isFullFlyingShuttle) {\n          filterPaths.push(\n            ...[\n              // client filter always has all app paths\n              ...(changedAppPathsResult?.unchanged?.app || []),\n              ...(changedAppPathsResult?.changed?.app || []),\n            ].map((entry) =>\n              normalizeAppPath(getPageFromPath(entry, config.pageExtensions))\n            ),\n            ...(changedPagePathsResult?.unchanged.pages.length\n              ? changedPagePathsResult.changed?.pages || []\n              : []\n            ).map((item) => getPageFromPath(item, config.pageExtensions))\n          )\n        } else {\n          filterPaths.push(...appPaths)\n        }\n\n        clientRouterFilters = createClientRouterFilter(\n          filterPaths,\n          config.experimental.clientRouterFilterRedirects\n            ? nonInternalRedirects\n            : [],\n          config.experimental.clientRouterFilterAllowedRate\n        )\n        NextBuildContext.clientRouterFilters = clientRouterFilters\n      }\n\n      // Ensure commonjs handling is used for files in the distDir (generally .next)\n      // Files outside of the distDir can be \"type\": \"module\"\n      await writeFileUtf8(\n        path.join(distDir, 'package.json'),\n        '{\"type\": \"commonjs\"}'\n      )\n\n      // These are written to distDir, so they need to come after creating and cleaning distDr.\n      await recordFrameworkVersion(process.env.__NEXT_VERSION as string)\n      await updateBuildDiagnostics({\n        buildStage: 'start',\n      })\n\n      const outputFileTracingRoot = config.outputFileTracingRoot || dir\n\n      const pagesManifestPath = path.join(\n        distDir,\n        SERVER_DIRECTORY,\n        PAGES_MANIFEST\n      )\n\n      async function turbopackBuild(): Promise<{\n        duration: number\n        buildTraceContext: undefined\n        shutdownPromise: Promise<void>\n      }> {\n        if (!IS_TURBOPACK_BUILD) {\n          throw new Error(\"next build doesn't support turbopack yet\")\n        }\n\n        await validateTurboNextConfig({\n          dir,\n          isDev: false,\n        })\n\n        const startTime = process.hrtime()\n        const bindings = await loadBindings(config?.experimental?.useWasmBinary)\n        const dev = false\n\n        // const supportedBrowsers = await getSupportedBrowsers(dir, dev)\n        const supportedBrowsers = [\n          'last 1 Chrome versions, last 1 Firefox versions, last 1 Safari versions, last 1 Edge versions',\n        ]\n\n        const project = await bindings.turbo.createProject(\n          {\n            projectPath: dir,\n            rootPath:\n              config.experimental?.turbo?.root ||\n              config.outputFileTracingRoot ||\n              dir,\n            distDir,\n            nextConfig: config,\n            jsConfig: await getTurbopackJsConfig(dir, config),\n            watch: {\n              enable: false,\n            },\n            dev,\n            env: process.env as Record<string, string>,\n            defineEnv: createDefineEnv({\n              isTurbopack: true,\n              clientRouterFilters,\n              config,\n              dev,\n              distDir,\n              fetchCacheKeyPrefix: config.experimental.fetchCacheKeyPrefix,\n              hasRewrites,\n              // Implemented separately in Turbopack, doesn't have to be passed here.\n              middlewareMatchers: undefined,\n            }),\n            buildId: NextBuildContext.buildId!,\n            encryptionKey: NextBuildContext.encryptionKey!,\n            previewProps: NextBuildContext.previewProps!,\n            browserslistQuery: supportedBrowsers.join(', '),\n          },\n          {\n            persistentCaching: isPersistentCachingEnabled(config),\n            memoryLimit: config.experimental.turbo?.memoryLimit,\n          }\n        )\n\n        await fs.mkdir(path.join(distDir, 'server'), { recursive: true })\n        await fs.mkdir(path.join(distDir, 'static', buildId), {\n          recursive: true,\n        })\n        await fs.writeFile(\n          path.join(distDir, 'package.json'),\n          JSON.stringify(\n            {\n              type: 'commonjs',\n            },\n            null,\n            2\n          )\n        )\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const entrypointsSubscription = project.entrypointsSubscribe()\n        const currentEntrypoints: Entrypoints = {\n          global: {\n            app: undefined,\n            document: undefined,\n            error: undefined,\n\n            middleware: undefined,\n            instrumentation: undefined,\n          },\n\n          app: new Map(),\n          page: new Map(),\n        }\n\n        const currentEntryIssues: EntryIssuesMap = new Map()\n\n        const manifestLoader = new TurbopackManifestLoader({\n          buildId,\n          distDir,\n          encryptionKey,\n        })\n\n        const entrypointsResult = await entrypointsSubscription.next()\n        if (entrypointsResult.done) {\n          throw new Error('Turbopack did not return any entrypoints')\n        }\n        entrypointsSubscription.return?.().catch(() => {})\n\n        const entrypoints = entrypointsResult.value\n\n        const topLevelErrors: {\n          message: string\n        }[] = []\n        for (const issue of entrypoints.issues) {\n          topLevelErrors.push({\n            message: formatIssue(issue),\n          })\n        }\n\n        if (topLevelErrors.length > 0) {\n          throw new Error(\n            `Turbopack build failed with ${\n              topLevelErrors.length\n            } issues:\\n${topLevelErrors.map((e) => e.message).join('\\n')}`\n          )\n        }\n\n        await handleEntrypoints({\n          entrypoints,\n          currentEntrypoints,\n          currentEntryIssues,\n          manifestLoader,\n          devRewrites: undefined,\n          productionRewrites: customRoutes.rewrites,\n          logErrors: false,\n        })\n\n        const progress = createProgress(\n          currentEntrypoints.page.size + currentEntrypoints.app.size + 1,\n          'Building'\n        )\n        const promises: Promise<any>[] = []\n\n        // Concurrency will start at INITIAL_CONCURRENCY and\n        // slowly ramp up to CONCURRENCY by increasing the\n        // concurrency by 1 every time a task is completed.\n        const INITIAL_CONCURRENCY = 5\n        const CONCURRENCY = 10\n\n        const sema = new Sema(INITIAL_CONCURRENCY)\n        let remainingRampup = CONCURRENCY - INITIAL_CONCURRENCY\n        const enqueue = (fn: () => Promise<void>) => {\n          promises.push(\n            (async () => {\n              await sema.acquire()\n              try {\n                await fn()\n              } finally {\n                sema.release()\n                if (remainingRampup > 0) {\n                  remainingRampup--\n                  sema.release()\n                }\n                progress.run()\n              }\n            })()\n          )\n        }\n\n        if (!appDirOnly) {\n          for (const [page, route] of currentEntrypoints.page) {\n            enqueue(() =>\n              handleRouteType({\n                dev,\n                page,\n                pathname: page,\n                route,\n\n                currentEntryIssues,\n                entrypoints: currentEntrypoints,\n                manifestLoader,\n                devRewrites: undefined,\n                productionRewrites: customRoutes.rewrites,\n                logErrors: false,\n              })\n            )\n          }\n        }\n\n        for (const [page, route] of currentEntrypoints.app) {\n          enqueue(() =>\n            handleRouteType({\n              page,\n              dev: false,\n              pathname: normalizeAppPath(page),\n              route,\n              currentEntryIssues,\n              entrypoints: currentEntrypoints,\n              manifestLoader,\n              devRewrites: undefined,\n              productionRewrites: customRoutes.rewrites,\n              logErrors: false,\n            })\n          )\n        }\n\n        enqueue(() =>\n          handlePagesErrorRoute({\n            dev: false,\n            currentEntryIssues,\n            entrypoints: currentEntrypoints,\n            manifestLoader,\n            devRewrites: undefined,\n            productionRewrites: customRoutes.rewrites,\n            logErrors: false,\n          })\n        )\n        await Promise.all(promises)\n\n        await manifestLoader.writeManifests({\n          devRewrites: undefined,\n          productionRewrites: customRoutes.rewrites,\n          entrypoints: currentEntrypoints,\n        })\n\n        const errors: {\n          page: string\n          message: string\n        }[] = []\n        const warnings: {\n          page: string\n          message: string\n        }[] = []\n        for (const [page, entryIssues] of currentEntryIssues) {\n          for (const issue of entryIssues.values()) {\n            if (issue.severity !== 'warning') {\n              errors.push({\n                page,\n                message: formatIssue(issue),\n              })\n            } else {\n              if (isRelevantWarning(issue)) {\n                warnings.push({\n                  page,\n                  message: formatIssue(issue),\n                })\n              }\n            }\n          }\n        }\n\n        const shutdownPromise = project.shutdown()\n\n        if (warnings.length > 0) {\n          Log.warn(\n            `Turbopack build collected ${warnings.length} warnings:\\n${warnings\n              .map((e) => {\n                return 'Page: ' + e.page + '\\n' + e.message\n              })\n              .join('\\n')}`\n          )\n        }\n\n        if (errors.length > 0) {\n          throw new Error(\n            `Turbopack build failed with ${errors.length} errors:\\n${errors\n              .map((e) => {\n                return 'Page: ' + e.page + '\\n' + e.message\n              })\n              .join('\\n')}`\n          )\n        }\n\n        const time = process.hrtime(startTime)\n        return {\n          duration: time[0] + time[1] / 1e9,\n          buildTraceContext: undefined,\n          shutdownPromise,\n        }\n      }\n\n      let buildTraceContext: undefined | BuildTraceContext\n      let buildTracesPromise: Promise<any> | undefined = undefined\n\n      // If there's has a custom webpack config and disable the build worker.\n      // Otherwise respect the option if it's set.\n      const useBuildWorker =\n        config.experimental.webpackBuildWorker ||\n        (config.experimental.webpackBuildWorker === undefined &&\n          !config.webpack)\n      const runServerAndEdgeInParallel =\n        config.experimental.parallelServerCompiles\n      const collectServerBuildTracesInParallel =\n        config.experimental.parallelServerBuildTraces ||\n        (config.experimental.parallelServerBuildTraces === undefined &&\n          isCompileMode)\n\n      nextBuildSpan.setAttribute(\n        'has-custom-webpack-config',\n        String(!!config.webpack)\n      )\n      nextBuildSpan.setAttribute('use-build-worker', String(useBuildWorker))\n\n      if (\n        !useBuildWorker &&\n        (runServerAndEdgeInParallel || collectServerBuildTracesInParallel)\n      ) {\n        throw new Error(\n          'The \"parallelServerBuildTraces\" and \"parallelServerCompiles\" options may only be used when build workers can be used. Read more: https://nextjs.org/docs/messages/parallel-build-without-worker'\n        )\n      }\n\n      Log.info('Creating an optimized production build ...')\n      traceMemoryUsage('Starting build', nextBuildSpan)\n\n      await updateBuildDiagnostics({\n        buildStage: 'compile',\n        buildOptions: {\n          useBuildWorker: String(useBuildWorker),\n        },\n      })\n\n      let shutdownPromise = Promise.resolve()\n      if (!isGenerateMode) {\n        if (turboNextBuild) {\n          const {\n            duration: compilerDuration,\n            shutdownPromise: p,\n            ...rest\n          } = await turbopackBuild()\n          shutdownPromise = p\n          traceMemoryUsage('Finished build', nextBuildSpan)\n\n          buildTraceContext = rest.buildTraceContext\n\n          let durationString\n          if (compilerDuration > 120) {\n            durationString = `${Math.round(compilerDuration / 6) / 10}min`\n          } else if (compilerDuration > 20) {\n            durationString = `${Math.round(compilerDuration)}s`\n          } else if (compilerDuration > 2) {\n            durationString = `${Math.round(compilerDuration * 10) / 10}s`\n          } else {\n            durationString = `${Math.round(compilerDuration * 1000)}ms`\n          }\n          Log.event(`Compiled successfully in ${durationString}`)\n\n          telemetry.record(\n            eventBuildCompleted(pagesPaths, {\n              durationInSeconds: Math.round(compilerDuration),\n              totalAppPagesCount,\n            })\n          )\n        } else {\n          if (\n            runServerAndEdgeInParallel ||\n            collectServerBuildTracesInParallel\n          ) {\n            let durationInSeconds = 0\n\n            await updateBuildDiagnostics({\n              buildStage: 'compile-server',\n            })\n\n            const serverBuildPromise = webpackBuild(useBuildWorker, [\n              'server',\n            ]).then((res) => {\n              traceMemoryUsage('Finished server compilation', nextBuildSpan)\n              buildTraceContext = res.buildTraceContext\n              durationInSeconds += res.duration\n\n              if (collectServerBuildTracesInParallel) {\n                const buildTraceWorker = new Worker(\n                  require.resolve('./collect-build-traces'),\n                  {\n                    numWorkers: 1,\n                    exposedMethods: ['collectBuildTraces'],\n                  }\n                ) as Worker & typeof import('./collect-build-traces')\n\n                buildTracesPromise = buildTraceWorker\n                  .collectBuildTraces({\n                    dir,\n                    config,\n                    distDir,\n                    // Serialize Map as this is sent to the worker.\n                    edgeRuntimeRoutes: collectRoutesUsingEdgeRuntime(new Map()),\n                    staticPages: [],\n                    hasSsrAmpPages: false,\n                    buildTraceContext,\n                    outputFileTracingRoot,\n                    isFlyingShuttle: Boolean(flyingShuttle),\n                  })\n                  .catch((err) => {\n                    console.error(err)\n                    process.exit(1)\n                  })\n              }\n            })\n            if (!runServerAndEdgeInParallel) {\n              await serverBuildPromise\n              await updateBuildDiagnostics({\n                buildStage: 'webpack-compile-edge-server',\n              })\n            }\n\n            const edgeBuildPromise = webpackBuild(useBuildWorker, [\n              'edge-server',\n            ]).then((res) => {\n              durationInSeconds += res.duration\n              traceMemoryUsage(\n                'Finished edge-server compilation',\n                nextBuildSpan\n              )\n            })\n            if (runServerAndEdgeInParallel) {\n              await serverBuildPromise\n              await updateBuildDiagnostics({\n                buildStage: 'webpack-compile-edge-server',\n              })\n            }\n            await edgeBuildPromise\n\n            await updateBuildDiagnostics({\n              buildStage: 'webpack-compile-client',\n            })\n\n            await webpackBuild(useBuildWorker, ['client']).then((res) => {\n              durationInSeconds += res.duration\n              traceMemoryUsage('Finished client compilation', nextBuildSpan)\n            })\n\n            Log.event('Compiled successfully')\n\n            telemetry.record(\n              eventBuildCompleted(pagesPaths, {\n                durationInSeconds,\n                totalAppPagesCount,\n              })\n            )\n          } else {\n            const { duration: compilerDuration, ...rest } = await webpackBuild(\n              useBuildWorker,\n              null\n            )\n            traceMemoryUsage('Finished build', nextBuildSpan)\n\n            buildTraceContext = rest.buildTraceContext\n\n            telemetry.record(\n              eventBuildCompleted(pagesPaths, {\n                durationInSeconds: compilerDuration,\n                totalAppPagesCount,\n              })\n            )\n          }\n        }\n      }\n\n      // For app directory, we run type checking after build.\n      if (appDir && !isCompileMode && !isGenerateMode) {\n        await updateBuildDiagnostics({\n          buildStage: 'type-checking',\n        })\n        await startTypeChecking(typeCheckingOptions)\n        traceMemoryUsage('Finished type checking', nextBuildSpan)\n      }\n\n      const postCompileSpinner = createSpinner('Collecting page data')\n\n      if (isFullFlyingShuttle) {\n        // we need to copy the chunks from the shuttle folder\n        // to the distDir (we copy all server split chunks currently)\n        // this has to come before we require any page chunks as webpack\n        // cache could reference previous runtimes/chunks\n        if (await fileExists(path.join(shuttleDir, 'server'))) {\n          await recursiveCopy(\n            path.join(shuttleDir, 'server'),\n            path.join(distDir, 'server'),\n            {\n              filter(item) {\n                // we copy page chunks separately to not copy stale entries\n                return (\n                  !item.startsWith('/middleware.js') &&\n                  !item.match(/^[/\\\\](pages|app)[/\\\\]/)\n                )\n              },\n              overwrite: false,\n            }\n          )\n        }\n      }\n\n      const buildManifestPath = path.join(distDir, BUILD_MANIFEST)\n      const appBuildManifestPath = path.join(distDir, APP_BUILD_MANIFEST)\n\n      let staticAppPagesCount = 0\n      let serverAppPagesCount = 0\n      let edgeRuntimeAppCount = 0\n      let edgeRuntimePagesCount = 0\n      const ssgPages = new Set<string>()\n      const ssgStaticFallbackPages = new Set<string>()\n      const ssgBlockingFallbackPages = new Set<string>()\n      const staticPages = new Set<string>()\n      const invalidPages = new Set<string>()\n      const hybridAmpPages = new Set<string>()\n      const serverPropsPages = new Set<string>()\n      const additionalPaths = new Map<string, PrerenderedRoute[]>()\n      const staticPaths = new Map<string, PrerenderedRoute[]>()\n      const prospectiveRenders = new Map<\n        string,\n        { page: string; originalAppPath: string }\n      >()\n      const appNormalizedPaths = new Map<string, string>()\n      const fallbackModes = new Map<string, FallbackMode>()\n      const appDefaultConfigs = new Map<string, AppSegmentConfig>()\n      const pageInfos: PageInfos = new Map<string, PageInfo>()\n      let pagesManifest = await readManifest<PagesManifest>(pagesManifestPath)\n      const buildManifest = await readManifest<BuildManifest>(buildManifestPath)\n      const appBuildManifest = appDir\n        ? await readManifest<AppBuildManifest>(appBuildManifestPath)\n        : undefined\n\n      const appPathRoutes: Record<string, string> = {}\n\n      if (appDir) {\n        const appPathsManifest = await readManifest<Record<string, string>>(\n          path.join(distDir, SERVER_DIRECTORY, APP_PATHS_MANIFEST)\n        )\n\n        for (const key in appPathsManifest) {\n          appPathRoutes[key] = normalizeAppPath(key)\n        }\n\n        await writeManifest(\n          path.join(distDir, APP_PATH_ROUTES_MANIFEST),\n          appPathRoutes\n        )\n      }\n\n      process.env.NEXT_PHASE = PHASE_PRODUCTION_BUILD\n\n      const worker = createStaticWorker(config)\n\n      const analysisBegin = process.hrtime()\n      const staticCheckSpan = nextBuildSpan.traceChild('static-check')\n\n      const functionsConfigManifest: FunctionsConfigManifest = {\n        version: 1,\n        functions: {},\n      }\n\n      const {\n        customAppGetInitialProps,\n        namedExports,\n        isNextImageImported,\n        hasSsrAmpPages,\n        hasNonStaticErrorPage,\n      } = await staticCheckSpan.traceAsyncFn(async () => {\n        if (isCompileMode) {\n          return {\n            customAppGetInitialProps: false,\n            namedExports: [],\n            isNextImageImported: true,\n            hasSsrAmpPages: !!pagesDir,\n            hasNonStaticErrorPage: true,\n          }\n        }\n\n        const { configFileName, publicRuntimeConfig, serverRuntimeConfig } =\n          config\n        const runtimeEnvConfig = { publicRuntimeConfig, serverRuntimeConfig }\n\n        const nonStaticErrorPageSpan = staticCheckSpan.traceChild(\n          'check-static-error-page'\n        )\n        const errorPageHasCustomGetInitialProps =\n          nonStaticErrorPageSpan.traceAsyncFn(\n            async () =>\n              hasCustomErrorPage &&\n              (await worker.hasCustomGetInitialProps({\n                page: '/_error',\n                distDir,\n                runtimeEnvConfig,\n                checkingApp: false,\n              }))\n          )\n\n        const errorPageStaticResult = nonStaticErrorPageSpan.traceAsyncFn(\n          async () =>\n            hasCustomErrorPage &&\n            worker.isPageStatic({\n              dir,\n              page: '/_error',\n              distDir,\n              configFileName,\n              runtimeEnvConfig,\n              dynamicIO: isAppDynamicIOEnabled,\n              httpAgentOptions: config.httpAgentOptions,\n              locales: config.i18n?.locales,\n              defaultLocale: config.i18n?.defaultLocale,\n              nextConfigOutput: config.output,\n              pprConfig: config.experimental.ppr,\n              cacheLifeProfiles: config.experimental.cacheLife,\n              buildId,\n            })\n        )\n\n        const appPageToCheck = '/_app'\n\n        const customAppGetInitialPropsPromise = worker.hasCustomGetInitialProps(\n          {\n            page: appPageToCheck,\n            distDir,\n            runtimeEnvConfig,\n            checkingApp: true,\n          }\n        )\n\n        const namedExportsPromise = worker.getDefinedNamedExports({\n          page: appPageToCheck,\n          distDir,\n          runtimeEnvConfig,\n        })\n\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        let isNextImageImported: boolean | undefined\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        let hasSsrAmpPages = false\n\n        const computedManifestData = await computeFromManifest(\n          { build: buildManifest, app: appBuildManifest },\n          distDir,\n          config.experimental.gzipSize\n        )\n\n        const middlewareManifest: MiddlewareManifest = require(\n          path.join(distDir, SERVER_DIRECTORY, MIDDLEWARE_MANIFEST)\n        )\n\n        const actionManifest = appDir\n          ? (require(\n              path.join(\n                distDir,\n                SERVER_DIRECTORY,\n                SERVER_REFERENCE_MANIFEST + '.json'\n              )\n            ) as ActionManifest)\n          : null\n        const entriesWithAction = actionManifest ? new Set() : null\n        if (actionManifest && entriesWithAction) {\n          for (const id in actionManifest.node) {\n            for (const entry in actionManifest.node[id].workers) {\n              entriesWithAction.add(entry)\n            }\n          }\n          for (const id in actionManifest.edge) {\n            for (const entry in actionManifest.edge[id].workers) {\n              entriesWithAction.add(entry)\n            }\n          }\n        }\n\n        for (const key of Object.keys(middlewareManifest?.functions)) {\n          if (key.startsWith('/api')) {\n            edgeRuntimePagesCount++\n          }\n        }\n\n        await Promise.all(\n          Object.entries(pageKeys)\n            .reduce<Array<{ pageType: keyof typeof pageKeys; page: string }>>(\n              (acc, [key, files]) => {\n                if (!files) {\n                  return acc\n                }\n\n                const pageType = key as keyof typeof pageKeys\n\n                for (const page of files) {\n                  acc.push({ pageType, page })\n                }\n\n                return acc\n              },\n              []\n            )\n            .map(({ pageType, page }) => {\n              const checkPageSpan = staticCheckSpan.traceChild('check-page', {\n                page,\n              })\n              return checkPageSpan.traceAsyncFn(async () => {\n                const actualPage = normalizePagePath(page)\n                const [size, totalSize] = await getJsPageSizeInKb(\n                  pageType,\n                  actualPage,\n                  distDir,\n                  buildManifest,\n                  appBuildManifest,\n                  config.experimental.gzipSize,\n                  computedManifestData\n                )\n\n                let isRoutePPREnabled = false\n                let isSSG = false\n                let isStatic = false\n                let isServerComponent = false\n                let isHybridAmp = false\n                let ssgPageRoutes: string[] | null = null\n                let pagePath = ''\n\n                if (pageType === 'pages') {\n                  pagePath =\n                    pagesPaths.find((p) => {\n                      p = normalizePathSep(p)\n                      return (\n                        p.startsWith(actualPage + '.') ||\n                        p.startsWith(actualPage + '/index.')\n                      )\n                    }) || ''\n                }\n                let originalAppPath: string | undefined\n\n                if (pageType === 'app' && mappedAppPages) {\n                  for (const [originalPath, normalizedPath] of Object.entries(\n                    appPathRoutes\n                  )) {\n                    if (normalizedPath === page) {\n                      pagePath = mappedAppPages[originalPath].replace(\n                        /^private-next-app-dir/,\n                        ''\n                      )\n                      originalAppPath = originalPath\n                      break\n                    }\n                  }\n                }\n\n                const pageFilePath = isAppBuiltinNotFoundPage(pagePath)\n                  ? require.resolve(\n                      'next/dist/client/components/not-found-error'\n                    )\n                  : path.join(\n                      (pageType === 'pages' ? pagesDir : appDir) || '',\n                      pagePath\n                    )\n\n                const isInsideAppDir = pageType === 'app'\n                const staticInfo = pagePath\n                  ? await getStaticInfoIncludingLayouts({\n                      isInsideAppDir,\n                      pageFilePath,\n                      pageExtensions: config.pageExtensions,\n                      appDir,\n                      config,\n                      isDev: false,\n                      // If this route is an App Router page route, inherit the\n                      // route segment configs (e.g. `runtime`) from the layout by\n                      // passing the `originalAppPath`, which should end with `/page`.\n                      page: isInsideAppDir ? originalAppPath! : page,\n                    })\n                  : undefined\n\n                // If there's any thing that would contribute to the functions\n                // configuration, we need to add it to the manifest.\n                if (\n                  typeof staticInfo?.runtime !== 'undefined' ||\n                  typeof staticInfo?.maxDuration !== 'undefined'\n                ) {\n                  functionsConfigManifest.functions[page] = {\n                    maxDuration: staticInfo?.maxDuration,\n                  }\n                }\n\n                const pageRuntime = middlewareManifest.functions[\n                  originalAppPath || page\n                ]\n                  ? 'edge'\n                  : staticInfo?.runtime\n\n                if (!isCompileMode) {\n                  isServerComponent =\n                    pageType === 'app' &&\n                    staticInfo?.rsc !== RSC_MODULE_TYPES.client\n\n                  if (pageType === 'app' || !isReservedPage(page)) {\n                    try {\n                      let edgeInfo: any\n\n                      if (isEdgeRuntime(pageRuntime)) {\n                        if (pageType === 'app') {\n                          edgeRuntimeAppCount++\n                        } else {\n                          edgeRuntimePagesCount++\n                        }\n\n                        const manifestKey =\n                          pageType === 'pages' ? page : originalAppPath || ''\n\n                        edgeInfo = middlewareManifest.functions[manifestKey]\n                      }\n\n                      let isPageStaticSpan =\n                        checkPageSpan.traceChild('is-page-static')\n                      let workerResult = await isPageStaticSpan.traceAsyncFn(\n                        () => {\n                          return worker.isPageStatic({\n                            dir,\n                            page,\n                            originalAppPath,\n                            distDir,\n                            configFileName,\n                            runtimeEnvConfig,\n                            httpAgentOptions: config.httpAgentOptions,\n                            locales: config.i18n?.locales,\n                            defaultLocale: config.i18n?.defaultLocale,\n                            parentId: isPageStaticSpan.getId(),\n                            pageRuntime,\n                            edgeInfo,\n                            pageType,\n                            dynamicIO: isAppDynamicIOEnabled,\n                            cacheHandler: config.cacheHandler,\n                            cacheHandlers: config.experimental.cacheHandlers,\n                            isrFlushToDisk: ciEnvironment.hasNextSupport\n                              ? false\n                              : config.experimental.isrFlushToDisk,\n                            maxMemoryCacheSize: config.cacheMaxMemorySize,\n                            nextConfigOutput: config.output,\n                            pprConfig: config.experimental.ppr,\n                            cacheLifeProfiles: config.experimental.cacheLife,\n                            buildId,\n                          })\n                        }\n                      )\n\n                      if (pageType === 'app' && originalAppPath) {\n                        appNormalizedPaths.set(originalAppPath, page)\n                        // TODO-APP: handle prerendering with edge\n                        if (isEdgeRuntime(pageRuntime)) {\n                          isStatic = false\n                          isSSG = false\n\n                          Log.warnOnce(\n                            `Using edge runtime on a page currently disables static generation for that page`\n                          )\n                        } else {\n                          const isDynamic = isDynamicRoute(page)\n\n                          // If this route can be partially pre-rendered, then\n                          // mark it as such and mark that it can be\n                          // generated server-side.\n                          if (workerResult.isRoutePPREnabled) {\n                            isRoutePPREnabled = workerResult.isRoutePPREnabled\n                            isSSG = true\n                            isStatic = true\n\n                            staticPaths.set(originalAppPath, [])\n                          }\n                          // As PPR isn't enabled for this route, if dynamic IO\n                          // is enabled, and this is a dynamic route, we should\n                          // complete a prospective render for the route so that\n                          // we can use the fallback behavior. This lets us\n                          // check that dynamic pages won't error when they\n                          // enable PPR.\n                          else if (config.experimental.dynamicIO && isDynamic) {\n                            prospectiveRenders.set(originalAppPath, {\n                              page,\n                              originalAppPath,\n                            })\n                          }\n\n                          if (\n                            workerResult.prerenderedRoutes &&\n                            workerResult.prerenderedRoutes.length > 0\n                          ) {\n                            staticPaths.set(\n                              originalAppPath,\n                              workerResult.prerenderedRoutes\n                            )\n                            ssgPageRoutes = workerResult.prerenderedRoutes.map(\n                              (route) => route.path\n                            )\n                            isSSG = true\n                          }\n\n                          const appConfig = workerResult.appConfig || {}\n                          if (appConfig.revalidate !== 0) {\n                            const hasGenerateStaticParams =\n                              workerResult.prerenderedRoutes &&\n                              workerResult.prerenderedRoutes.length > 0\n\n                            if (\n                              config.output === 'export' &&\n                              isDynamic &&\n                              !hasGenerateStaticParams\n                            ) {\n                              throw new Error(\n                                `Page \"${page}\" is missing \"generateStaticParams()\" so it cannot be used with \"output: export\" config.`\n                              )\n                            }\n\n                            // Mark the app as static if:\n                            // - It has no dynamic param\n                            // - It doesn't have generateStaticParams but `dynamic` is set to\n                            //   `error` or `force-static`\n                            if (!isDynamic) {\n                              staticPaths.set(originalAppPath, [\n                                {\n                                  path: page,\n                                  encoded: page,\n                                  fallbackRouteParams: undefined,\n                                },\n                              ])\n                              isStatic = true\n                            } else if (\n                              !hasGenerateStaticParams &&\n                              (appConfig.dynamic === 'error' ||\n                                appConfig.dynamic === 'force-static')\n                            ) {\n                              staticPaths.set(originalAppPath, [])\n                              isStatic = true\n                              isRoutePPREnabled = false\n                            }\n                          }\n\n                          if (workerResult.prerenderFallbackMode) {\n                            fallbackModes.set(\n                              originalAppPath,\n                              workerResult.prerenderFallbackMode\n                            )\n                          }\n\n                          appDefaultConfigs.set(originalAppPath, appConfig)\n                        }\n                      } else {\n                        if (isEdgeRuntime(pageRuntime)) {\n                          if (workerResult.hasStaticProps) {\n                            console.warn(\n                              `\"getStaticProps\" is not yet supported fully with \"experimental-edge\", detected on ${page}`\n                            )\n                          }\n                          // TODO: add handling for statically rendering edge\n                          // pages and allow edge with Prerender outputs\n                          workerResult.isStatic = false\n                          workerResult.hasStaticProps = false\n                        }\n\n                        if (\n                          workerResult.isStatic === false &&\n                          (workerResult.isHybridAmp || workerResult.isAmpOnly)\n                        ) {\n                          hasSsrAmpPages = true\n                        }\n\n                        if (workerResult.isHybridAmp) {\n                          isHybridAmp = true\n                          hybridAmpPages.add(page)\n                        }\n\n                        if (workerResult.isNextImageImported) {\n                          isNextImageImported = true\n                        }\n\n                        if (workerResult.hasStaticProps) {\n                          ssgPages.add(page)\n                          isSSG = true\n\n                          if (\n                            workerResult.prerenderedRoutes &&\n                            workerResult.prerenderedRoutes.length > 0\n                          ) {\n                            additionalPaths.set(\n                              page,\n                              workerResult.prerenderedRoutes\n                            )\n                            ssgPageRoutes = workerResult.prerenderedRoutes.map(\n                              (route) => route.path\n                            )\n                          }\n\n                          if (\n                            workerResult.prerenderFallbackMode ===\n                            FallbackMode.BLOCKING_STATIC_RENDER\n                          ) {\n                            ssgBlockingFallbackPages.add(page)\n                          } else if (\n                            workerResult.prerenderFallbackMode ===\n                            FallbackMode.PRERENDER\n                          ) {\n                            ssgStaticFallbackPages.add(page)\n                          }\n                        } else if (workerResult.hasServerProps) {\n                          serverPropsPages.add(page)\n                        } else if (\n                          workerResult.isStatic &&\n                          !isServerComponent &&\n                          (await customAppGetInitialPropsPromise) === false\n                        ) {\n                          staticPages.add(page)\n                          isStatic = true\n                        } else if (isServerComponent) {\n                          // This is a static server component page that doesn't have\n                          // gSP or gSSP. We still treat it as a SSG page.\n                          ssgPages.add(page)\n                          isSSG = true\n                        }\n\n                        if (hasPages404 && page === '/404') {\n                          if (\n                            !workerResult.isStatic &&\n                            !workerResult.hasStaticProps\n                          ) {\n                            throw new Error(\n                              `\\`pages/404\\` ${STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`\n                            )\n                          }\n                          // we need to ensure the 404 lambda is present since we use\n                          // it when _app has getInitialProps\n                          if (\n                            (await customAppGetInitialPropsPromise) &&\n                            !workerResult.hasStaticProps\n                          ) {\n                            staticPages.delete(page)\n                          }\n                        }\n\n                        if (\n                          STATIC_STATUS_PAGES.includes(page) &&\n                          !workerResult.isStatic &&\n                          !workerResult.hasStaticProps\n                        ) {\n                          throw new Error(\n                            `\\`pages${page}\\` ${STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`\n                          )\n                        }\n                      }\n                    } catch (err) {\n                      if (\n                        !isError(err) ||\n                        err.message !== 'INVALID_DEFAULT_EXPORT'\n                      )\n                        throw err\n                      invalidPages.add(page)\n                    }\n                  }\n\n                  if (pageType === 'app') {\n                    if (isSSG || isStatic) {\n                      staticAppPagesCount++\n                    } else {\n                      serverAppPagesCount++\n                    }\n                  }\n                }\n\n                pageInfos.set(page, {\n                  size,\n                  totalSize,\n                  isStatic,\n                  isSSG,\n                  isRoutePPREnabled,\n                  isHybridAmp,\n                  ssgPageRoutes,\n                  initialRevalidateSeconds: false,\n                  runtime: pageRuntime,\n                  pageDuration: undefined,\n                  ssgPageDurations: undefined,\n                  hasEmptyPrelude: undefined,\n                })\n              })\n            })\n        )\n\n        if (hadUnsupportedValue) {\n          Log.error(\n            `Invalid config value exports detected, these can cause unexpected behavior from the configs not being applied. Please fix them to continue`\n          )\n          process.exit(1)\n        }\n\n        const errorPageResult = await errorPageStaticResult\n        const nonStaticErrorPage =\n          (await errorPageHasCustomGetInitialProps) ||\n          (errorPageResult && errorPageResult.hasServerProps)\n\n        const returnValue = {\n          customAppGetInitialProps: await customAppGetInitialPropsPromise,\n          namedExports: await namedExportsPromise,\n          isNextImageImported,\n          hasSsrAmpPages,\n          hasNonStaticErrorPage: nonStaticErrorPage,\n        }\n\n        return returnValue\n      })\n\n      if (postCompileSpinner) postCompileSpinner.stopAndPersist()\n      traceMemoryUsage('Finished collecting page data', nextBuildSpan)\n\n      if (customAppGetInitialProps) {\n        console.warn(\n          bold(yellow(`Warning: `)) +\n            yellow(\n              `You have opted-out of Automatic Static Optimization due to \\`getInitialProps\\` in \\`pages/_app\\`. This does not opt-out pages with \\`getStaticProps\\``\n            )\n        )\n        console.warn(\n          'Read more: https://nextjs.org/docs/messages/opt-out-auto-static-optimization\\n'\n        )\n      }\n\n      const { cacheHandler } = config\n\n      const instrumentationHookEntryFiles: string[] = []\n      if (hasInstrumentationHook) {\n        instrumentationHookEntryFiles.push(\n          path.join(SERVER_DIRECTORY, `${INSTRUMENTATION_HOOK_FILENAME}.js`)\n        )\n        // If there's edge routes, append the edge instrumentation hook\n        if (edgeRuntimeAppCount || edgeRuntimePagesCount) {\n          instrumentationHookEntryFiles.push(\n            path.join(\n              SERVER_DIRECTORY,\n              `edge-${INSTRUMENTATION_HOOK_FILENAME}.js`\n            )\n          )\n        }\n      }\n\n      const requiredServerFilesManifest = nextBuildSpan\n        .traceChild('generate-required-server-files')\n        .traceFn(() => {\n          const normalizedCacheHandlers: Record<string, string> = {}\n\n          for (const [key, value] of Object.entries(\n            config.experimental.cacheHandlers || {}\n          )) {\n            if (key && value) {\n              normalizedCacheHandlers[key] = path.relative(distDir, value)\n            }\n          }\n\n          const serverFilesManifest: RequiredServerFilesManifest = {\n            version: 1,\n            config: {\n              ...config,\n              configFile: undefined,\n              ...(ciEnvironment.hasNextSupport\n                ? {\n                    compress: false,\n                  }\n                : {}),\n              cacheHandler: cacheHandler\n                ? path.relative(distDir, cacheHandler)\n                : config.cacheHandler,\n              experimental: {\n                ...config.experimental,\n                cacheHandlers: normalizedCacheHandlers,\n                trustHostHeader: ciEnvironment.hasNextSupport,\n\n                // @ts-expect-error internal field TODO: fix this, should use a separate mechanism to pass the info.\n                isExperimentalCompile: isCompileMode,\n              },\n            },\n            appDir: dir,\n            relativeAppDir: path.relative(outputFileTracingRoot, dir),\n            files: [\n              ROUTES_MANIFEST,\n              path.relative(distDir, pagesManifestPath),\n              BUILD_MANIFEST,\n              PRERENDER_MANIFEST,\n              path.join(SERVER_DIRECTORY, MIDDLEWARE_MANIFEST),\n              path.join(SERVER_DIRECTORY, MIDDLEWARE_BUILD_MANIFEST + '.js'),\n              path.join(\n                SERVER_DIRECTORY,\n                MIDDLEWARE_REACT_LOADABLE_MANIFEST + '.js'\n              ),\n              ...(appDir\n                ? [\n                    ...(config.experimental.sri\n                      ? [\n                          path.join(\n                            SERVER_DIRECTORY,\n                            SUBRESOURCE_INTEGRITY_MANIFEST + '.js'\n                          ),\n                          path.join(\n                            SERVER_DIRECTORY,\n                            SUBRESOURCE_INTEGRITY_MANIFEST + '.json'\n                          ),\n                        ]\n                      : []),\n                    path.join(SERVER_DIRECTORY, APP_PATHS_MANIFEST),\n                    path.join(APP_PATH_ROUTES_MANIFEST),\n                    APP_BUILD_MANIFEST,\n                    path.join(\n                      SERVER_DIRECTORY,\n                      SERVER_REFERENCE_MANIFEST + '.js'\n                    ),\n                    path.join(\n                      SERVER_DIRECTORY,\n                      SERVER_REFERENCE_MANIFEST + '.json'\n                    ),\n                  ]\n                : []),\n              REACT_LOADABLE_MANIFEST,\n              BUILD_ID_FILE,\n              path.join(SERVER_DIRECTORY, NEXT_FONT_MANIFEST + '.js'),\n              path.join(SERVER_DIRECTORY, NEXT_FONT_MANIFEST + '.json'),\n              ...instrumentationHookEntryFiles,\n            ]\n              .filter(nonNullable)\n              .map((file) => path.join(config.distDir, file)),\n            ignore: [] as string[],\n          }\n\n          return serverFilesManifest\n        })\n\n      if (!hasSsrAmpPages) {\n        requiredServerFilesManifest.ignore.push(\n          path.relative(\n            dir,\n            path.join(\n              path.dirname(\n                require.resolve(\n                  'next/dist/compiled/@ampproject/toolbox-optimizer'\n                )\n              ),\n              '**/*'\n            )\n          )\n        )\n      }\n\n      await writeFunctionsConfigManifest(distDir, functionsConfigManifest)\n\n      if (!isGenerateMode && !buildTracesPromise) {\n        buildTracesPromise = collectBuildTraces({\n          dir,\n          config,\n          distDir,\n          edgeRuntimeRoutes: collectRoutesUsingEdgeRuntime(pageInfos),\n          staticPages: [...staticPages],\n          nextBuildSpan,\n          hasSsrAmpPages,\n          buildTraceContext,\n          outputFileTracingRoot,\n          isFlyingShuttle: Boolean(flyingShuttle),\n        }).catch((err) => {\n          console.error(err)\n          process.exit(1)\n        })\n      }\n\n      if (serverPropsPages.size > 0 || ssgPages.size > 0) {\n        // We update the routes manifest after the build with the\n        // data routes since we can't determine these until after build\n        routesManifest.dataRoutes = getSortedRoutes([\n          ...serverPropsPages,\n          ...ssgPages,\n        ]).map((page) => {\n          return buildDataRoute(page, buildId)\n        })\n\n        // await writeManifest(routesManifestPath, routesManifest)\n      }\n\n      // We need to write the manifest with rewrites before build\n      await nextBuildSpan\n        .traceChild('write-routes-manifest')\n        .traceAsyncFn(() => writeManifest(routesManifestPath, routesManifest))\n\n      // Since custom _app.js can wrap the 404 page we have to opt-out of static optimization if it has getInitialProps\n      // Only export the static 404 when there is no /_error present\n      const useStaticPages404 =\n        !customAppGetInitialProps && (!hasNonStaticErrorPage || hasPages404)\n\n      if (invalidPages.size > 0) {\n        const err = new Error(\n          `Build optimization failed: found page${\n            invalidPages.size === 1 ? '' : 's'\n          } without a React Component as default export in \\n${[...invalidPages]\n            .map((pg) => `pages${pg}`)\n            .join(\n              '\\n'\n            )}\\n\\nSee https://nextjs.org/docs/messages/page-without-valid-component for more info.\\n`\n        ) as NextError\n        err.code = 'BUILD_OPTIMIZATION_FAILED'\n        throw err\n      }\n\n      await writeBuildId(distDir, buildId)\n\n      if (config.experimental.optimizeCss) {\n        const globOrig =\n          require('next/dist/compiled/glob') as typeof import('next/dist/compiled/glob')\n\n        const cssFilePaths = await new Promise<string[]>((resolve, reject) => {\n          globOrig(\n            '**/*.css',\n            { cwd: path.join(distDir, 'static') },\n            (err, files) => {\n              if (err) {\n                return reject(err)\n              }\n              resolve(files)\n            }\n          )\n        })\n\n        requiredServerFilesManifest.files.push(\n          ...cssFilePaths.map((filePath) =>\n            path.join(config.distDir, 'static', filePath)\n          )\n        )\n      }\n\n      const features: EventBuildFeatureUsage[] = [\n        {\n          featureName: 'experimental/optimizeCss',\n          invocationCount: config.experimental.optimizeCss ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/nextScriptWorkers',\n          invocationCount: config.experimental.nextScriptWorkers ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/ppr',\n          invocationCount: config.experimental.ppr ? 1 : 0,\n        },\n      ]\n      telemetry.record(\n        features.map((feature) => {\n          return {\n            eventName: EVENT_BUILD_FEATURE_USAGE,\n            payload: feature,\n          }\n        })\n      )\n\n      await writeRequiredServerFilesManifest(\n        distDir,\n        requiredServerFilesManifest\n      )\n\n      const middlewareManifest: MiddlewareManifest = await readManifest(\n        path.join(distDir, SERVER_DIRECTORY, MIDDLEWARE_MANIFEST)\n      )\n\n      if (!isGenerateMode) {\n        if (flyingShuttle) {\n          await buildTracesPromise\n\n          if (isStoreOnlyFlyingShuttle) {\n            console.log('skipping stitching builds due to store-only mode')\n          } else {\n            console.log('stitching builds...')\n            await nextBuildSpan\n              .traceChild('stitch-incremental-builds')\n              .traceAsyncFn(async () => {\n                const stitchResult = await stitchBuilds(\n                  {\n                    config,\n                    buildId,\n                    distDir,\n                    shuttleDir,\n                    rewrites,\n                    redirects,\n                    edgePreviewProps: {\n                      __NEXT_PREVIEW_MODE_ID:\n                        NextBuildContext.previewProps!.previewModeId,\n                      __NEXT_PREVIEW_MODE_ENCRYPTION_KEY:\n                        NextBuildContext.previewProps!.previewModeEncryptionKey,\n                      __NEXT_PREVIEW_MODE_SIGNING_KEY:\n                        NextBuildContext.previewProps!.previewModeSigningKey,\n                    },\n                    encryptionKey,\n                    allowedErrorRate:\n                      config.experimental.clientRouterFilterAllowedRate,\n                  },\n                  {\n                    changed: {\n                      pages: changedPagePathsResult?.changed.pages || [],\n                      app: changedAppPathsResult?.changed.app || [],\n                    },\n                    unchanged: {\n                      pages: changedPagePathsResult?.unchanged.pages || [],\n                      app: changedAppPathsResult?.unchanged.app || [],\n                    },\n                    pageExtensions: config.pageExtensions,\n                  }\n                )\n                // reload pagesManifest since it's been updated on disk\n                if (stitchResult.pagesManifest) {\n                  pagesManifest = stitchResult.pagesManifest\n                }\n              })\n          }\n\n          console.log('storing shuttle')\n          await nextBuildSpan\n            .traceChild('store-cache-shuttle')\n            .traceAsyncFn(async () => {\n              await storeShuttle({\n                config,\n                distDir,\n                shuttleDir,\n              })\n            })\n\n          console.log('inlining static env')\n          await nextBuildSpan\n            .traceChild('inline-static-env')\n            .traceAsyncFn(async () => {\n              await inlineStaticEnv({ config, distDir })\n            })\n        }\n      }\n\n      const prerenderManifest: PrerenderManifest = {\n        version: 4,\n        routes: {},\n        dynamicRoutes: {},\n        notFoundRoutes: [],\n        preview: previewProps,\n      }\n\n      const tbdPrerenderRoutes: string[] = []\n\n      const { i18n } = config\n\n      const usedStaticStatusPages = STATIC_STATUS_PAGES.filter(\n        (page) =>\n          mappedPages[page] &&\n          mappedPages[page].startsWith('private-next-pages')\n      )\n      usedStaticStatusPages.forEach((page) => {\n        if (!ssgPages.has(page) && !customAppGetInitialProps) {\n          staticPages.add(page)\n        }\n      })\n\n      const hasPages500 = usedStaticStatusPages.includes('/500')\n      const useDefaultStatic500 =\n        !hasPages500 && !hasNonStaticErrorPage && !customAppGetInitialProps\n\n      const combinedPages = [...staticPages, ...ssgPages]\n      const isApp404Static = staticPaths.has(UNDERSCORE_NOT_FOUND_ROUTE_ENTRY)\n      const hasStaticApp404 = hasApp404 && isApp404Static\n\n      await updateBuildDiagnostics({\n        buildStage: 'static-generation',\n      })\n\n      // we need to trigger automatic exporting when we have\n      // - static 404/500\n      // - getStaticProps paths\n      // - experimental app is enabled\n      if (\n        !isCompileMode &&\n        (combinedPages.length > 0 ||\n          useStaticPages404 ||\n          useDefaultStatic500 ||\n          appDir)\n      ) {\n        const staticGenerationSpan =\n          nextBuildSpan.traceChild('static-generation')\n        await staticGenerationSpan.traceAsyncFn(async () => {\n          detectConflictingPaths(\n            [\n              ...combinedPages,\n              ...pageKeys.pages.filter((page) => !combinedPages.includes(page)),\n            ],\n            ssgPages,\n            new Map(\n              Array.from(additionalPaths.entries()).map(\n                ([page, routes]): [string, string[]] => {\n                  return [page, routes.map((route) => route.path)]\n                }\n              )\n            )\n          )\n          const exportApp = require('../export')\n            .default as typeof import('../export').default\n\n          const exportConfig: NextConfigComplete = {\n            ...config,\n            // Default map will be the collection of automatic statically exported\n            // pages and incremental pages.\n            // n.b. we cannot handle this above in combinedPages because the dynamic\n            // page must be in the `pages` array, but not in the mapping.\n            exportPathMap: (defaultMap: ExportPathMap) => {\n              // Dynamically routed pages should be prerendered to be used as\n              // a client-side skeleton (fallback) while data is being fetched.\n              // This ensures the end-user never sees a 500 or slow response from the\n              // server.\n              //\n              // Note: prerendering disables automatic static optimization.\n              ssgPages.forEach((page) => {\n                if (isDynamicRoute(page)) {\n                  tbdPrerenderRoutes.push(page)\n\n                  if (ssgStaticFallbackPages.has(page)) {\n                    // Override the rendering for the dynamic page to be treated as a\n                    // fallback render.\n                    if (i18n) {\n                      defaultMap[`/${i18n.defaultLocale}${page}`] = {\n                        page,\n                        query: { __nextFallback: 'true' },\n                      }\n                    } else {\n                      defaultMap[page] = {\n                        page,\n                        query: { __nextFallback: 'true' },\n                      }\n                    }\n                  } else {\n                    // Remove dynamically routed pages from the default path map when\n                    // fallback behavior is disabled.\n                    delete defaultMap[page]\n                  }\n                }\n              })\n\n              // Append the \"well-known\" routes we should prerender for, e.g. blog\n              // post slugs.\n              additionalPaths.forEach((routes, page) => {\n                routes.forEach((route) => {\n                  defaultMap[route.path] = {\n                    page,\n                    query: { __nextSsgPath: route.encoded },\n                  }\n                })\n              })\n\n              if (useStaticPages404) {\n                defaultMap['/404'] = {\n                  page: hasPages404 ? '/404' : '/_error',\n                }\n              }\n\n              if (useDefaultStatic500) {\n                defaultMap['/500'] = {\n                  page: '/_error',\n                }\n              }\n\n              // TODO: output manifest specific to app paths and their\n              // revalidate periods and dynamicParams settings\n              staticPaths.forEach((routes, originalAppPath) => {\n                const appConfig = appDefaultConfigs.get(originalAppPath)\n                const isDynamicError = appConfig?.dynamic === 'error'\n\n                const isRoutePPREnabled = appConfig\n                  ? checkIsRoutePPREnabled(config.experimental.ppr, appConfig)\n                  : undefined\n\n                routes.forEach((route) => {\n                  defaultMap[route.path] = {\n                    page: originalAppPath,\n                    query: { __nextSsgPath: route.encoded },\n                    _fallbackRouteParams: route.fallbackRouteParams,\n                    _isDynamicError: isDynamicError,\n                    _isAppDir: true,\n                    _isRoutePPREnabled: isRoutePPREnabled,\n                  }\n                })\n              })\n\n              // If the app does have dynamic IO enabled but does not have PPR\n              // enabled, then we need to perform a prospective render for all\n              // the dynamic pages to ensure that they won't error during\n              // rendering (due to a missing prelude).\n              for (const {\n                page,\n                originalAppPath,\n              } of prospectiveRenders.values()) {\n                defaultMap[page] = {\n                  page: originalAppPath,\n                  query: { __nextSsgPath: page },\n                  _fallbackRouteParams: getParamKeys(page),\n                  // Prospective renders are only enabled for app pages.\n                  _isAppDir: true,\n                  // Prospective renders are only enabled when PPR is disabled.\n                  _isRoutePPREnabled: false,\n                  _isProspectiveRender: true,\n                  // Dynamic IO does not currently support `dynamic === 'error'`.\n                  _isDynamicError: false,\n                }\n              }\n\n              if (i18n) {\n                for (const page of [\n                  ...staticPages,\n                  ...ssgPages,\n                  ...(useStaticPages404 ? ['/404'] : []),\n                  ...(useDefaultStatic500 ? ['/500'] : []),\n                ]) {\n                  const isSsg = ssgPages.has(page)\n                  const isDynamic = isDynamicRoute(page)\n                  const isFallback = isSsg && ssgStaticFallbackPages.has(page)\n\n                  for (const locale of i18n.locales) {\n                    // skip fallback generation for SSG pages without fallback mode\n                    if (isSsg && isDynamic && !isFallback) continue\n                    const outputPath = `/${locale}${page === '/' ? '' : page}`\n\n                    defaultMap[outputPath] = {\n                      page: defaultMap[page]?.page || page,\n                      query: {\n                        __nextLocale: locale,\n                        __nextFallback: isFallback ? 'true' : undefined,\n                      },\n                    }\n                  }\n\n                  if (isSsg) {\n                    // remove non-locale prefixed variant from defaultMap\n                    delete defaultMap[page]\n                  }\n                }\n              }\n\n              return defaultMap\n            },\n          }\n\n          const outdir = path.join(distDir, 'export')\n          const exportResult = await exportApp(\n            dir,\n            {\n              nextConfig: exportConfig,\n              enabledDirectories,\n              silent: true,\n              buildExport: true,\n              debugOutput,\n              pages: combinedPages,\n              outdir,\n              statusMessage: 'Generating static pages',\n              numWorkers: getNumberOfWorkers(exportConfig),\n            },\n            nextBuildSpan\n          )\n\n          // If there was no result, there's nothing more to do.\n          if (!exportResult) return\n\n          if (debugOutput || process.env.NEXT_SSG_FETCH_METRICS === '1') {\n            recordFetchMetrics(exportResult)\n          }\n\n          writeTurborepoAccessTraceResult({\n            distDir: config.distDir,\n            traces: [\n              turborepoAccessTraceResult,\n              ...exportResult.turborepoAccessTraceResults.values(),\n            ],\n          })\n\n          prerenderManifest.notFoundRoutes = Array.from(\n            exportResult.ssgNotFoundPaths\n          )\n\n          // remove server bundles that were exported\n          for (const page of staticPages) {\n            const serverBundle = getPagePath(page, distDir, undefined, false)\n            await fs.unlink(serverBundle)\n          }\n\n          staticPaths.forEach((prerenderedRoutes, originalAppPath) => {\n            const page = appNormalizedPaths.get(originalAppPath) || ''\n            const appConfig = appDefaultConfigs.get(originalAppPath) || {}\n\n            let hasRevalidateZero =\n              appConfig.revalidate === 0 ||\n              exportResult.byPath.get(page)?.revalidate === 0\n\n            if (hasRevalidateZero && pageInfos.get(page)?.isStatic) {\n              // if the page was marked as being static, but it contains dynamic data\n              // (ie, in the case of a static generation bailout), then it should be marked dynamic\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                isStatic: false,\n                isSSG: false,\n              })\n            }\n\n            const isAppRouteHandler = isAppRouteRoute(originalAppPath)\n\n            // When this is an app page and PPR is enabled, the route supports\n            // partial pre-rendering.\n            const isRoutePPREnabled: true | undefined =\n              !isAppRouteHandler &&\n              checkIsRoutePPREnabled(config.experimental.ppr, appConfig)\n                ? true\n                : undefined\n\n            // this flag is used to selectively bypass the static cache and invoke the lambda directly\n            // to enable server actions on static routes\n            const bypassFor: RouteHas[] = [\n              { type: 'header', key: ACTION_HEADER },\n              {\n                type: 'header',\n                key: 'content-type',\n                value: 'multipart/form-data;.*',\n              },\n            ]\n\n            // We should collect all the dynamic routes into a single array for\n            // this page. Including the full fallback route (the original\n            // route), any routes that were generated with unknown route params\n            // should be collected and included in the dynamic routes part\n            // of the manifest instead.\n            const routes: string[] = []\n            const dynamicRoutes: string[] = []\n\n            // Sort the outputted routes to ensure consistent output. Any route\n            // though that has unknown route params will be pulled and sorted\n            // independently. This is because the routes with unknown route\n            // params will contain the dynamic path parameters, some of which\n            // may conflict with the actual prerendered routes.\n            let unknownPrerenderRoutes: PrerenderedRoute[] = []\n            let knownPrerenderRoutes: PrerenderedRoute[] = []\n            for (const prerenderedRoute of prerenderedRoutes) {\n              if (\n                prerenderedRoute.fallbackRouteParams &&\n                prerenderedRoute.fallbackRouteParams.length > 0\n              ) {\n                unknownPrerenderRoutes.push(prerenderedRoute)\n              } else {\n                knownPrerenderRoutes.push(prerenderedRoute)\n              }\n            }\n\n            unknownPrerenderRoutes = getSortedRouteObjects(\n              unknownPrerenderRoutes,\n              (prerenderedRoute) => prerenderedRoute.path\n            )\n            knownPrerenderRoutes = getSortedRouteObjects(\n              knownPrerenderRoutes,\n              (prerenderedRoute) => prerenderedRoute.path\n            )\n\n            prerenderedRoutes = [\n              ...knownPrerenderRoutes,\n              ...unknownPrerenderRoutes,\n            ]\n\n            for (const prerenderedRoute of prerenderedRoutes) {\n              // TODO: check if still needed?\n              // Exclude the /_not-found route.\n              if (prerenderedRoute.path === UNDERSCORE_NOT_FOUND_ROUTE) {\n                continue\n              }\n\n              if (\n                isRoutePPREnabled &&\n                prerenderedRoute.fallbackRouteParams &&\n                prerenderedRoute.fallbackRouteParams.length > 0\n              ) {\n                // If the route has unknown params, then we need to add it to\n                // the list of dynamic routes.\n                dynamicRoutes.push(prerenderedRoute.path)\n              } else {\n                // If the route doesn't have unknown params, then we need to\n                // add it to the list of routes.\n                routes.push(prerenderedRoute.path)\n              }\n            }\n\n            // Handle all the static routes.\n            for (const route of routes) {\n              if (isDynamicRoute(page) && route === page) continue\n              if (route === UNDERSCORE_NOT_FOUND_ROUTE) continue\n\n              const {\n                revalidate = appConfig.revalidate ?? false,\n                metadata = {},\n                hasEmptyPrelude,\n                hasPostponed,\n              } = exportResult.byPath.get(route) ?? {}\n\n              pageInfos.set(route, {\n                ...(pageInfos.get(route) as PageInfo),\n                hasPostponed,\n                hasEmptyPrelude,\n              })\n\n              // update the page (eg /blog/[slug]) to also have the postpone metadata\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                hasPostponed,\n                hasEmptyPrelude,\n              })\n\n              if (revalidate !== 0) {\n                const normalizedRoute = normalizePagePath(route)\n\n                let dataRoute: string | null\n                if (isAppRouteHandler) {\n                  dataRoute = null\n                } else {\n                  dataRoute = path.posix.join(`${normalizedRoute}${RSC_SUFFIX}`)\n                }\n\n                let prefetchDataRoute: string | null | undefined\n                // While we may only write the `.rsc` when the route does not\n                // have PPR enabled, we still want to generate the route when\n                // deployed so it doesn't 404. If the app has PPR enabled, we\n                // should add this key.\n                if (!isAppRouteHandler && isAppPPREnabled) {\n                  prefetchDataRoute = path.posix.join(\n                    `${normalizedRoute}${RSC_PREFETCH_SUFFIX}`\n                  )\n                }\n\n                const meta = collectMeta(metadata)\n\n                prerenderManifest.routes[route] = {\n                  initialStatus: meta.status,\n                  initialHeaders: meta.headers,\n                  renderingMode: isAppPPREnabled\n                    ? isRoutePPREnabled\n                      ? RenderingMode.PARTIALLY_STATIC\n                      : RenderingMode.STATIC\n                    : undefined,\n                  experimentalPPR: isRoutePPREnabled,\n                  experimentalBypassFor: bypassFor,\n                  initialRevalidateSeconds: revalidate,\n                  srcRoute: page,\n                  dataRoute,\n                  prefetchDataRoute,\n                  allowHeader: ALLOWED_HEADERS,\n                }\n              } else {\n                hasRevalidateZero = true\n                // we might have determined during prerendering that this page\n                // used dynamic data\n                pageInfos.set(route, {\n                  ...(pageInfos.get(route) as PageInfo),\n                  isSSG: false,\n                  isStatic: false,\n                })\n              }\n            }\n\n            if (!hasRevalidateZero && isDynamicRoute(page)) {\n              // When PPR fallbacks aren't used, we need to include it here. If\n              // they are enabled, then it'll already be included in the\n              // prerendered routes.\n              if (!isRoutePPREnabled) {\n                dynamicRoutes.push(page)\n              }\n\n              for (const route of dynamicRoutes) {\n                const normalizedRoute = normalizePagePath(route)\n\n                const { metadata, revalidate } =\n                  exportResult.byPath.get(route) ?? {}\n\n                let dataRoute: string | null = null\n                if (!isAppRouteHandler) {\n                  dataRoute = path.posix.join(`${normalizedRoute}${RSC_SUFFIX}`)\n                }\n\n                let prefetchDataRoute: string | undefined\n                if (!isAppRouteHandler && isAppPPREnabled) {\n                  prefetchDataRoute = path.posix.join(\n                    `${normalizedRoute}${RSC_PREFETCH_SUFFIX}`\n                  )\n                }\n\n                pageInfos.set(route, {\n                  ...(pageInfos.get(route) as PageInfo),\n                  isDynamicAppRoute: true,\n                  // if PPR is turned on and the route contains a dynamic segment,\n                  // we assume it'll be partially prerendered\n                  hasPostponed: isRoutePPREnabled,\n                })\n\n                const fallbackMode =\n                  fallbackModes.get(originalAppPath) ?? FallbackMode.NOT_FOUND\n\n                // When we're configured to serve a prerender, we should use the\n                // fallback revalidate from the export result. If it can't be\n                // found, mark that we should keep the shell forever (`false`).\n                let fallbackRevalidate: Revalidate | undefined =\n                  isRoutePPREnabled && fallbackMode === FallbackMode.PRERENDER\n                    ? revalidate ?? false\n                    : undefined\n\n                const fallback: Fallback = fallbackModeToFallbackField(\n                  fallbackMode,\n                  route\n                )\n\n                const meta =\n                  metadata &&\n                  isRoutePPREnabled &&\n                  fallbackMode === FallbackMode.PRERENDER\n                    ? collectMeta(metadata)\n                    : {}\n\n                prerenderManifest.dynamicRoutes[route] = {\n                  experimentalPPR: isRoutePPREnabled,\n                  renderingMode: isAppPPREnabled\n                    ? isRoutePPREnabled\n                      ? RenderingMode.PARTIALLY_STATIC\n                      : RenderingMode.STATIC\n                    : undefined,\n                  experimentalBypassFor: bypassFor,\n                  routeRegex: normalizeRouteRegex(\n                    getNamedRouteRegex(route, false).re.source\n                  ),\n                  dataRoute,\n                  fallback,\n                  fallbackRevalidate,\n                  fallbackStatus: meta.status,\n                  fallbackHeaders: meta.headers,\n                  dataRouteRegex: !dataRoute\n                    ? null\n                    : normalizeRouteRegex(\n                        getNamedRouteRegex(\n                          dataRoute.replace(/\\.rsc$/, ''),\n                          false\n                        ).re.source.replace(/\\(\\?:\\\\\\/\\)\\?\\$$/, '\\\\.rsc$')\n                      ),\n                  prefetchDataRoute,\n                  prefetchDataRouteRegex: !prefetchDataRoute\n                    ? undefined\n                    : normalizeRouteRegex(\n                        getNamedRouteRegex(\n                          prefetchDataRoute.replace(/\\.prefetch\\.rsc$/, ''),\n                          false\n                        ).re.source.replace(\n                          /\\(\\?:\\\\\\/\\)\\?\\$$/,\n                          '\\\\.prefetch\\\\.rsc$'\n                        )\n                      ),\n                  allowHeader: ALLOWED_HEADERS,\n                }\n              }\n            }\n          })\n\n          const moveExportedPage = async (\n            originPage: string,\n            page: string,\n            file: string,\n            isSsg: boolean,\n            ext: 'html' | 'json',\n            additionalSsgFile = false\n          ) => {\n            return staticGenerationSpan\n              .traceChild('move-exported-page')\n              .traceAsyncFn(async () => {\n                file = `${file}.${ext}`\n                const orig = path.join(outdir, file)\n                const pagePath = getPagePath(\n                  originPage,\n                  distDir,\n                  undefined,\n                  false\n                )\n\n                const relativeDest = path\n                  .relative(\n                    path.join(distDir, SERVER_DIRECTORY),\n                    path.join(\n                      path.join(\n                        pagePath,\n                        // strip leading / and then recurse number of nested dirs\n                        // to place from base folder\n                        originPage\n                          .slice(1)\n                          .split('/')\n                          .map(() => '..')\n                          .join('/')\n                      ),\n                      file\n                    )\n                  )\n                  .replace(/\\\\/g, '/')\n\n                if (\n                  !isSsg &&\n                  !(\n                    // don't add static status page to manifest if it's\n                    // the default generated version e.g. no pages/500\n                    (\n                      STATIC_STATUS_PAGES.includes(page) &&\n                      !usedStaticStatusPages.includes(page)\n                    )\n                  )\n                ) {\n                  pagesManifest[page] = relativeDest\n                }\n\n                const dest = path.join(distDir, SERVER_DIRECTORY, relativeDest)\n                const isNotFound =\n                  prerenderManifest.notFoundRoutes.includes(page)\n\n                // for SSG files with i18n the non-prerendered variants are\n                // output with the locale prefixed so don't attempt moving\n                // without the prefix\n                if ((!i18n || additionalSsgFile) && !isNotFound) {\n                  await fs.mkdir(path.dirname(dest), { recursive: true })\n                  await fs.rename(orig, dest)\n                } else if (i18n && !isSsg) {\n                  // this will be updated with the locale prefixed variant\n                  // since all files are output with the locale prefix\n                  delete pagesManifest[page]\n                }\n\n                if (i18n) {\n                  if (additionalSsgFile) return\n\n                  const localeExt = page === '/' ? path.extname(file) : ''\n                  const relativeDestNoPages = relativeDest.slice(\n                    'pages/'.length\n                  )\n\n                  for (const locale of i18n.locales) {\n                    const curPath = `/${locale}${page === '/' ? '' : page}`\n\n                    if (\n                      isSsg &&\n                      prerenderManifest.notFoundRoutes.includes(curPath)\n                    ) {\n                      continue\n                    }\n\n                    const updatedRelativeDest = path\n                      .join(\n                        'pages',\n                        locale + localeExt,\n                        // if it's the top-most index page we want it to be locale.EXT\n                        // instead of locale/index.html\n                        page === '/' ? '' : relativeDestNoPages\n                      )\n                      .replace(/\\\\/g, '/')\n\n                    const updatedOrig = path.join(\n                      outdir,\n                      locale + localeExt,\n                      page === '/' ? '' : file\n                    )\n                    const updatedDest = path.join(\n                      distDir,\n                      SERVER_DIRECTORY,\n                      updatedRelativeDest\n                    )\n\n                    if (!isSsg) {\n                      pagesManifest[curPath] = updatedRelativeDest\n                    }\n                    await fs.mkdir(path.dirname(updatedDest), {\n                      recursive: true,\n                    })\n                    await fs.rename(updatedOrig, updatedDest)\n                  }\n                }\n              })\n          }\n\n          async function moveExportedAppNotFoundTo404() {\n            return staticGenerationSpan\n              .traceChild('move-exported-app-not-found-')\n              .traceAsyncFn(async () => {\n                const orig = path.join(\n                  distDir,\n                  'server',\n                  'app',\n                  '_not-found.html'\n                )\n                const updatedRelativeDest = path\n                  .join('pages', '404.html')\n                  .replace(/\\\\/g, '/')\n\n                if (existsSync(orig)) {\n                  await fs.copyFile(\n                    orig,\n                    path.join(distDir, 'server', updatedRelativeDest)\n                  )\n                  pagesManifest['/404'] = updatedRelativeDest\n                }\n              })\n          }\n\n          // If there's /not-found inside app, we prefer it over the pages 404\n          if (hasStaticApp404) {\n            await moveExportedAppNotFoundTo404()\n          } else {\n            // Only move /404 to /404 when there is no custom 404 as in that case we don't know about the 404 page\n            if (!hasPages404 && !hasApp404 && useStaticPages404) {\n              await moveExportedPage('/_error', '/404', '/404', false, 'html')\n            }\n          }\n\n          if (useDefaultStatic500) {\n            await moveExportedPage('/_error', '/500', '/500', false, 'html')\n          }\n\n          for (const page of combinedPages) {\n            const isSsg = ssgPages.has(page)\n            const isStaticSsgFallback = ssgStaticFallbackPages.has(page)\n            const isDynamic = isDynamicRoute(page)\n            const hasAmp = hybridAmpPages.has(page)\n            const file = normalizePagePath(page)\n\n            const pageInfo = pageInfos.get(page)\n            const durationInfo = exportResult.byPage.get(page)\n            if (pageInfo && durationInfo) {\n              // Set Build Duration\n              if (pageInfo.ssgPageRoutes) {\n                pageInfo.ssgPageDurations = pageInfo.ssgPageRoutes.map(\n                  (pagePath) => {\n                    const duration = durationInfo.durationsByPath.get(pagePath)\n                    if (typeof duration === 'undefined') {\n                      throw new Error(\"Invariant: page wasn't built\")\n                    }\n\n                    return duration\n                  }\n                )\n              }\n              pageInfo.pageDuration = durationInfo.durationsByPath.get(page)\n            }\n\n            // The dynamic version of SSG pages are only prerendered if the\n            // fallback is enabled. Below, we handle the specific prerenders\n            // of these.\n            const hasHtmlOutput = !(isSsg && isDynamic && !isStaticSsgFallback)\n\n            if (hasHtmlOutput) {\n              await moveExportedPage(page, page, file, isSsg, 'html')\n            }\n\n            if (hasAmp && (!isSsg || (isSsg && !isDynamic))) {\n              const ampPage = `${file}.amp`\n              await moveExportedPage(page, ampPage, ampPage, isSsg, 'html')\n\n              if (isSsg) {\n                await moveExportedPage(page, ampPage, ampPage, isSsg, 'json')\n              }\n            }\n\n            if (isSsg) {\n              // For a non-dynamic SSG page, we must copy its data file\n              // from export, we already moved the HTML file above\n              if (!isDynamic) {\n                await moveExportedPage(page, page, file, isSsg, 'json')\n\n                if (i18n) {\n                  // TODO: do we want to show all locale variants in build output\n                  for (const locale of i18n.locales) {\n                    const localePage = `/${locale}${page === '/' ? '' : page}`\n\n                    prerenderManifest.routes[localePage] = {\n                      initialRevalidateSeconds:\n                        exportResult.byPath.get(localePage)?.revalidate ??\n                        false,\n                      experimentalPPR: undefined,\n                      renderingMode: undefined,\n                      srcRoute: null,\n                      dataRoute: path.posix.join(\n                        '/_next/data',\n                        buildId,\n                        `${file}.json`\n                      ),\n                      prefetchDataRoute: undefined,\n                      allowHeader: ALLOWED_HEADERS,\n                    }\n                  }\n                } else {\n                  prerenderManifest.routes[page] = {\n                    initialRevalidateSeconds:\n                      exportResult.byPath.get(page)?.revalidate ?? false,\n                    experimentalPPR: undefined,\n                    renderingMode: undefined,\n                    srcRoute: null,\n                    dataRoute: path.posix.join(\n                      '/_next/data',\n                      buildId,\n                      `${file}.json`\n                    ),\n                    // Pages does not have a prefetch data route.\n                    prefetchDataRoute: undefined,\n                    allowHeader: ALLOWED_HEADERS,\n                  }\n                }\n                // Set Page Revalidation Interval\n                if (pageInfo) {\n                  pageInfo.initialRevalidateSeconds =\n                    exportResult.byPath.get(page)?.revalidate ?? false\n                }\n              } else {\n                // For a dynamic SSG page, we did not copy its data exports and only\n                // copy the fallback HTML file (if present).\n                // We must also copy specific versions of this page as defined by\n                // `getStaticPaths` (additionalSsgPaths).\n                for (const route of additionalPaths.get(page) ?? []) {\n                  const pageFile = normalizePagePath(route.path)\n                  await moveExportedPage(\n                    page,\n                    route.path,\n                    pageFile,\n                    isSsg,\n                    'html',\n                    true\n                  )\n                  await moveExportedPage(\n                    page,\n                    route.path,\n                    pageFile,\n                    isSsg,\n                    'json',\n                    true\n                  )\n\n                  if (hasAmp) {\n                    const ampPage = `${pageFile}.amp`\n                    await moveExportedPage(\n                      page,\n                      ampPage,\n                      ampPage,\n                      isSsg,\n                      'html',\n                      true\n                    )\n                    await moveExportedPage(\n                      page,\n                      ampPage,\n                      ampPage,\n                      isSsg,\n                      'json',\n                      true\n                    )\n                  }\n\n                  const initialRevalidateSeconds =\n                    exportResult.byPath.get(route.path)?.revalidate ?? false\n\n                  if (typeof initialRevalidateSeconds === 'undefined') {\n                    throw new Error(\"Invariant: page wasn't built\")\n                  }\n\n                  prerenderManifest.routes[route.path] = {\n                    initialRevalidateSeconds,\n                    experimentalPPR: undefined,\n                    renderingMode: undefined,\n                    srcRoute: page,\n                    dataRoute: path.posix.join(\n                      '/_next/data',\n                      buildId,\n                      `${normalizePagePath(route.path)}.json`\n                    ),\n                    // Pages does not have a prefetch data route.\n                    prefetchDataRoute: undefined,\n                    allowHeader: ALLOWED_HEADERS,\n                  }\n\n                  // Set route Revalidation Interval\n                  if (pageInfo) {\n                    pageInfo.initialRevalidateSeconds = initialRevalidateSeconds\n                  }\n                }\n              }\n            }\n          }\n\n          // remove temporary export folder\n          await fs.rm(outdir, { recursive: true, force: true })\n          await writeManifest(pagesManifestPath, pagesManifest)\n        })\n      }\n\n      const postBuildSpinner = createSpinner('Finalizing page optimization')\n      let buildTracesSpinner = createSpinner(`Collecting build traces`)\n\n      // ensure the worker is not left hanging\n      worker.end()\n\n      const analysisEnd = process.hrtime(analysisBegin)\n      telemetry.record(\n        eventBuildOptimize(pagesPaths, {\n          durationInSeconds: analysisEnd[0],\n          staticPageCount: staticPages.size,\n          staticPropsPageCount: ssgPages.size,\n          serverPropsPageCount: serverPropsPages.size,\n          ssrPageCount:\n            pagesPaths.length -\n            (staticPages.size + ssgPages.size + serverPropsPages.size),\n          hasStatic404: useStaticPages404,\n          hasReportWebVitals:\n            namedExports?.includes('reportWebVitals') ?? false,\n          rewritesCount: combinedRewrites.length,\n          headersCount: headers.length,\n          redirectsCount: redirects.length - 1, // reduce one for trailing slash\n          headersWithHasCount: headers.filter((r: any) => !!r.has).length,\n          rewritesWithHasCount: combinedRewrites.filter((r: any) => !!r.has)\n            .length,\n          redirectsWithHasCount: redirects.filter((r: any) => !!r.has).length,\n          middlewareCount: hasMiddlewareFile ? 1 : 0,\n          totalAppPagesCount,\n          staticAppPagesCount,\n          serverAppPagesCount,\n          edgeRuntimeAppCount,\n          edgeRuntimePagesCount,\n        })\n      )\n\n      if (NextBuildContext.telemetryState) {\n        const events = eventBuildFeatureUsage(\n          NextBuildContext.telemetryState.usages\n        )\n        telemetry.record(events)\n        telemetry.record(\n          eventPackageUsedInGetServerSideProps(\n            NextBuildContext.telemetryState.packagesUsedInServerSideProps\n          )\n        )\n      }\n\n      if (ssgPages.size > 0 || appDir) {\n        tbdPrerenderRoutes.forEach((tbdRoute) => {\n          const normalizedRoute = normalizePagePath(tbdRoute)\n          const dataRoute = path.posix.join(\n            '/_next/data',\n            buildId,\n            `${normalizedRoute}.json`\n          )\n\n          prerenderManifest.dynamicRoutes[tbdRoute] = {\n            routeRegex: normalizeRouteRegex(\n              getNamedRouteRegex(tbdRoute, false).re.source\n            ),\n            experimentalPPR: undefined,\n            renderingMode: undefined,\n            dataRoute,\n            fallback: ssgBlockingFallbackPages.has(tbdRoute)\n              ? null\n              : ssgStaticFallbackPages.has(tbdRoute)\n                ? `${normalizedRoute}.html`\n                : false,\n            fallbackRevalidate: undefined,\n            dataRouteRegex: normalizeRouteRegex(\n              getNamedRouteRegex(\n                dataRoute.replace(/\\.json$/, ''),\n                false\n              ).re.source.replace(/\\(\\?:\\\\\\/\\)\\?\\$$/, '\\\\.json$')\n            ),\n            // Pages does not have a prefetch data route.\n            prefetchDataRoute: undefined,\n            prefetchDataRouteRegex: undefined,\n            allowHeader: ALLOWED_HEADERS,\n          }\n        })\n\n        NextBuildContext.previewModeId = previewProps.previewModeId\n        NextBuildContext.fetchCacheKeyPrefix =\n          config.experimental.fetchCacheKeyPrefix\n        NextBuildContext.allowedRevalidateHeaderKeys =\n          config.experimental.allowedRevalidateHeaderKeys\n\n        await writePrerenderManifest(distDir, prerenderManifest)\n        await writeClientSsgManifest(prerenderManifest, {\n          distDir,\n          buildId,\n          locales: config.i18n?.locales || [],\n        })\n      } else {\n        await writePrerenderManifest(distDir, {\n          version: 4,\n          routes: {},\n          dynamicRoutes: {},\n          preview: previewProps,\n          notFoundRoutes: [],\n        })\n      }\n\n      await writeImagesManifest(distDir, config)\n      await writeManifest(path.join(distDir, EXPORT_MARKER), {\n        version: 1,\n        hasExportPathMap: typeof config.exportPathMap === 'function',\n        exportTrailingSlash: config.trailingSlash === true,\n        isNextImageImported: isNextImageImported === true,\n      })\n      await fs.unlink(path.join(distDir, EXPORT_DETAIL)).catch((err) => {\n        if (err.code === 'ENOENT') {\n          return Promise.resolve()\n        }\n        return Promise.reject(err)\n      })\n\n      if (Boolean(config.experimental.nextScriptWorkers)) {\n        await nextBuildSpan\n          .traceChild('verify-partytown-setup')\n          .traceAsyncFn(async () => {\n            await verifyPartytownSetup(\n              dir,\n              path.join(distDir, CLIENT_STATIC_FILES_PATH)\n            )\n          })\n      }\n\n      await buildTracesPromise\n\n      if (buildTracesSpinner) {\n        buildTracesSpinner.stopAndPersist()\n        buildTracesSpinner = undefined\n      }\n\n      if (config.output === 'export') {\n        await writeFullyStaticExport(\n          config,\n          dir,\n          enabledDirectories,\n          configOutDir,\n          nextBuildSpan\n        )\n      }\n\n      if (config.output === 'standalone') {\n        await writeStandaloneDirectory(\n          nextBuildSpan,\n          distDir,\n          pageKeys,\n          denormalizedAppPages,\n          outputFileTracingRoot,\n          requiredServerFilesManifest,\n          middlewareManifest,\n          hasInstrumentationHook,\n          staticPages,\n          loadedEnvFiles,\n          appDir\n        )\n      }\n\n      if (postBuildSpinner) postBuildSpinner.stopAndPersist()\n      console.log()\n\n      if (debugOutput) {\n        nextBuildSpan\n          .traceChild('print-custom-routes')\n          .traceFn(() => printCustomRoutes({ redirects, rewrites, headers }))\n      }\n\n      await nextBuildSpan.traceChild('print-tree-view').traceAsyncFn(() =>\n        printTreeView(pageKeys, pageInfos, {\n          distPath: distDir,\n          buildId: buildId,\n          pagesDir,\n          useStaticPages404,\n          pageExtensions: config.pageExtensions,\n          appBuildManifest,\n          buildManifest,\n          middlewareManifest,\n          gzipSize: config.experimental.gzipSize,\n        })\n      )\n\n      await nextBuildSpan\n        .traceChild('telemetry-flush')\n        .traceAsyncFn(() => telemetry.flush())\n\n      await shutdownPromise\n    })\n  } finally {\n    // Ensure we wait for lockfile patching if present\n    await lockfilePatchPromise.cur\n\n    // Ensure all traces are flushed before finishing the command\n    await flushAllTraces()\n    teardownTraceSubscriber()\n    teardownHeapProfiler()\n\n    if (traceUploadUrl && loadedConfig) {\n      uploadTrace({\n        traceUploadUrl,\n        mode: 'build',\n        projectDir: dir,\n        distDir: loadedConfig.distDir,\n        isTurboSession: turboNextBuild,\n        sync: true,\n      })\n    }\n  }\n}\n"],"names":["createStaticWorker","build","ALLOWED_HEADERS","MATCHED_PATH_HEADER","PRERENDER_REVALIDATE_HEADER","PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER","NEXT_CACHE_REVALIDATED_TAGS_HEADER","NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER","pageToRoute","page","routeRegex","getNamedRouteRegex","regex","normalizeRouteRegex","re","source","routeKeys","namedRegex","getCacheDir","distDir","cacheDir","path","join","ciEnvironment","isCI","hasNextSupport","hasCache","existsSync","console","log","Log","prefixes","warn","writeFileUtf8","filePath","content","fs","writeFile","readFileUtf8","readFile","writeManifest","manifest","formatManifest","readManifest","JSON","parse","writePrerenderManifest","PRERENDER_MANIFEST","writeClientSsgManifest","prerenderManifest","buildId","locales","ssgPages","Set","Object","entries","routes","filter","srcRoute","map","route","normalizeLocalePath","pathname","keys","dynamicRoutes","sort","clientSsgManifestContent","devalue","CLIENT_STATIC_FILES_PATH","writeFunctionsConfigManifest","SERVER_DIRECTORY","FUNCTIONS_CONFIG_MANIFEST","writeRequiredServerFilesManifest","requiredServerFiles","SERVER_FILES_MANIFEST","writeImagesManifest","config","images","deviceSizes","imageSizes","sizes","remotePatterns","p","protocol","hostname","makeRe","port","dot","search","localPatterns","IMAGES_MANIFEST","version","STANDALONE_DIRECTORY","writeStandaloneDirectory","nextBuildSpan","pageKeys","denormalizedAppPages","outputFileTracingRoot","middlewareManifest","hasInstrumentationHook","staticPages","loadedEnvFiles","appDir","traceChild","traceAsyncFn","copyTracedFiles","pages","file","files","reduce","acc","envFile","includes","push","outputPath","relative","mkdir","dirname","recursive","copyFile","recursiveCopy","overwrite","originalServerApp","getNumberOfWorkers","experimental","cpus","defaultConfig","memoryBasedWorkersCount","Math","max","min","floor","os","freemem","staticWorkerPath","require","resolve","staticWorkerExposedMethods","progress","Worker","logger","numWorkers","onActivity","run","onActivityAbort","clear","forkOptions","env","process","enableWorkerThreads","workerThreads","exposedMethods","writeFullyStaticExport","dir","enabledDirectories","configOutDir","exportApp","default","pagesWorker","appWorker","buildExport","nextConfig","silent","outdir","end","getBuildId","isGenerateMode","generateBuildId","nanoid","IS_TURBOPACK_BUILD","TURBOPACK","TURBOPACK_BUILD","reactProductionProfiling","debugOutput","runLint","noMangling","appDirOnly","turboNextBuild","experimentalBuildMode","traceUploadUrl","isCompileMode","loadedConfig","trace","undefined","buildMode","isTurboBuild","String","__NEXT_VERSION","NextBuildContext","mappedPages","traceFn","loadEnvConfig","turborepoAccessTraceResult","TurborepoAccessTraceResult","turborepoTraceAccess","loadConfig","PHASE_PRODUCTION_BUILD","NEXT_DEPLOYMENT_ID","deploymentId","hasCustomExportOutput","setGlobal","flyingShuttle","isFullFlyingShuttle","mode","isStoreOnlyFlyingShuttle","shuttleDir","key","customRoutes","loadCustomRoutes","headers","rewrites","redirects","combinedRewrites","beforeFiles","afterFiles","fallback","hasRewrites","length","originalRewrites","_originalRewrites","originalRedirects","_originalRedirects","telemetry","Telemetry","publicDir","pagesDir","findPagesDir","app","encryptionKey","generateEncryptionKeyBase64","isBuild","isSrcDir","startsWith","hasPublicDir","record","eventCliSession","webpackVersion","cliCommand","hasNowJson","findUp","cwd","isCustomServer","turboFlag","eventNextPlugins","then","events","eventSwcPlugins","envInfo","expFeatureInfo","getStartServerInfo","logStartInfo","networkUrl","appUrl","ignoreESLint","Boolean","eslint","ignoreDuringBuilds","shouldLint","typeCheckingOptions","distDirCreated","err","isError","code","isWriteable","Error","cleanDistDir","recursiveDelete","startTypeChecking","error","flush","exit","buildLintEvent","featureName","invocationCount","eventName","EVENT_BUILD_FEATURE_USAGE","payload","validFileMatcher","createValidFileMatcher","pageExtensions","providedPagePaths","NEXT_PRIVATE_PAGE_PATHS","pagesPaths","recursiveReadDir","pathnameFilter","isPageFile","changedPagePathsResult","type","detectChangedEntries","updateIncrementalBuildMetrics","changedPagePaths","changed","unchangedPagePaths","unchanged","middlewareDetectionRegExp","RegExp","MIDDLEWARE_FILENAME","instrumentationHookDetectionRegExp","INSTRUMENTATION_HOOK_FILENAME","rootDir","rootPaths","Array","from","getFilesInDir","some","include","test","sortByPageExts","replace","hasMiddlewareFile","previewProps","previewModeId","crypto","randomBytes","toString","previewModeSigningKey","previewModeEncryptionKey","createPagesMapping","isDev","pagesType","PAGE_TYPES","PAGES","pagePaths","mappedAppPages","changedAppPathsResult","providedAppPaths","NEXT_PRIVATE_APP_PATHS","appPaths","absolutePath","isAppRouterPage","isRootNotFound","ignorePartFilter","part","changedAppPaths","unchangedAppPaths","APP","mappedRootPaths","ROOT","pagesPageKeys","conflictingAppPagePaths","appPageKeys","appKey","normalizedAppPageKey","normalizeAppPath","pagePath","appPath","add","generateInterceptionRoutesRewrites","basePath","totalAppPagesCount","numConflictingAppPaths","conflictingPublicFiles","hasPages404","PAGES_DIR_ALIAS","hasApp404","UNDERSCORE_NOT_FOUND_ROUTE_ENTRY","hasCustomErrorPage","hasPublicUnderScoreNextDir","PUBLIC_DIR_MIDDLEWARE_CONFLICT","hasPublicPageFile","fileExists","FileType","File","numConflicting","nestedReservedPages","match","restrictedRedirectPaths","isAppDynamicIOEnabled","dynamicIO","isAppPPREnabled","checkIsAppPPREnabled","ppr","routesManifestPath","ROUTES_MANIFEST","routesManifest","sortedRoutes","getSortedRoutes","staticRoutes","isDynamicRoute","isReservedPage","pages404","caseSensitive","caseSensitiveRoutes","r","buildCustomRoute","dataRoutes","i18n","rsc","header","RSC_HEADER","varyHeader","NEXT_ROUTER_STATE_TREE_HEADER","NEXT_ROUTER_PREFETCH_HEADER","NEXT_ROUTER_SEGMENT_PREFETCH_HEADER","prefetchHeader","didPostponeHeader","NEXT_DID_POSTPONE_HEADER","contentTypeHeader","RSC_CONTENT_TYPE_HEADER","suffix","RSC_SUFFIX","prefetchSuffix","RSC_PREFETCH_SUFFIX","skipMiddlewareUrlNormalize","chain","NEXT_RESUME_HEADER","clientRouterFilters","clientRouterFilter","nonInternalRedirects","internal","filterPaths","entry","getPageFromPath","item","createClientRouterFilter","clientRouterFilterRedirects","clientRouterFilterAllowedRate","recordFrameworkVersion","updateBuildDiagnostics","buildStage","pagesManifestPath","PAGES_MANIFEST","turbopackBuild","validateTurboNextConfig","startTime","hrtime","bindings","loadBindings","useWasmBinary","dev","supportedBrowsers","project","turbo","createProject","projectPath","rootPath","root","jsConfig","getTurbopackJsConfig","watch","enable","defineEnv","createDefineEnv","isTurbopack","fetchCacheKeyPrefix","middlewareMatchers","browserslistQuery","persistentCaching","isPersistentCachingEnabled","memoryLimit","stringify","entrypointsSubscription","entrypointsSubscribe","currentEntrypoints","global","document","middleware","instrumentation","Map","currentEntryIssues","manifestLoader","TurbopackManifestLoader","entrypointsResult","next","done","return","catch","entrypoints","value","topLevelErrors","issue","issues","message","formatIssue","e","handleEntrypoints","devRewrites","productionRewrites","logErrors","createProgress","size","promises","INITIAL_CONCURRENCY","CONCURRENCY","sema","Sema","remainingRampup","enqueue","fn","acquire","release","handleRouteType","handlePagesErrorRoute","Promise","all","writeManifests","errors","warnings","entryIssues","values","severity","isRelevantWarning","shutdownPromise","shutdown","time","duration","buildTraceContext","buildTracesPromise","useBuildWorker","webpackBuildWorker","webpack","runServerAndEdgeInParallel","parallelServerCompiles","collectServerBuildTracesInParallel","parallelServerBuildTraces","setAttribute","info","traceMemoryUsage","buildOptions","compilerDuration","rest","durationString","round","event","eventBuildCompleted","durationInSeconds","serverBuildPromise","webpackBuild","res","buildTraceWorker","collectBuildTraces","edgeRuntimeRoutes","collectRoutesUsingEdgeRuntime","hasSsrAmpPages","isFlyingShuttle","edgeBuildPromise","postCompileSpinner","createSpinner","buildManifestPath","BUILD_MANIFEST","appBuildManifestPath","APP_BUILD_MANIFEST","staticAppPagesCount","serverAppPagesCount","edgeRuntimeAppCount","edgeRuntimePagesCount","ssgStaticFallbackPages","ssgBlockingFallbackPages","invalidPages","hybridAmpPages","serverPropsPages","additionalPaths","staticPaths","prospectiveRenders","appNormalizedPaths","fallbackModes","appDefaultConfigs","pageInfos","pagesManifest","buildManifest","appBuildManifest","appPathRoutes","appPathsManifest","APP_PATHS_MANIFEST","APP_PATH_ROUTES_MANIFEST","NEXT_PHASE","worker","analysisBegin","staticCheckSpan","functionsConfigManifest","functions","customAppGetInitialProps","namedExports","isNextImageImported","hasNonStaticErrorPage","configFileName","publicRuntimeConfig","serverRuntimeConfig","runtimeEnvConfig","nonStaticErrorPageSpan","errorPageHasCustomGetInitialProps","hasCustomGetInitialProps","checkingApp","errorPageStaticResult","isPageStatic","httpAgentOptions","defaultLocale","nextConfigOutput","output","pprConfig","cacheLifeProfiles","cacheLife","appPageToCheck","customAppGetInitialPropsPromise","namedExportsPromise","getDefinedNamedExports","computedManifestData","computeFromManifest","gzipSize","MIDDLEWARE_MANIFEST","actionManifest","SERVER_REFERENCE_MANIFEST","entriesWithAction","id","node","workers","edge","pageType","checkPageSpan","actualPage","normalizePagePath","totalSize","getJsPageSizeInKb","isRoutePPREnabled","isSSG","isStatic","isServerComponent","isHybridAmp","ssgPageRoutes","find","normalizePathSep","originalAppPath","originalPath","normalizedPath","pageFilePath","isAppBuiltinNotFoundPage","isInsideAppDir","staticInfo","getStaticInfoIncludingLayouts","runtime","maxDuration","pageRuntime","RSC_MODULE_TYPES","client","edgeInfo","isEdgeRuntime","manifestKey","isPageStaticSpan","workerResult","parentId","getId","cacheHandler","cacheHandlers","isrFlushToDisk","maxMemoryCacheSize","cacheMaxMemorySize","set","warnOnce","isDynamic","prerenderedRoutes","appConfig","revalidate","hasGenerateStaticParams","encoded","fallbackRouteParams","dynamic","prerenderFallbackMode","hasStaticProps","isAmpOnly","FallbackMode","BLOCKING_STATIC_RENDER","PRERENDER","hasServerProps","STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR","delete","STATIC_STATUS_PAGES","initialRevalidateSeconds","pageDuration","ssgPageDurations","hasEmptyPrelude","hadUnsupportedValue","errorPageResult","nonStaticErrorPage","returnValue","stopAndPersist","bold","yellow","instrumentationHookEntryFiles","requiredServerFilesManifest","normalizedCacheHandlers","serverFilesManifest","configFile","compress","trustHostHeader","isExperimentalCompile","relativeAppDir","MIDDLEWARE_BUILD_MANIFEST","MIDDLEWARE_REACT_LOADABLE_MANIFEST","sri","SUBRESOURCE_INTEGRITY_MANIFEST","REACT_LOADABLE_MANIFEST","BUILD_ID_FILE","NEXT_FONT_MANIFEST","nonNullable","ignore","buildDataRoute","useStaticPages404","pg","writeBuildId","optimizeCss","globOrig","cssFilePaths","reject","features","nextScriptWorkers","feature","stitchResult","stitchBuilds","edgePreviewProps","__NEXT_PREVIEW_MODE_ID","__NEXT_PREVIEW_MODE_ENCRYPTION_KEY","__NEXT_PREVIEW_MODE_SIGNING_KEY","allowedErrorRate","storeShuttle","inlineStaticEnv","notFoundRoutes","preview","tbdPrerenderRoutes","usedStaticStatusPages","forEach","has","hasPages500","useDefaultStatic500","combinedPages","isApp404Static","hasStaticApp404","staticGenerationSpan","detectConflictingPaths","exportConfig","exportPathMap","defaultMap","query","__nextFallback","__nextSsgPath","get","isDynamicError","checkIsRoutePPREnabled","_fallbackRouteParams","_isDynamicError","_isAppDir","_isRoutePPREnabled","getParamKeys","_isProspectiveRender","isSsg","isFallback","locale","__nextLocale","exportResult","statusMessage","NEXT_SSG_FETCH_METRICS","recordFetchMetrics","writeTurborepoAccessTraceResult","traces","turborepoAccessTraceResults","ssgNotFoundPaths","serverBundle","getPagePath","unlink","hasRevalidateZero","byPath","isAppRouteHandler","isAppRouteRoute","bypassFor","ACTION_HEADER","unknownPrerenderRoutes","knownPrerenderRoutes","prerenderedRoute","getSortedRouteObjects","UNDERSCORE_NOT_FOUND_ROUTE","metadata","hasPostponed","normalizedRoute","dataRoute","posix","prefetchDataRoute","meta","collectMeta","initialStatus","status","initialHeaders","renderingMode","RenderingMode","PARTIALLY_STATIC","STATIC","experimentalPPR","experimentalBypassFor","allowHeader","isDynamicAppRoute","fallbackMode","NOT_FOUND","fallbackRevalidate","fallbackModeToFallbackField","fallbackStatus","fallbackHeaders","dataRouteRegex","prefetchDataRouteRegex","moveExportedPage","originPage","ext","additionalSsgFile","orig","relativeDest","slice","split","dest","isNotFound","rename","localeExt","extname","relativeDestNoPages","curPath","updatedRelativeDest","updatedOrig","updatedDest","moveExportedAppNotFoundTo404","isStaticSsgFallback","hasAmp","pageInfo","durationInfo","byPage","durationsByPath","hasHtmlOutput","ampPage","localePage","pageFile","rm","force","postBuildSpinner","buildTracesSpinner","analysisEnd","eventBuildOptimize","staticPageCount","staticPropsPageCount","serverPropsPageCount","ssrPageCount","hasStatic404","hasReportWebVitals","rewritesCount","headersCount","redirectsCount","headersWithHasCount","rewritesWithHasCount","redirectsWithHasCount","middlewareCount","telemetryState","eventBuildFeatureUsage","usages","eventPackageUsedInGetServerSideProps","packagesUsedInServerSideProps","tbdRoute","allowedRevalidateHeaderKeys","EXPORT_MARKER","hasExportPathMap","exportTrailingSlash","trailingSlash","EXPORT_DETAIL","verifyPartytownSetup","printCustomRoutes","printTreeView","distPath","lockfilePatchPromise","cur","flushAllTraces","teardownTraceSubscriber","teardownHeapProfiler","uploadTrace","projectDir","isTurboSession","sync"],"mappings":"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"}